<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Structures.Drawing</name>
    </assembly>
    <members>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityCommandEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionAllPointAssociations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionZeroPointAssociations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionStartPointAssociations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionEndPointAssociations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionRebarOrBoltAssociations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionStartPointLocation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.GetDimensionEndPointLocation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityCommandEnum.ExportDimensionAttributes">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.FilterRuleInfo">
            <summary>
            Struct used to store the information from object used in creating filter rule
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.Side">
            <summary>
            Enum for the side of the dimension
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityManager">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityManager.Position">
            <summary>
            Enum for the position of the dimension
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityManager.GridLinesLabel">
            <summary>
            Cache of the grid line names in the model
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityManager.GridLinesId">
            <summary>
            Cache of the grid line ids in the model
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetDimensionStartPointRules(Tekla.Structures.Drawing.StraightDimension)">
            <summary>
            Returns list of start point rules related to the dimension
            </summary>
            <param name="dimension">The target dimension</param>
            <returns>List of rules</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetDimensionEndPointRules(Tekla.Structures.Drawing.StraightDimension)">
            <summary>
            Returns list of end point rules related to the dimension
            </summary>
            <param name="dimension">The target dimension</param>
            <returns>List of rules</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetAllDimensionPointAssociations(System.Int32,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieve the rules associating objects to the dimension points.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="rules">rules for the dimension points</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionStartPointAssociations(System.Int32,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieve the rules associating objects to the start point of a dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="rules">rules for the dimension start point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionEndPointAssociations(System.Int32,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieve the rules associating objects to the end point of a dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="rules">rules for the dimension end point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionZeroPointAssociations(System.Int32,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieve the rules associating objects to the zero point of the dimension set of a dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="rules">rules for the dimension set zero point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionRebarOrBoltAssociations(System.Int32,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieve the rebar or bolt specific rules for the dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="rules">rebar or bolt rules for the dimension</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionStartPointLocation(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Retrieve the screen location of the start point of a dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="screenX">the screen x location of the dimension start point</param>
            <param name="screenY">the screen y location of the dimension start point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryGetDimensionEndPointLocation(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Retrieve the screen location of the end point of a dimension.
            </summary>
            <param name="dimensionId">ID of the drawing dimension under consideration</param>
            <param name="screenX">the screen x location of the dimension end point</param>
            <param name="screenY">the screen y location of the dimension end point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.TryCreateFilterDimensionRuleFromSelectedDimensions">
            <summary>
            Creates a model object filter suitable to be used in dimensioning
            </summary>
            <returns>created filenames (.vf, .FilterDimXml, .dim)</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.CollectTargetAttributes(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,Tekla.Structures.Identifier,System.Collections.Generic.List{Tekla.Structures.DrawingInternal.FilterRuleInfo}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.EscapeSpecialChars(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetModelAttributesFolder(Tekla.Structures.Model.Model)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.DbOperation(Tekla.Structures.DrawingInternal.AssociativityCommandEnum)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetDimensionPointRules(System.Int32,Tekla.Structures.DrawingInternal.AssociativityCommandEnum,System.Collections.Generic.IList{Tekla.Structures.DrawingInternal.PointAssociativityRule}@)">
            <summary>
            Retrieves the associativity rules about dimension end points.
            </summary>
            <param name="dimensionId">Id of the dimension under consideration</param>
            <param name="command">fetch associations with start point or end point</param>
            <param name="outputList">list of point rules (intersection of planes)</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.ExportDimensionAttributes(System.Int32,System.String)">
            <summary>
            Retrieves the associativity rules about dimension end points.
            </summary>
            <param name="dimensionId">Id of the dimension under consideration</param>
            <param name="fullPathName">Full path to the .dim file to be created</param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetDimensionPointLocation(System.Int32,Tekla.Structures.DrawingInternal.AssociativityCommandEnum,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the screen location of a dimension point.
            </summary>
            <param name="dimensionId">Id of the dimension under consideration</param>
            <param name="command">fetch the location of a start point or end point</param>
            <param name="screenX">the screen x location of the dimension point</param>
            <param name="screenY">the screen y location of the dimension point</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityManager.GetPosition(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            The position of the dimension set
            </summary>
            <param name="dimSetUpDirection">the dimension set up direction</param>
            <returns>the position of the dimension set</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.DEFAULT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.OBJECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.CUT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.EDGE_CHAMFER">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.GRID_RELATED">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.GRID_INTERSECTION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.GRID_LINE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.POUR_OBJECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.POUR_BREAK">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.CENTER">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType.REF_POINT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.Rule">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.PointType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.MainModelObjectIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.SecondaryModelObjectIdentifier">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.#ctor(Tekla.Structures.DrawingInternal.PointAssociativityRule,Tekla.Structures.DrawingInternal.DisplayableAssociativityRule.AssociationType,Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityPointTypeEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityPointTypeEnum.DimensionZeroPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityPointTypeEnum.DimensionStartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityPointTypeEnum.DimensionEndPoint">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.PointAssociativityRule">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.RuleId">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.PointType">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.ObjectId1">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.PlaneName1">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.ObjectId2">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.PlaneName2">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.ObjectId3">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.PlaneName3">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.PointAssociativityRule.IsCenterBased">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.XScale">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.YScale">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.Scaling">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.ToStruct(Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t.FromStruct(Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.Scaling">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.Font">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.ToStruct(Tekla.Structures.Drawing.LinkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t.FromStruct(Tekla.Structures.Drawing.LinkAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t.IsFixed">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t.PlacingDistance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t.PlacingQuarter">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t.ToStruct(Tekla.Structures.Drawing.PlacingAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingAttributes_t.FromStruct(Tekla.Structures.Drawing.PlacingAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.TopLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.TopRight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.BottomLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.BottomRight">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.ToStruct(Tekla.Structures.Drawing.PlacingQuarterAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingQuarterAttributes_t.FromStruct(Tekla.Structures.Drawing.PlacingQuarterAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.aPrinterInstance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.ScalingType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.Scale">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.PrintToMultipleSheet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.NumberOfCopies">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.Orientation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.PrintArea">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.aFileName">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPrintAttributes_t.ToStruct(Tekla.Structures.Drawing.PrintAttributes,System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t.Unit">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t.Format">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t.Precision">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t.ToStruct(Tekla.Structures.Drawing.UnitAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrUnitAttributes_t.FromStruct(Tekla.Structures.Drawing.UnitAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicSymbolAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicSymbolAttributes_t.Shape">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicSymbolAttributes_t.Size">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicSymbolAttributes_t.ToStruct(Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicSymbolAttributes_t.FromStruct(Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicTagAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicTagAttributes_t.Offset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicTagAttributes_t.Location">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicTagAttributes_t.ToStruct(Tekla.Structures.Drawing.ViewMarkBasicTagAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkBasicTagAttributes_t.FromStruct(Tekla.Structures.Drawing.ViewMarkBasicTagAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.CloningManager">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CloningManager.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CloningManager.SetPartialCloningSettings(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CloningManager.CloneView(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CloningManager.GetViewMatchingScore(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCloningHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloningHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloningHandler_t.Parameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloningHandler_t.OutputParameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloningHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DatabaseObjectExtensions">
            <summary>Extension methods for class DatabaseObject.</summary>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DatabaseObjectExtensions.GetIdentifier(Tekla.Structures.Drawing.DatabaseObject)">
            <summary>Returns the Identifier of the DatabaseObject.</summary>
            <param name="databaseObject">The DatabaseObject to obtain the Identifier from.</param>
            <returns>The Identifier of the specified DatabaseObject.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DatabaseObjectExtensions.GetViewIdentifier(Tekla.Structures.Drawing.DatabaseObject)">
            <summary>Returns the Identifier of the view containing the DatabaseObject.</summary>
            <param name="databaseObject">The DatabaseObject to obtain the View Identifier from.</param>
            <returns>The Identifier of the View that contains the specified DatabaseObject.</returns>
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLevelMark_t">
            <summary>
            .Net counter struct for core level mark data
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.DrawingObject">
            <summary>
            The drawing object
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.SubType">
            <summary>
            The sub type
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.ModelObjectId">
            <summary>
            The model object identifier
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.InsertionPoint">
            <summary>
            The insertion point
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.BasePoint">
            <summary>
            The base point
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.Placing">
            <summary>
            The placing
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.Hideable">
            <summary>
            The hideable
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.LevelMarkAttributes">
            <summary>
            The level mark attributes
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.ToStruct(Tekla.Structures.Drawing.LevelMark)">
            <summary>
            .Net data to core data.
            </summary>
            <param name="levelmark">The level mark.</param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLevelMark_t.FromStruct(Tekla.Structures.Drawing.LevelMark)">
            <summary>
            .Net data from core data.
            </summary>
            <param name="levelmark">The level mark.</param>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t">
            <summary>
            .Net counter struct for core level mark attributes data
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.CommonAttributes">
            <summary>
            The common attributes
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.UsePositiveSignForPositiveLevels">
            <summary>
            The use positive sign for positive levels
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.TextHidden">
            <summary>
            The text hidden
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Postfix">
            <summary>
            The postfix
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Unit">
            <summary>
            The unit
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.UseGrouping">
            <summary>
            The use grouping
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Angle">
            <summary>
            The angle
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.Frame">
            <summary>
            The frame
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.TransparentBackground">
            <summary>
            The transparent background
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.ArrowHead">
            <summary>
            The arrow head
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.PlacingAttributes">
            <summary>
            The placing attributes
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.ToStruct(Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            .Net data to core data.
            </summary>
            <param name="Attributes">The attributes.</param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t.FromStruct(Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            .Net data from core data.
            </summary>
            <param name="Attributes">The attributes.</param>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.InternalOnlyAttribute">
            <summary>
            This attribute specifies that a DrawingObject derived class is for internal usage only, which means that it
            may not work as a regular open API class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.RevisionMark">
            <summary>
            Represents a revision mark. TODO: This class is a placeholder to simply have some instance to represent a
            revision mark on a selection event.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Tekla.Structures.DrawingInternal.RevisionMark"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.Delete">
            <summary>
            Does nothing.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.Insert">
            <summary>
            Does nothing.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.IsEqual(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="objectToCompare">Object to compare to.</param>
            <returns><c>true</c> if the object is a <see cref="T:Tekla.Structures.DrawingInternal.RevisionMark"/></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.Modify">
            <summary>
            Does nothing.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.RevisionMark.Select">
            <summary>
            Does nothing.
            </summary>
            <returns>Always <c>true</c></returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DrawingExtensions">
            <summary>
            Drawing extension methods.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DrawingExtensions.CachedSelect(Tekla.Structures.Drawing.Drawing)">
            <summary>Selects the object instance from the model database.</summary>
            <param name="drawing">The drawing.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DrawingExtensions.CachedModify(Tekla.Structures.Drawing.Drawing)">
            <summary>Modifies this instance in the model database.</summary>
            <param name="drawing">The drawing.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DrawingExtensions.GetPlotFileName(Tekla.Structures.Drawing.Drawing,System.Boolean)">
            <summary>Get plot file name.</summary>
            <remarks>
              Note: The returned plot file name can contain invalid file name characters.
            </remarks>
            <param name="drawing">The drawing.</param>
            <param name="includeRevisionInfo">Whether to include revision info.</param>
            <returns>The plot file name or an empty string if an error occured.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DrawingExtensions.GetPlotFileNameExt(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Drawing.IncludeRevisionMarkEnum)">
            <summary>Get plot file name.</summary>
            <remarks>
              Note: The returned plot file name can contain invalid file name characters.
            </remarks>
            <param name="drawing">The drawing.</param>
            <param name="includeRevisionInfo">How or if to include revision info.</param>
            <returns>The plot file name or an empty string if an error occured.</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.LayoutOptionEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionEnum.LAY_OPT_UNKNOWN">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionEnum.LAY_OPT_DRAWING_TYPES">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.LayoutOptionTypeEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionTypeEnum.UNKNOWN">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionTypeEnum.INT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionTypeEnum.STRING">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.LayoutOptionTypeEnum.DOUBLE">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.LayoutOptions">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.SetDrawingTypeAllowed(System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.GetDrawingTypeAllowed(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.SetOption(Tekla.Structures.DrawingInternal.LayoutOptionEnum,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.SetOption(Tekla.Structures.DrawingInternal.LayoutOptionEnum,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.SetOption(Tekla.Structures.DrawingInternal.LayoutOptionEnum,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.GetOptionInt(Tekla.Structures.DrawingInternal.LayoutOptionEnum)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.GetOptionStr(Tekla.Structures.DrawingInternal.LayoutOptionEnum)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.GetOptionDouble(Tekla.Structures.DrawingInternal.LayoutOptionEnum)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.GetOptionType(Tekla.Structures.DrawingInternal.LayoutOptionEnum)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.DbOperationCommon(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutOptions.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Double@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.MarkLearningCommandEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.MarkLearningCommandEnum.GetViewAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.MarkLearningCommandEnum.CountModelObjectTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.MarkLearningCommandEnum.ListDrawingModelObjectsInView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.MarkLearningCommandEnum.GetMarkContent">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.MarkLearning">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.GetViewAttributesFromCurrentDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.GetViewAttributes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.CountModelObjectTypesFromCurrentDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.CountModelObjectTypes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.ListDrawingModelObjectsInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkLearning.GetMarkContent(System.Int32)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.InputDrawingId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.InputObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.ReturnString">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t.ReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.EditMode">
            <summary>Edit mode.</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EditMode.ModelEditMode">
            <summary>Model edit mode.</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EditMode.DrawingEditMode">
            <summary>Drawing edit mode.</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EditMode.PlanEditMode">
            <summary>Plan edit mode.</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EditMode.LayoutEditMode">
            <summary>Layout edit mode.</summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.Operation">
            <summary>
            Internal operations.
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.Operation.RemoteDocumentManagerController">
            <summary>
            Gets or sets the remote selected drawings.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.FillSelectedDrawings(System.String)">
            <summary>
              Fill selected drawings.
            </summary>
            <param name="Param">The parameter.</param>
            <returns>The process ID and thread ID string of hex digits.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.FillVisibleDrawings(System.String)">
            <summary>
              Fill visible drawings.
            </summary>
            <param name="Param">The parameter.</param>
            <returns>The process ID and thread ID string of hex digits.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.UpdateDocumentManager(System.String)">
            <summary>Update document manager.</summary>
            <param name="param">The drawing ids as newline separated string.</param>
            <returns>An empty string.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.ShowDocumentManagerWindow(System.String)">
            <summary>
              Show document manager window.
            </summary>
            <param name="Param">The parameter.</param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SetDocumentManagerSelectedDrawing(System.String)">
            <summary>
              Set document manager selected drawing.
            </summary>
            <param name="Param">The parameter.</param>
            <returns>An empty string.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SetDrawingPlotDateById(System.Int32)">
            <summary>
            Set drawing plot date.
            </summary>
            <param name="drawingId">The drawing ID.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DisplayDrawingPropertiesDialog">
            <summary>
            DisplayDrawingPropertiesDialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DisplayDrawingUdaDialog">
            <summary>
            DisplayDrawingUdaDialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DisplayRevisionDialog">
            <summary>
            DisplayRevisionDialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.UpdateSelectedDrawings">
            <summary>
            UpdateSelectedDrawings.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.UpdateSelectedDrawingMarks">
            <summary>
            UpdateSelectedDrawingMarks.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.RecreateSelectedDrawings">
            <summary>
            RecreateSelectedDrawings.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DeleteSelectedDrawings">
            <summary>
            DeleteSelectedDrawings.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DisplayDrawingCloningDialog">
            <summary>
            DisplayDrawingCloningDialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.DisplaySnapshotsDialog">
            <summary>
            DisplaySnapshotsDialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.AddToMasterDrawingCatalog">
            <summary>
            AddToMasterDrawingCatalog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.CopySelectedDrawingsToNewSheet">
            <summary>
            CopySelectedDrawingsToNewSheet.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.HighlightGridLine(System.Int32)">
            <summary>
            HighlightGridLine.
            </summary>
            <param name="GridLineId">The model.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.UnhighlightGridLine(System.Int32)">
            <summary>
            UnhighlightGridLine.
            </summary>
            <param name="GridLineId">The model.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.HighlightPartInView(System.Int32,System.Int32)">
            <summary>
            IncludeDrawingViews.
            </summary>
            <param name="ModelId">The model.</param>
            /// <param name="ViewId">The view.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.UnhighlightPartInView(System.Int32,System.Int32)">
            <summary>
            IncludeDrawingViews.
            </summary>
            <param name="ModelId">The model.</param>
            /// <param name="ViewId">The view.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.ShowAssociativityPinPushed(System.Int32,System.Int32)">
            <summary>
            Use "pushed" icon for associativity pin.
            </summary>
            <param name="DrawingObjectId">The drawing object (dimension) Id.</param>
            <param name="IsStartPoint">True for the dimension start point, false for the dimension end point.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.ShowAssociativityPinUnpushed(System.Int32,System.Int32)">
            <summary>
            Use normal icon for associativity pin.
            </summary>
            <param name="DrawingObjectId">The drawing object (dimension) Id.</param>
            <param name="IsStartPoint">True for the dimension start point, false for the dimension end point.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SignalDrawingSelectionChanged">
            <summary>
            SignalDrawingSelectionChanged.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController)">
            <summary>
            Set document manager controller object on the TS side.
            </summary>
            <param name="documentManagerController">The document manager controller.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.GetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController@)">
            <summary>
            Get document manager controller object on the TS side.
            </summary>
            <param name="documentManagerController">The document manager controller.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.TryOpenDrawing(System.Int32)">
            <summary>
            Try to open drawing.
            </summary>
            <param name="drawingId">The drawing ID.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.GetEditMode">
            <summary>
            GetEditMode.
            </summary>
            <returns>The edit mode.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SelectPartsByDrawings">
            <summary>Select parts by drawings.</summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.GetDrawingsBySelectedParts">
            <summary>Get selected drawing IDs by selected parts.</summary>
            <returns>The drawing IDs.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SetColorRgb(System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>Set color rgb.</summary>
            <param name="color">The color.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.SetPenWidth(System.Int32,System.Int32)">
            <summary>SetPenWidth</summary>
            <param name="color">The color.</param>
            <param name="penWidth">The pen width.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.RefreshColorMode">
            <summary>Refresh color mode in drawing editor.</summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.GetDrawingObject(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Gets drawing object.
            </summary>
            <param name="id">The identifier.</param>
            <param name="drawingIdentifier">The drawing identifier.</param>
            <returns>
            The drawing object.
            </returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.GetDrawing(Tekla.Structures.Identifier)">
            <summary>
            Creates an instance of the Drawing class for an existing drawing.
            Does not call Select().
            </summary>
            <param name="drawingId">The drawing identifier.</param>
            <returns>The Drawing instance or null in case of failure.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.AddObjectsToViewAndModify(Tekla.Structures.Drawing.View,System.Collections.Generic.List{Tekla.Structures.Identifier})">
            <summary>
            Add objects to view in GA drawing. View is modified in database.
            </summary>
            <param name="view"></param>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.Select(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="drawingObjects">The list of drawing objects to select.</param>
            <param name="suppressCallbacks">if set to <c>true</c>, suppress callbacks.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.CreateViewWithoutLoadingAttributes(Tekla.Structures.Identifier,Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Creates a drawing view without loading the attributes.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="viewIdentifier">The view identifier.</param>
            <param name="drawingIdentifier">The drawing identifier.</param>
            <returns>The drawing view.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Operation.ClientIdToHexString">
            <summary>Client ID to hex string.</summary>
            <returns>A hex string representation of the client ID.</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotEnumerator_t">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.MoreObjectsLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.nObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.Filter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.SubFilter">
            <summary>
            Enumerator subtype
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.nObjectToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.aObjectIDs">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.aObjectTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.FatherId">
            <summary> For example for getting children info </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.DrawingId">
            <summary> DO NOT USE! For internal usage only!</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.aFilterName">
            <summary>Name of the select filter to apply
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotEnumerator_t.ClientId">
            <summary> DO NOT USE! For internal usage only!</summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotEnumerator_t.#ctor(Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum,Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum)">
            <summary> DO NOT USE! For internal usage only!</summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.RuleTypeEnum">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.RuleTypeEnum.TYPE_UNDEFINED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.RuleTypeEnum.STRETCH">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.RuleTypeEnum.SHRINK">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.RuleTypeEnum.FIT">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.DIRECTION_UNDEFINED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.X_MIN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.X_MAX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.Y_MIN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.Y_MAX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.Z_MIN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.Z_MAX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.DirectionEnum.ALL">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.NONE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.BOTTOM">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.TOP">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.RIGHT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.LEFT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.FRONT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.BEHIND">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.HORIZONTAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.VERTICAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.PERPENDICULAR">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.PlaneNameEnum.NEAREST">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.AssociativityUpdateMode">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.AssociativityUpdateMode.UNDEFINED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.AssociativityUpdateMode.KEEP_CURRENT_ASSOCIATION">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.AssociativityUpdateMode.REASSOCIATE_BY_AUTOMATION">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule.PartId">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule.Direction">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule.RuleType">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule.Equals(Tekla.Structures.DrawingInternal.AssociativityRule.FitRule)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.FitRule.#ctor">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AssociativityRule.Followable">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.Followable.ModelPartId">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.AssociativityRule.Followable.PlaneName">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.Followable.#ctor">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityRule.Follow">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityRule.Rotation">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityRule.Rules">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AssociativityRule.UpdateMode">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.#ctor">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.#ctor(Tekla.Structures.Drawing.ViewBase)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.DrawingInternal.AssociativityRule.Followable,Tekla.Structures.DrawingInternal.AssociativityRule.Followable)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.DrawingInternal.AssociativityRule.Followable,Tekla.Structures.DrawingInternal.AssociativityRule.Followable,Tekla.Structures.DrawingInternal.AssociativityRule.AssociativityUpdateMode)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.ExportFitRules">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.ImportFitRules">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.Insert">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.Select">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.Modify">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.Delete">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.IsEqual(System.Object)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.AddRule(Tekla.Structures.DrawingInternal.AssociativityRule.FitRule)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.AssociativityRule.RemoveRule(Tekla.Structures.DrawingInternal.AssociativityRule.FitRule)">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrFollowableAssociativity_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFollowableAssociativity_t.ModelPartId">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFollowableAssociativity_t.PlaneName">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAssociativity_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.DrawingObject">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.Follow">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.Rotation">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.UpdateMode">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.ToStruct(Tekla.Structures.DrawingInternal.AssociativityRule)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAssociativity_t.FromStruct(Tekla.Structures.DrawingInternal.AssociativityRule)">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t.ToStruct">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t.FromStruct">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t.DimensionSetIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t.Hideable">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t.ToStruct(Tekla.Structures.Drawing.DimensionBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionBase_t.FromStruct(Tekla.Structures.Drawing.DimensionBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t.Object">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t.Dimension1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t.Dimension2">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t.ToStruct(Tekla.Structures.Drawing.DimensionLink)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionLink_t.FromStruct(Tekla.Structures.Drawing.DimensionLink)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionSetBase_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBase_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBase_t.Hideable">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionSetBase_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionSetBase_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrHideable_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHideable_t.ShouldBeHiddenFlags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHideable_t.HiddenFlags">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrHideable_t.ToStruct(Tekla.Structures.Drawing.Hideable)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrHideable_t.FromStruct(Tekla.Structures.Drawing.Hideable)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLineTypes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineTypes_t.LineType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineTypes_t.CustomLineTypeId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineTypes_t.CustomLineTypeName">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineTypes_t.ToStruct(Tekla.Structures.Drawing.LineTypes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineTypes_t.FromStruct(Tekla.Structures.Drawing.LineTypes@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLink_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.Target">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.Text">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.Size">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.DrawingId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.DrawingType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLink_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLink_t.ToStruct(Tekla.Structures.Drawing.HyperLink)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLink_t.FromStruct(Tekla.Structures.Drawing.HyperLink)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLink_t.ToStruct(Tekla.Structures.Drawing.DrawingLink)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLink_t.FromStruct(Tekla.Structures.Drawing.DrawingLink)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.Path">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.Size">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.ToStruct(Tekla.Structures.Drawing.EmbeddedObjectBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t.FromStruct(Tekla.Structures.Drawing.EmbeddedObjectBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlacing_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacing_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacing_t.LeaderLinePoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacing_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacing_t.EndPoint">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacing_t.ToStruct(Tekla.Structures.Drawing.PlacingBase,Tekla.Structures.Drawing.PreferredPlacingTypeBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacing_t.FromStruct(Tekla.Structures.Drawing.PlacingBase@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPreferredPlacingType_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPreferredPlacingType_t.PreferredPlacingType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPreferredPlacingType_t.ToStruct(Tekla.Structures.Drawing.PreferredPlacingTypeBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPreferredPlacingType_t.FromStruct(Tekla.Structures.Drawing.PreferredPlacingTypeBase@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlugin_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlugin_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlugin_t.Name">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlugin_t.ToStruct(Tekla.Structures.Drawing.Plugin)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlugin_t.FromStruct(Tekla.Structures.Drawing.Plugin)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPluginQueue_t">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.PluginOperation">
            <summary>Internal operations for plugins.</summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.PluginOperation.WaitInPluginQueue">
            <summary>
            Block thread while define input is running.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrTextFile_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.Path">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.Size">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFile_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextFile_t.ToStruct(Tekla.Structures.Drawing.TextFile)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextFile_t.FromStruct(Tekla.Structures.Drawing.TextFile)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.Scaling">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.Font">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.ToStruct(Tekla.Structures.Drawing.TextFile.TextFileAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t.FromStruct(Tekla.Structures.Drawing.TextFile.TextFileAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDetailMark_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.CenterPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.BoundaryPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.LabelPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.ToStruct(Tekla.Structures.Drawing.DetailMark)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMark_t.FromStruct(Tekla.Structures.Drawing.DetailMark)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.MarkName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.BoundaryShape">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.BoundaryLineType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.MarkSymbolAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.MarkSymbolColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.TagsAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.ToStruct(Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t.FromStruct(Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.TagA1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.TagA2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.TagA3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.TagA4">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.TagA5">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.ToStruct(Tekla.Structures.Drawing.DetailMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDetailMarkTagsAttributes_t.FromStruct(Tekla.Structures.Drawing.DetailMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSectionMark_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.LeftPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.RightPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.MiddlePoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.IsCurved">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.ToStruct(Tekla.Structures.Drawing.SectionMark)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.ToStruct(Tekla.Structures.Drawing.CurvedSectionMark)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.FromStruct(Tekla.Structures.Drawing.SectionMark)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMark_t.FromStruct(Tekla.Structures.Drawing.CurvedSectionMark)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t.Shape">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t.Size">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t.Position">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t.ToStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkSymbol_t.FromStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.MarkName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineLength">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineLengthOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineWidthOffsetLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineWidthOffsetRight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LineColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.SymbolColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.LeftSymbol">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.RightSymbol">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.TagsAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.ToStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t.FromStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t.dotGrViewMarkBasicTagAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t.ShowOnSide">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t.Rotation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t.ToStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagAttributes_t.FromStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.TagA1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.TagA2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.TagA3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.TagA4">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.TagA5">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.ToStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSectionMarkTagsAttributes_t.FromStruct(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrWeldMark_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.ToStruct(Tekla.Structures.Drawing.WeldMark)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMark_t.FromStruct(Tekla.Structures.Drawing.WeldMark)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.ShowWeldNumber">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.VisibilityFlags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.FontAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.LineColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.LineType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.TransparentBackground">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.AngleAbove">
            <summary>
            Show angle above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.AngleBelow">
            <summary>
            Show angle below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.SizeAbove">
            <summary>
            Show size above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.SizeBelow">
            <summary>
            Show size below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.FinishAbove">
            <summary>
            Show finish above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.FinishBelow">
            <summary>
            Show finish below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.TypeAbove">
            <summary>
            Show type above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.TypeBelow">
            <summary>
            Show type below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.ContourAbove">
            <summary>
            Show contour above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.ContourBelow">
            <summary>
            Show contour below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.LengthAbove">
            <summary>
            Show length above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.LengthBelow">
            <summary>
            Show length below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.PitchAbove">
            <summary>
            Show pitch above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.PitchBelow">
            <summary>
            Show pitch below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.EffectiveThroatAbove">
            <summary>
            Show effective throat above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.EffectiveThroatBelow">
            <summary>
            Show effective throat below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.RootOpeningAbove">
            <summary>
            Show root opening above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.RootOpeningBelow">
            <summary>
            Show root opening below
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.ReferenceText">
            <summary>
            Show reference text
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.EdgeAround">
            <summary>
            Show edge/around
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.WorkshopSite">
            <summary>
            Show workshop/site
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.PrefixAbove">
            <summary>
            Show prefix above
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.Flags.PrefixBelow">
            <summary>
            Show prefix below
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.ToStruct(Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.FromStruct(Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.SeamAboveToStruct(Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.SeamBelowToStruct(Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.CommonVisibilityAttributesToStruct(Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.SeamAboveFromStruct(Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.SeamBelowFromStruct(Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t.CommonVisibilityAttributesFromStruct(Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.Layout">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.TableLayoutId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.SheetSize">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.ListHiddenObjectsInTemplates">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.SizeDefinitionMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.ToStruct(Tekla.Structures.Drawing.LayoutAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLayoutAttributes_t.FromStruct(Tekla.Structures.Drawing.LayoutAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t.OffsetX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t.OffsetY">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t.ToStruct(Tekla.Structures.Drawing.GraphicObjectHatchAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObjectHatchAttributes_t.FromStruct(Tekla.Structures.Drawing.GraphicObjectHatchAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrModelObjectHatchAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObjectHatchAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObjectHatchAttributes_t.AutomaticScaling">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrModelObjectHatchAttributes_t.ToStruct(Tekla.Structures.Drawing.ModelObjectHatchAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrModelObjectHatchAttributes_t.FromStruct(Tekla.Structures.Drawing.ModelObjectHatchAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.DimensionBase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.ArcPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.ArcPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.ArcPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.Distance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionOrthogonal)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionOrthogonal)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.DimensionBase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.ArcPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.ArcPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.ArcPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.Distance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionRadial)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionRadial)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.DimensionSetBase">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.Attributes">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.ArcPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.ArcPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.ArcPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.Distance">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.DimensionSetBase">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.Attributes">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.ArcPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.ArcPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.ArcPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.Distance">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionSetRadial)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionSetRadial)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t.DimensionType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t.CurvedDimensionType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t.ToStruct(Tekla.Structures.Drawing.RadiusDimensionAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t.FromStruct(Tekla.Structures.Drawing.RadiusDimensionAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetBaseAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetBaseAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetBaseAttributes_t.ToStruct(Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetBaseAttributes_t.FromStruct(Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.DimensionBase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.Origin">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.Point1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.Point2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.Distance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.ToStruct(Tekla.Structures.Drawing.AngleDimension)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAngleDimension_t.FromStruct(Tekla.Structures.Drawing.AngleDimension)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t.AngleType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t.TriangleBase">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t.ToStruct(Tekla.Structures.Drawing.AngleDimensionAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t.FromStruct(Tekla.Structures.Drawing.AngleDimensionAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLineAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineAttributes_t.Type">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineAttributes_t.Color">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineAttributes_t.ToStruct(Tekla.Structures.Drawing.LineTypeAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineAttributes_t.FromStruct(Tekla.Structures.Drawing.LineTypeAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAutomation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAutomation_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAutomation_t.FileName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAutomation_t.QueryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAutomation_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAutomation_t.ReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.QueryTypeEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_DELETE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_INSERT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_UPDATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_SELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_CACHED_SELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_CACHED_UPDATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_LIMITED_SELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.QUERY_LIMITED_UPDATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.ATTRIBUTES_LOAD">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.LOAD_SYMBOL_LIBRARIES">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.RETRIEVE_ATTRIBUTES">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_COMMIT_CHANGES">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_PLACE_VIEWS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_LOAD_LAYOUT_ATTRIBUTES">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_UPDATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_CHECK_PART_TYPE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_ISSUE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.DRAWING_UNISSUE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_SET_ACTIVE_DRAWING">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_SAVE_AND_CLOSE_ACTIVE_DRAWING">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_GET_ACTIVE_DRAWING_ID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_GET_ACTIVE_DRAWING_TYPE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_GET_DRAWING_TYPE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_GET_MODELOBJECTS_FROM_DRAWING">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_LAYOUT_EDITOR_QUERY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_LAYOUT_EDITOR_OPERATION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_TABLELAYOUT_TABLE_QUERY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_TABLELAYOUT_TABLE_OPERATION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_TABLELAYOUT_QUERY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_TABLELAYOUT_OPERATION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_SET_PARTIAL_CLONING_OPERATION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.HANDLER_CHECK_MODEL_STATUS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.AUTOMATION_RUN_AUTODRAWINGS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.UDA_QUERY_GET">
            <summary>
            Get property from TS
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.UDA_QUERY_SET">
            <summary>
            Set property to TS
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.UDA_QUERY_ALL_STRINGS">
            <summary>
            Get all string properties
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.UDA_QUERY_ALL_DOUBLES">
            <summary>
            Get all double properties
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.QueryTypeEnum.UDA_QUERY_ALL_INTEGERS">
            <summary>
            Get all integer properties
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.ReturnValuesEnum">
            Database operation return values. These must be identical to #define's in TS-code.
            int_gr_dotnet_types.hpp
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_OPERATION_OK">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_OPERATION_FAILED">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_ILLEGAL_QUERYTYPE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_NUMBERING_NOT_UPTODATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_DRAWING_EDITOR_MUST_BE_CLOSED">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_DRAWING_IS_ACTIVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_ILLEGAL_VIEW_TYPE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_INVALID_PICKER_INPUT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_DRAWING_NOT_UPTODATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_DRAWING_CANNOT_MODIFY">
            We currently (031008) don't support modifying
            a drawing that is not currently active.
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_DRAWING_CANNOT_DELETE_ACTIVE">
            Active drawing cannot be deleted.
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_DRAWING_CANNOT_INSERT">
            Drawing cannot be inserted when another drawing is active.
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_OPERATION_NOT_SUPPORTED">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.ReturnValuesEnum.DOT_GR_ERROR_INVALID_ATTRIBUTES_GIVEN">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.PropertyType">
            <summary>
            Type of property: int/double/string
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.PropertyType.TYPE_INT">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.PropertyType.TYPE_DOUBLE">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.PropertyType.TYPE_STRING">
            <summary>
            String
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotClientId_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotClientId_t.ProcessId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotClientId_t.ThreadId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotClientId_t.GetClientId">
            <summary>
            Get unique client id for application.
            Client id must be used with sequential queries, like
            object enumeration.
            </summary>
            <returns>Client id</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.DrawingIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.ViewIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.QueryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.ReturnValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.ClientData">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.ToStruct(Tekla.Structures.Drawing.DatabaseObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDatabaseObject_t.FromStruct(Tekla.Structures.Drawing.DatabaseObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrUserProperty_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.DatabaseObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.aName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.Type">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.IntValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.DoubleValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrUserProperty_t.aStringValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrElementList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElementList_t.iCurrentElement">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElementList_t.CurrentElement">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElementList_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrElement_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Label">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Type">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Name">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.GroupId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.FrameId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.FrameType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Font">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Value">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.MergeParam">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.PullOutParam">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.MinPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.MaxPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.ObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Hidden">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.IsUnitAvailable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrElement_t.Unit">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotLblMergeParam_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.aBlockPrefixSingle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.aBlockPrefixMulti">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.aBlockSeparator">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.aCCPrefix">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.aCCSeparator">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblMergeParam_t.CCShowAlways">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.ScaleType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.Scaling">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.ScalingX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.ScalingY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.RotationAxis">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.Exaggeration">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.EndMarks">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.Dimensions">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.BendingRadius">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.BendingAngle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.MarkId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.aRebarGUID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.CouplersEndAnchorSymbols">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotLblPullOutParam_t.CouplersScale">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSymbol_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.SymbolFile">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.SymbolIndex">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.Hideable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbol_t.SymbolAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSymbol_t.ToStruct(Tekla.Structures.Drawing.Symbol)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSymbol_t.FromStruct(Tekla.Structures.Drawing.Symbol)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.Height">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.PreferredPlacingType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.ToStruct(Tekla.Structures.Drawing.Symbol.SymbolAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t.FromStruct(Tekla.Structures.Drawing.Symbol.SymbolAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t">
            <summary>
            Arrowhead attributes for internal use.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.ArrowPosition">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.Head">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.Height">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.Width">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.ToStruct(Tekla.Structures.Drawing.ArrowheadAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArrowheadAttributes_t.FromStruct(Tekla.Structures.Drawing.ArrowheadAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Height">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Name">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Italic">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Bold">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.Underlined">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.ToStruct(Tekla.Structures.Drawing.FontAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFontAttributes_t.FromStruct(Tekla.Structures.Drawing.FontAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.BackgroundColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.FactorType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.ScaleX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.ScaleY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.Name">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.ToStruct(Tekla.Structures.Drawing.HatchAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrHatchAttributes_t.FromStruct(Tekla.Structures.Drawing.HatchAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlacingDirectionAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingDirectionAttributes_t.Direction">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingDirectionAttributes_t.ToStruct(Tekla.Structures.Drawing.PlacingDirectionAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingDirectionAttributes_t.FromStruct(Tekla.Structures.Drawing.PlacingDirectionAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t.SearchMargin">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t.MinimalDistance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t.MaximalDistance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t.ToStruct(Tekla.Structures.Drawing.PlacingDistanceAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPlacingDistanceAttributes_t.FromStruct(Tekla.Structures.Drawing.PlacingDistanceAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDate_t">
            <exclude/>
            Move this into better place when date is needed by other objects (=Never?)
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Year">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Month">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Day">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Hour">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Minute">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDate_t.Second">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDate_t.FromStruct(System.DateTime@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotOBB_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.center">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.axis0">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.axis1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.axis2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.extent0">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.extent1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotOBB_t.extent2">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotOBB_t.ToStruct(Tekla.Structures.Geometry3d.OBB)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotOBB_t.FromStruct(Tekla.Structures.Geometry3d.OBB)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.ModelObjectIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Sheet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.CreationDate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.ModificationDate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IssuingDate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.OutputDate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.DrawingType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Name">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Title1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Title2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Title3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.AttributeFile">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.Mark">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsMasterDrawing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsIssued">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsIssuedButModified">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsLocked">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsFrozen">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsReadyForIssue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.UpToDateStatus">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.QueryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.ReturnValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.InternalSheetNumber">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.LayoutAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.SectionViewStartLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsReadyForIssueBy">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.IsLockedBy">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.CommitMessage">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.ToStruct(Tekla.Structures.Drawing.Drawing)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t.FromStruct(Tekla.Structures.Drawing.Drawing)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.CommitMessage">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.CommitMessage.TsCommand">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t.Parameter1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t.Parameter2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t.QueryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t.ReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDrawingObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingObject_t.DatabaseObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDrawingObject_t.ObjectType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDrawingObject_t.ToStruct(Tekla.Structures.Drawing.DrawingObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDrawingObject_t.FromStruct(Tekla.Structures.Drawing.DrawingObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.Precision">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.Format">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.Unit">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.UseDigitGrouping">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionFormatAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t.Direction">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t.Distance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionPlacingAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t.Font">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t.TextPlacing">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionTextAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCombinedDimensionAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCombinedDimensionAttributes_t.MinimumNumberToCombine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCombinedDimensionAttributes_t.Format">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCombinedDimensionAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCombinedDimensionAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationEnabled">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationDirection">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationOrigin">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationPosition">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ExaggerationHeight">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionExaggerationAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.Arrowhead">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.TransparentBackground">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.Format">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.Text">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.ToStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDimensionSetBaseAttributes_t.FromStruct(Tekla.Structures.Drawing.DimensionSetBaseAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.DimensionBase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.DimSetAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.Distance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.UpDirection">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.Mark">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.PreferredStartPointRuleId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.PreferredEndPointRuleId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.PreferredZeroPointRuleId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.ToStruct(Tekla.Structures.Drawing.StraightDimension)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimension_t.FromStruct(Tekla.Structures.Drawing.StraightDimension)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrStraightDimensionAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionAttributes_t.Exaggeration">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionAttributes_t.ToStruct(Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionAttributes_t.FromStruct(Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.DimensionSetBase">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.Attributes">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.Distance">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.UpDirection">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.LeftTagLineOffset">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.RightTagLineOffset">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.ToStruct(Tekla.Structures.Drawing.StraightDimensionSet)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t.FromStruct(Tekla.Structures.Drawing.StraightDimensionSet)">
            <summary>DO NOT USE! For internal usage only!/// </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.DimensionSetBaseAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.CombinedDimension">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.DimensionType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.ExtensionLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.ShortDimension">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.UpdateGrouping">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagA">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagB">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagC">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagD">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagF">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.IncludePartCountInTagG">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.ExcludePartsAccordingToFilter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.Exaggeration">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.ToStruct(Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t.FromStruct(Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrArc_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArc_t.OpenGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArc_t.ArcAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArc_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArc_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArc_t.Radius">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArc_t.ToStruct(Tekla.Structures.Drawing.Arc)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArc_t.FromStruct(Tekla.Structures.Drawing.Arc)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrArcAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrArcAttributes_t.OpenGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArcAttributes_t.ToStruct(Tekla.Structures.Drawing.Arc.ArcAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrArcAttributes_t.FromStruct(Tekla.Structures.Drawing.Arc.ArcAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCircle_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCircle_t.ClosedGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCircle_t.CircleAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCircle_t.CenterPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCircle_t.Radius">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCircle_t.ToStruct(Tekla.Structures.Drawing.Circle)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCircle_t.FromStruct(Tekla.Structures.Drawing.Circle)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCircleAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCircleAttributes_t.ClosedGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCircleAttributes_t.ToStruct(Tekla.Structures.Drawing.Circle.CircleAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCircleAttributes_t.FromStruct(Tekla.Structures.Drawing.Circle.CircleAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObject_t.GraphicObject">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObject_t.ToStruct(Tekla.Structures.Drawing.ClosedGraphicObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObject_t.FromStruct(Tekla.Structures.Drawing.ClosedGraphicObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t.GraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t.HatchAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t.BehingModelObjects">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t.ToStruct(Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t.FromStruct(Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCloud_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloud_t.ClosedGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloud_t.CloudAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloud_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCloud_t.ToStruct(Tekla.Structures.Drawing.Cloud)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCloud_t.FromStruct(Tekla.Structures.Drawing.Cloud)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrCloudAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrCloudAttributes_t.ClosedGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCloudAttributes_t.ToStruct(Tekla.Structures.Drawing.Cloud.CloudAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrCloudAttributes_t.FromStruct(Tekla.Structures.Drawing.Cloud.CloudAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGraphicObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObject_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObject_t.Hideable">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObject_t.ToStruct(Tekla.Structures.Drawing.GraphicObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObject_t.FromStruct(Tekla.Structures.Drawing.GraphicObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.LineAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.CoordinateSystem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.ToStruct(Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGraphicObjectAttributes_t.FromStruct(Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLine_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLine_t.OpenGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLine_t.LineAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLine_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLine_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLine_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLine_t.ToStruct(Tekla.Structures.Drawing.Line)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLine_t.FromStruct(Tekla.Structures.Drawing.Line)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLineAttributesStruct_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLineAttributesStruct_t.OpenGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineAttributesStruct_t.ToStruct(Tekla.Structures.Drawing.Line.LineAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLineAttributesStruct_t.FromStruct(Tekla.Structures.Drawing.Line.LineAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObject_t.GraphicObject">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObject_t.ToStruct(Tekla.Structures.Drawing.OpenGraphicObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObject_t.FromStruct(Tekla.Structures.Drawing.OpenGraphicObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t.GraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t.Arrowhead">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t.ToStruct(Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t.FromStruct(Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPolygon_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolygon_t.ClosedGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolygon_t.PolygonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolygon_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolygon_t.ToStruct(Tekla.Structures.Drawing.Polygon)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolygon_t.FromStruct(Tekla.Structures.Drawing.Polygon)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPolygonAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolygonAttributes_t.ClosedGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolygonAttributes_t.ToStruct(Tekla.Structures.Drawing.Polygon.PolygonAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolygonAttributes_t.FromStruct(Tekla.Structures.Drawing.Polygon.PolygonAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPolyline_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolyline_t.OpenGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolyline_t.PolylineAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolyline_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolyline_t.ToStruct(Tekla.Structures.Drawing.Polyline)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolyline_t.FromStruct(Tekla.Structures.Drawing.Polyline)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPolylineAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPolylineAttributes_t.OpenGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolylineAttributes_t.ToStruct(Tekla.Structures.Drawing.Polyline.PolylineAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPolylineAttributes_t.FromStruct(Tekla.Structures.Drawing.Polyline.PolylineAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrRectangle_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangle_t.ClosedGraphicObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangle_t.RectangleAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangle_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangle_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangle_t.Angle">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRectangle_t.ToStruct(Tekla.Structures.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRectangle_t.FromStruct(Tekla.Structures.Drawing.Rectangle)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrRectangleAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangleAttributes_t.ClosedGraphicObjectAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRectangleAttributes_t.Bulge">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRectangleAttributes_t.ToStruct(Tekla.Structures.Drawing.Rectangle.RectangleAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRectangleAttributes_t.FromStruct(Tekla.Structures.Drawing.Rectangle.RectangleAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrMarkBase_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.TextHeight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.TextWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.MarkBaseAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.ChangeSymbol">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.Hideable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.IsAssociativeNote">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.ToStruct(Tekla.Structures.Drawing.MarkBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrMarkBase_t.FromStruct(Tekla.Structures.Drawing.MarkBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.RotationAngle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.TransparentBackground">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.TextAlignment">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.FontAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.ArrowHead">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.PreferredPlacingType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.PlacingAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.CustomPresentation">
             <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.ToStruct(Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t.FromStruct(Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrText_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.InsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.TextString">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.FrameHeight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.FrameWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.Placing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.Hideable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrText_t.TextDrawMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrText_t.ToStruct(Tekla.Structures.Drawing.Text)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrText_t.FromStruct(Tekla.Structures.Drawing.Text)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.FontAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.TextAlignment">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.UseWordWrapping">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.RulerWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.ArrowHead">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.PreferredPlacingType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.PlacingAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.TransparentBackground">
             <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.ToStruct(Tekla.Structures.Drawing.Text.TextAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrTextAttributes_t.FromStruct(Tekla.Structures.Drawing.Text.TextAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrFrame_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.Type">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.FrameHeight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.FrameWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.FrameAngle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.FrameInsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrFrame_t.LineType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.ToStruct(Tekla.Structures.Drawing.Frame)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.ToStruct(Tekla.Structures.Drawing.EmbeddedObjectFrame)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.ToStruct(Tekla.Structures.Drawing.LinkFrameAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.FromStruct(Tekla.Structures.Drawing.Frame)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.FromStruct(Tekla.Structures.Drawing.EmbeddedObjectFrame)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrFrame_t.FromStruct(Tekla.Structures.Drawing.LinkFrameAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrAttributes_t.AttributeFilename">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAttributes_t.ToStruct(Tekla.Structures.Drawing.AttributesBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrAttributes_t.FromStruct(Tekla.Structures.Drawing.AttributesBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.LayoutTable">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.#ctor">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrLayTable_t@,Tekla.Structures.DrawingInternal.dotGrString_t,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.SetTableKeyPlan">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.SetTableDwgDxf">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.Insert(Tekla.Structures.Geometry3d.Point)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.Modify">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.Delete">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.IsTableDwg">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.IsTableKeyplan">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.GetDrawingNames">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutTable.Select">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.Name">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.RefTableId">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.Scale">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.XOffset">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.YOffset">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.TableLayoutId">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.TableCorner">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.RefCorner">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.Id">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.FileName">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.OverlapVithViews">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.Angle">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.LayoutTable.TableType">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.Parameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.TableToOperate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.QueryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.BoolReturnValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.IntReturnValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.StringReturnValue">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t.DoubleReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLayTable_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.Id">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.Name">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.TableLayoutId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.RefTableId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.Scale">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.XOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.YOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.TableCorner">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.RefCorner">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.FileName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.OverlapVithViews">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.Angle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLayTable_t.TableType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLayTable_t.ToStruct(Tekla.Structures.DrawingInternal.LayoutTable)">
            <summary>
            Convert to struct
            </summary>
            <param name="Table"></param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLayTable_t.FromStruct(Tekla.Structures.DrawingInternal.LayoutTable)">
            <summary>
            Convert from struct
            </summary>
            <param name="Table"></param>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotMarkListingCommand_e">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotMarkListingCommand_e.GetPopupMenuName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotMarkListingCommand_e.GetAllMarksByModelObject">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.MarkListing">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkListing.GetMenuName(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.MarkListing.TryGetMarks(System.Int32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Retrieve the IDs of drawing marks and associative notes associated to a given model object in a set of drawing views.
            </summary>
            <param name="modelObjectId">ID of the model object under consideration</param>
            <param name="viewIds">list of the IDs of the views where to look for marks. Empty list means all views. (NB: view IDs, not worlds)</param>
            <param name="marksIds">contains the list of IDs of associated marks and notes</param>
            <returns>true in case of success, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t.ReturnString">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t.ReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPour_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPour_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPour_t.PourAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPour_t.ToStruct(Tekla.Structures.Drawing.PourObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPour_t.FromStruct(Tekla.Structures.Drawing.PourObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.HiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.FaceHatch">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.SectionFaceHatch">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.DrawHiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.DrawOwnHiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.DrawChamfers">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.ToStruct(Tekla.Structures.Drawing.PourObject.PourAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourAttributes_t.FromStruct(Tekla.Structures.Drawing.PourObject.PourAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPourBreak_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreak_t.ModelObject">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreak_t.PourBreakAttributes">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourBreak_t.ToStruct(Tekla.Structures.Drawing.PourBreak)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourBreak_t.FromStruct(Tekla.Structures.Drawing.PourBreak)">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.CommonAttributes">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.VisibleLines">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.HiddenLines">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.DrawHiddenLines">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.ToStruct(Tekla.Structures.Drawing.PourBreak.PourBreakAttributes)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t.FromStruct(Tekla.Structures.Drawing.PourBreak.PourBreakAttributes)">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t.LineType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t.ToStruct(Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t.FromStruct(Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrReferenceModel_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReferenceModel_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReferenceModel_t.Attributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReferenceModel_t.ToStruct(Tekla.Structures.Drawing.ReferenceModel)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReferenceModel_t.FromStruct(Tekla.Structures.Drawing.ReferenceModel)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t">
            <summary>
            The dotGrReinforcementSetGroupIdentifiers_t
            </summary>
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t.DrawingObjectIdentifier">
            <summary>
            The drawing object identifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t.DrawingIdentifier">
            <summary>
            The drawing identifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t.NumberOfIdentifiers">
            <summary>
            The number of identifiers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.LayoutManager">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrLayTable_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrLayTable_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.DoesLayoutExist(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.DoesTableLayoutExist(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.DoCommit">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ClearUndoLog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.RefreshUI">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.SetNameVisibility(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.SetHiddenTableVisibility(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.HiddenTableVisibility">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.TableNameVisibility">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.OpenEditor">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.CloseEditor">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ResetDrawingSize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.SetDrawingFrames(System.Collections.Generic.IEnumerable{System.Tuple{System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Int32}})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ShowSaveDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.GetDrawingFrames">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.SetDrawingFoldmark(System.Tuple{System.Boolean,System.Double,System.Double,System.Int32})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.GetDrawingFoldmark">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.GetDrawingSizes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.GetDrawingSize">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ModifyDrawingSize(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String,Tekla.Structures.Drawing.Size,System.Boolean}})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.SetDrawingSizes(System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String,Tekla.Structures.Drawing.Size,System.Boolean}},System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ZoomToLayout">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ResetLayout(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String,Tekla.Structures.Drawing.Size,System.Boolean}})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.GetAvailableLayouts">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.CreateLayout(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.String,Tekla.Structures.Drawing.Size,System.Boolean}})">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.IsLayoutEditorOpenedFromModelMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.LayoutManager.ShouldOpenActiveLayout">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.TableLayout">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrString_t,Tekla.Structures.DrawingInternal.dotGrLayTable_t,Tekla.Structures.DrawingInternal.dotGrString_t,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.AreEqualInSizes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.IsValid">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.UnselectTables">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.SelectTable(Tekla.Structures.DrawingInternal.LayoutTable)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.SaveAs(System.String,System.Collections.Generic.List{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.GetCurrentTables">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.GetSelectedTables">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.GetAllTemplates">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.GetMarginsAndSpaces(System.Double@,System.Double@,System.Double@,System.Double@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.ModifyMarginsAndSpaces(System.Double,System.Double,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TableLayout.Save(System.Collections.Generic.List{System.Int32})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSize_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSize_t.Width">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSize_t.Height">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSize_t.ToStruct(Tekla.Structures.Drawing.Size)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSize_t.FromStruct(Tekla.Structures.Drawing.Size)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Cloner.CloneDrawingObject(Tekla.Structures.Drawing.DrawingObject,Tekla.Structures.Drawing.DrawingObject@)">
            <summary>
            Copies the contents of one DrawingObject to the other
            The other DrawingObject will be re-created using it's empty constructor
            This means that the DrawingObject has to initialize all it's propertys using new-keyword
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.ComparePointLists(Tekla.Structures.Drawing.PointList,Tekla.Structures.Drawing.PointList)">
            <summary>
            Compares two lists of type PointList
            </summary>
            <param name="ReferenceList"></param>
            <param name="CompareList"></param>
            <returns>false if count of list items differs or contents of lists</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.CompareIntLists(Tekla.Structures.Drawing.IntList,Tekla.Structures.Drawing.IntList)">
            <summary>
            Compares two lists of type IntList
            </summary>
            <param name="referenceList"></param>
            <param name="compareList"></param>
            <returns>false if count of list items differs or contents of lists</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.CompareStringLists(Tekla.Structures.Drawing.StringList,Tekla.Structures.Drawing.StringList)">
            <summary>
            Compares two lists of type StringList
            </summary>
            <param name="referenceList"></param>
            <param name="compareList"></param>
            <returns>false if count of list items differs or contents of lists</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.CompareListElements(Tekla.Structures.Drawing.ContainerElement,Tekla.Structures.Drawing.ContainerElement)">
            <summary>
            Compares two lists of type ContainerElement
            </summary>
            <param name="ReferenceContainer"></param>
            <param name="CompareContainer"></param>
            <returns>false if count of list items differs or contents of lists</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.AreEqual(System.Double,System.Double)">
            <summary>
            Compares two doubles using Tekla.Structures.Geometry3d.Vector.EPSILON_SQUARED as epsilon
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if the doubles are equal</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles using custom epsilon
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="Epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Tools.Comparer.CompareDrawingObject(Tekla.Structures.Drawing.DrawingObject,Tekla.Structures.Drawing.DrawingObject,Tekla.Structures.Drawing.StringList@)">
            <summary>
            Compares the two given DrawingObjects to each other
            If they contain equal values the result value is true
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t.ChamferAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t.ToStruct(Tekla.Structures.Drawing.EdgeChamfer)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t.FromStruct(Tekla.Structures.Drawing.EdgeChamfer)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t.ToStruct(Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t.FromStruct(Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGrid_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGrid_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGrid_t.GridAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGrid_t.ToStruct(Tekla.Structures.Drawing.Grid)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGrid_t.FromStruct(Tekla.Structures.Drawing.Grid)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.FontAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.TextPosition">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.LineAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.OffsetAtStartOfLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.OffsetAtEndOfLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.AttributeFilename">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.ToStruct(Tekla.Structures.Drawing.Grid.GridAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridAttributes_t.FromStruct(Tekla.Structures.Drawing.Grid.GridAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGridLine_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLine_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLine_t.StartLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLine_t.EndLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLine_t.GridLineAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLine_t.ToStruct(Tekla.Structures.Drawing.GridLine)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLine_t.FromStruct(Tekla.Structures.Drawing.GridLine)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGridLabel_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.FrameWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.FrameHeight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.TextWidth">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.TextHeight">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.CenterPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.GridPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.OffsetGridPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.GridLabelPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.GridLabelText">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.ToStruct(Tekla.Structures.Drawing.GridLine.GridLabel)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLabel_t.FromStruct(Tekla.Structures.Drawing.GridLine.GridLabel)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.FontAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.TextPosition">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.LineAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.Frame">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.OffsetAtStartOfLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.OffsetAtEndOfLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.CustomPresentation">
             <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.ToStruct(Tekla.Structures.Drawing.GridLine.GridLineAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t.FromStruct(Tekla.Structures.Drawing.GridLine.GridLineAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrBolt_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBolt_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBolt_t.BoltAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrBolt_t.ToStruct(Tekla.Structures.Drawing.Bolt)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrBolt_t.FromStruct(Tekla.Structures.Drawing.Bolt)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.Symbol">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.SymbolContents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.ToStruct(Tekla.Structures.Drawing.Bolt.BoltAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t.FromStruct(Tekla.Structures.Drawing.Bolt.BoltAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrConnection_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrConnection_t.ModelObject">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrConnection_t.ToStruct(Tekla.Structures.Drawing.Connection)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrConnection_t.FromStruct(Tekla.Structures.Drawing.Connection)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.ReinforcementBaseAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.RebarCustomPosition">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.RebarCustomPositionLongitudinal">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.RebarCustomPositionCrossing">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.ToStruct(Tekla.Structures.Drawing.ReinforcementBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t.FromStruct(Tekla.Structures.Drawing.ReinforcementBase)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.ReinforcementRepresentation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.ReinforcementVisibility">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.MeshReinforcementVisibilityLongitudinal">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.MeshReinforcementVisibilityCrossing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.HiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.HideLinesHiddenByPart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.HideLinesHiddenByReinforcement">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.StraightEndSymbolType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.HookedEndSymbolType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.MeshReinforcementSymbolIndex">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.MeshReinforcementSymbolSize">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.ToStruct(Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t.FromStruct(Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSurfacing_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacing_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacing_t.SurfacingAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSurfacing_t.ToStruct(Tekla.Structures.Drawing.Surfacing)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSurfacing_t.FromStruct(Tekla.Structures.Drawing.Surfacing)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.Representation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.Flags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.HiddenLines">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.ToStruct(Tekla.Structures.Drawing.Surfacing.SurfacingAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t.FromStruct(Tekla.Structures.Drawing.Surfacing.SurfacingAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrWeld_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeld_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeld_t.WeldAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeld_t.ToStruct(Tekla.Structures.Drawing.Weld)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeld_t.FromStruct(Tekla.Structures.Drawing.Weld)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.Representation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.Flags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.HiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.ToStruct(Tekla.Structures.Drawing.Weld.WeldAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t.FromStruct(Tekla.Structures.Drawing.Weld.WeldAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrIntList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrIntList_t.iCurrentInt">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrIntList_t.nInts">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrIntList_t.nIntsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrIntList_t.aIntList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrIntList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrIntList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrIntList_t.ToStruct(System.Collections.Generic.List{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrIntList_t.FromStruct(System.Collections.Generic.List{System.Int32}@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.StartPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.EndPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.ArrowHead">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.LeaderLineType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.ToStruct(Tekla.Structures.Drawing.LeaderLine)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrLeaderLine_t.FromStruct(Tekla.Structures.Drawing.LeaderLine)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDoubleList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.iCurrentDouble">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.nDoubles">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.nDoublesInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.aDoubleList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.ToStruct(System.Collections.Generic.List{System.Double})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDoubleList_t.FromStruct(System.Collections.Generic.List{System.Double}@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.MemberType">
            <summary>
            MemberType Type of the object
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrModelObject_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObject_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObject_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObject_t.Hideable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrModelObject_t.MemberType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrModelObject_t.ToStruct(Tekla.Structures.Drawing.ModelObject)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrModelObject_t.FromStruct(Tekla.Structures.Drawing.ModelObject)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPart_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPart_t.ModelObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPart_t.PartAttributes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPart_t.ToStruct(Tekla.Structures.Drawing.Part)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPart_t.FromStruct(Tekla.Structures.Drawing.Part)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.Representation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.PartialProfileLength">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.PartialProfileOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.SymbolOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.Flags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.VisibleLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.HiddenLines">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.ReferenceLine">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.FaceHatch">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.SectionFaceHatch">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.CustomPresentation">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.ToStruct(Tekla.Structures.Drawing.Part.PartAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPartAttributes_t.FromStruct(Tekla.Structures.Drawing.Part.PartAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPointList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPointList_t.iCurrentPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPointList_t.nPoints">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPointList_t.nPointsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPointList_t.aPointList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPointList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPointList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPointList_t.ToStruct(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPointList_t.FromStruct(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrStringList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStringList_t.iCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStringList_t.nItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStringList_t.nItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStringList_t.aStringList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrStringList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStringList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStringList_t.ToStruct(System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrStringList_t.FromStruct(System.Collections.Generic.List{System.String}@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t.SelectorType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t.SuppressCallbacks">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.SyncHandler">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.#ctor(Tekla.Structures.Drawing.UI.Picker.PickerTypes)">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.PickType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.PickCount">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.PickCommandStarted">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.PickViewId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.Interrupted">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t.SyncCallback">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPickerCommand_t">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPickerCommand_t.ToStruct">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPickerCommand_t.GetIsInteractivePicker">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPickerCommand_t.IsInteractivePicker">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPickerCommand_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dak_eventtype_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_NONE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DOWN1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DOWN2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DRAG1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DRAG2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_UP1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_UP2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_CLICK1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_CLICK2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_TABLECLICK">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_EXPOSE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_CANCEL">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_SELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_EXTEND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_TOGGLE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_QUERYMOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MULTISELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_QUERYRESIZE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MULTIEXTEND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_QUERYROTATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MULTITOGGLE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_ACTIVATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTPOLYSELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_POLYSELECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTPOLYEXTEND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_POLYEXTEND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTPOLYTOGGLE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_POLYTOGGLE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTMOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_INMOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTRESIZE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_INRESIZE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_RESIZE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_STARTROTATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_INROTATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_ROTATE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_POLYEND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_HIDE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_SHOW">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_BUTTONPRESS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DOUBLECLICK">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_BUTTONRELEASE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MOUSEMOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_ENTER">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_LEAVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_KEYPRESS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_POPUPMENU">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_TIMER">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_MOUSEWHEEL">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DIGIT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DIALOGPOPUPMENU">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_QUERYDRAGNDROP">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_INDRAGNDROP">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_eventtype_t.DAK_EVENT_DRAGNDROP">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dak_modifier_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_modifier_t.DAK_MODIFIER_NONE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_modifier_t.DAK_MODIFIER_SHIFT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_modifier_t.DAK_MODIFIER_CONTROL">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dak_dndeffect_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_dndeffect_t.DAK_DNDEFFECT_NONE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_dndeffect_t.DAK_DNDEFFECT_COPY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_dndeffect_t.DAK_DNDEFFECT_MOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_dndeffect_t.DAK_DNDEFFECT_COPYORMOVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dak_dndeffect_t.DAK_DNDEFFECT_MOVEINFIELD">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.#ctor(System.Double[])">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.iCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.nItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.nItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.aDoubleList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakDoubleList_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrDakEvent_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.Action">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.Workarea">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.World">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.WorkareaId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.WorldId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.nPoints">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.Button">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.Modifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.aX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrDakEvent_t.aY">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DocumentManagerController">
            <summary>
            User interface drawings.
            </summary>
        </member>
        <member name="E:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChanged">
            <summary>Drawing changed event.</summary>
        </member>
        <member name="E:Tekla.Structures.DrawingInternal.DocumentManagerController.ShowWindowRequested">
            <summary>Show window requested event.</summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.GetSelectedDrawingGuidsFunc">
            <summary>Get selected drawing guids delegate.</summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.GetVisibleDrawingIdsFunc">
            <summary>Get visible drawing ids delegate.</summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.SetSelectedDrawingFunc">
            <summary>Gets or sets the set selected drawing function.</summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.ShowWindow">
            <summary>
            The show window function.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.GetSelectedDrawingGuids">
            <summary>
            The selected drawing guids function.
            </summary>
            <returns>The selected drawing guids.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.SetSelectedDrawing(System.Int32)">
            <summary>
            Set selected drawing.
            </summary>
            <param name="drawingId">The drawing id.</param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.GetVisibleDrawingIds">
            <summary>
            The visible drawing ids function.
            </summary>
            <returns>The visible drawing ids.</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.UpdateDocumentManager(System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>Update document manager.</summary>
            <param name="newDrawingIsNotNull">Whether the new drawing is not null.</param>
            <param name="newId">The new id.</param>
            <param name="newType">The new type.</param>
            <param name="oldDrawingIsNotNull">Whether the old drawing is not null.</param>
            <param name="oldId">The old id.</param>
            <param name="oldType">The old type.</param>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs">
            <summary>Drawing changed event args.</summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs.#ctor(System.Func{Tekla.Structures.Drawing.Drawing},System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs"/> class.</summary>
            <param name="getNewDrawing">Function to get the new drawing.</param>
            <param name="oldDrawingIsNotNull">The old drawing is not null.</param>
            <param name="oldDrawingId">The old drawing id.</param>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs.GetNewDrawing">
            <summary>Gets the fuction to get the new drawing.</summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs.OldDrawingIsNotNull">
            <summary>Gets a value indicating whether the old drawing is not null.</summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DocumentManagerController.DrawingChangedEventArgs.OldDrawingId">
            <summary>Gets the old drawing ID.</summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.ReferencePoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.GeometryPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.EndPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.CenterPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.MidPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Intersections">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Perpendicular">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Near">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Extension">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Lines">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Free">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Points">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSnapSettings_t.Grid">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.TypeMapper.MapTypesToIntList(System.Type[])">
            <summary>
            Convert list of drawing object types to list of values defined
            in enum DrawingObject.ObjectTypes
            </summary>
            <param name="types">List of types</param>
            <see cref="T:Tekla.Structures.Drawing.DrawingObject.ObjectTypes"/>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrSheet_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSheet_t.Width">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrSheet_t.Height">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrView_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.DrawingObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.MinPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.MaxPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.OriginInSheet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.ExtremaCenterPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.FrameOrigin">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.Width">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.Height">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.ViewCoordinateSystem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.DisplayCoordinateSystem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.ViewName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.LinkedDrawingId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrView_t.ViewType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrView_t.ToStruct(Tekla.Structures.Drawing.View)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrView_t.ToStruct(Tekla.Structures.Drawing.ContainerView)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrView_t.FromStruct(Tekla.Structures.Drawing.View)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrView_t.FromStruct(Tekla.Structures.Drawing.ContainerView)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.CommonAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.Scale">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.PartialProfileLength">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.PartialProfileOffset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ReflectedView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.UnfoldedView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.UndeformedView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ViewExtensionForNeighbourParts">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.FixedViewPlacing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ShorteningAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ShowPartOpeningsOrRecessSymbol">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ViewPlaneDatumPointForElevations">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.LocationBy">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.DatumLevel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.MarkSymbolAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.MarkSymbolColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.LabelPositionHorizontal">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.LabelPositionVertical">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.TagsAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.PourView">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.ToStruct(Tekla.Structures.Drawing.View.ViewAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewAttributes_t.FromStruct(Tekla.Structures.Drawing.View.ViewAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.CutParts">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.CutSkewParts">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.MinimumLength">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.Offset">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.CutPartType">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.ToStruct(Tekla.Structures.Drawing.View.ViewShorteningAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewShorteningAttributes_t.FromStruct(Tekla.Structures.Drawing.View.ViewShorteningAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t.BasicAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t.LineLengthType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t.LineLength">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t.ToStruct(Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkSymbolAttributes_t.FromStruct(Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewMarkTagAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagAttributes_t.BasicAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagAttributes_t.TagAlignment">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkTagAttributes_t.ToStruct(Tekla.Structures.Drawing.View.ViewMarkTagAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkTagAttributes_t.FromStruct(Tekla.Structures.Drawing.View.ViewMarkTagAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.TagA1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.TagA2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.TagA3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.TagA4">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.TagA5">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.ToStruct(Tekla.Structures.Drawing.View.ViewMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrViewMarkTagsAttributes_t.FromStruct(Tekla.Structures.Drawing.View.ViewMarkTagsAttributes)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewRotation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.ViewObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotateX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotationX">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotateY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotationY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotateZ">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotationZ">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotateOnDrawingPlane">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewRotation_t.RotationOnDrawingPlane">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrViewCommand_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ParentView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ViewCommandType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.CreatedViewId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.CreatedViewMarkId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.Point1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.Point2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.Point3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ViewInsertionPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.RestrictionBoxMinPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.RestrictionBoxMaxPoint">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ViewPlane">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.DisplayPlane">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ViewAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.SectionMarkAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.DetailMarkAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrViewCommand_t.ViewRotation">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.DimensionBase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.Attributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.ArcPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.ArcPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.ArcPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.Distance">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.ToStruct(Tekla.Structures.Drawing.RadiusDimension)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t.FromStruct(Tekla.Structures.Drawing.RadiusDimension)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPath_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPath_t.DOT_MAX_PATH_LEN">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPath_t.Value">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPath_t.ToStruct(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrPath_t.FromStruct(System.String@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrString_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrString_t.DOT_MAX_STRING_LEN">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrString_t.Value">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrString_t.ToStruct(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.dotGrString_t.FromStruct(System.String@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t.DrawingId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t.PrintAttributes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t.ReturnValue">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.Synchronize">
            <summary>
            Synchronization class for .NET picking and synced commands where we
            start a command and wait for it to complete.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Synchronize.Sync">
            <summary>
            Releases the sync handle. Called from TeklaStructures.exe
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Synchronize.WaitForSynchronization">
            <summary>
            Waits until sync handle is released.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Synchronize.Reset">
            <summary>
            Reset the sync handle
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Synchronize.GetSyncCallback">
            <summary>
            Get sync callback to Sync()
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.CDelegateSynchronized">
            <summary>
            CDelegateSynchronized includes all the platform invokable commands and synchronization to AKIT.
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.CDelegateSynchronized.InvokeRequired">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.#ctor">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.BeginInvoke(System.Delegate,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.EndInvoke(System.IAsyncResult)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.Invoke(System.Delegate,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLineHandler(Tekla.Structures.DrawingInternal.dotGrLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportArcHandler(Tekla.Structures.DrawingInternal.dotGrArc_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPolylineHandler(Tekla.Structures.DrawingInternal.dotGrPolyline_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPolygonHandler(Tekla.Structures.DrawingInternal.dotGrPolygon_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCloudHandler(Tekla.Structures.DrawingInternal.dotGrCloud_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportRectangleHandler(Tekla.Structures.DrawingInternal.dotGrRectangle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCircleHandler(Tekla.Structures.DrawingInternal.dotGrCircle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportOpenGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportClosedGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ImportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ImportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ImportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ImportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ImportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGridHandler(Tekla.Structures.DrawingInternal.dotGrGrid_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGridAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGridLineHandler(Tekla.Structures.DrawingInternal.dotGrGridLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGridLineAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportViewHandler(Tekla.Structures.DrawingInternal.dotGrView_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEnumerateObjects(Tekla.Structures.DrawingInternal.dotEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetSnapshotFromDatabase(Tekla.Structures.DrawingInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPartHandler(Tekla.Structures.DrawingInternal.dotGrPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPartAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPartAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportBoltHandler(Tekla.Structures.DrawingInternal.dotGrBolt_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportBoltAttributesHandler(Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEdgeChamferHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEdgeChamferAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPourHandler(Tekla.Structures.DrawingInternal.dotGrPour_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPourAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPourBreakHandler(Tekla.Structures.DrawingInternal.dotGrPourBreak_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPourBreakAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportConnectionHandler(Tekla.Structures.DrawingInternal.dotGrConnection_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportReinforcementHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportReinforcementSetGroupGetModelIdentifiers(Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t@,System.Collections.Generic.List{System.Int32}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSurfacingHandler(Tekla.Structures.DrawingInternal.dotGrSurfacing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSurfacingAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportWeldHandler(Tekla.Structures.DrawingInternal.dotGrWeld_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportWeldAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportWeldMarkHandler(Tekla.Structures.DrawingInternal.dotGrWeldMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportWeldMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportTextHandler(Tekla.Structures.DrawingInternal.dotGrText_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportTextAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.PerformActionUsingPluginFormFullName(System.String,System.String,System.Func{System.String,System.String,System.Boolean})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPluginHandler(Tekla.Structures.DrawingInternal.dotGrPlugin_t@,System.String@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEmbeddedObjectHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEmbeddedObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportReferenceModelHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportReferenceModelAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportTextFileHandler(Tekla.Structures.DrawingInternal.dotGrTextFile_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportTextFileAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLinkHandler(Tekla.Structures.DrawingInternal.dotGrLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLinkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDrawingHandler(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDrawingHandlerHandler(Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLayoutHandler(Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportMarkLearningHandler(Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportMarkListingHandler(Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAssociativityHandler(Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCloningHandler(Tekla.Structures.DrawingInternal.dotGrCloningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPrintDrawingHandler(Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportModelDatabaseUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportStraightDimensionHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportStraightDimensionSetHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportStraightDimensionSetExcludePartsAccordingToFilter(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportStraightDimensionSetAttributesHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDimensionLinkHandler(Tekla.Structures.DrawingInternal.dotGrDimensionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAngleDimensionHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAngleDimensionAttributesHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportRadiusDimensionHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportRadiusDimensionAttributesHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionSetRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionSetRadialAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionSetOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCurvedDimensionSetOrthogonalAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportMarkHandler(Tekla.Structures.DrawingInternal.dotGrMarkBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetDotType(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t@,System.IAsyncResult)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPickerHandler(Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDrawingObjectSelectorHandler(Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportViewAttributesHandler(Tekla.Structures.DrawingInternal.dotGrViewAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSymbolHandler(Tekla.Structures.DrawingInternal.dotGrSymbol_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSymbolAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLevelMarkHandler(Tekla.Structures.DrawingInternal.dotGrLevelMark_t@)">
            <summary>
            Function to handle .Net side requests about level marks
            </summary>
            <param name="pLevelMark">.Net Level Mark</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLevelMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t@)">
            <summary>
            Function to handle .Net side requests about level mark attributes
            </summary>
            <param name="pLevelMarkAttributes">.Net Level Mark Attributes</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAutomationHandler(Tekla.Structures.DrawingInternal.dotGrAutomation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportLeaderLineHandler(Tekla.Structures.DrawingInternal.dotGrLeaderLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportReinforcementBaseAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAssociativityRuleHandler(Tekla.Structures.DrawingInternal.dotGrAssociativity_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDetailMarkHandler(Tekla.Structures.DrawingInternal.dotGrDetailMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDetailMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSectionMarkHandler(Tekla.Structures.DrawingInternal.dotGrSectionMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSectionMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportViewCommandHandler(Tekla.Structures.DrawingInternal.dotGrViewCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPluginQueueHandler(Tekla.Structures.DrawingInternal.dotGrPluginQueue_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportPickerCommandHandler(Tekla.Structures.DrawingInternal.dotGrPickerCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportEnumerateCustomLineTypes(Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetChangedDrawingForUpdatedEvent(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSetDrawingPlotDateById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportUpdateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportUpdateSelectedDrawingMarks">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportRecreateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDeleteSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportAddToMasterDrawingCatalog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportCopySelectedDrawingsToNewSheet">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportHighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportUnhighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportHighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportUnhighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportShowAssociativityPinPushed(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportShowAssociativityPinUnpushed(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportTryOpenDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetEditMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetDrawingExportFileName(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetDrawingExportFileNameExt(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSelectPartsByDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetDrawingsBySelectedParts(Tekla.Structures.DrawingInternal.dotClientId_t)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSetColorRgb(System.Int32,System.Byte,System.Byte,System.Byte)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSetPenWidth(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportRefreshColorMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDisplayRevisionDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDisplayDrawingPropertiesDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDisplayDrawingUdaDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDisplayDrawingCloningDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportDisplaySnapshotsDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSignalDrawingSelectionChanged">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportSetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.ExportGetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLineHandler(Tekla.Structures.DrawingInternal.dotGrLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportArcHandler(Tekla.Structures.DrawingInternal.dotGrArc_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPolylineHandler(Tekla.Structures.DrawingInternal.dotGrPolyline_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPolygonHandler(Tekla.Structures.DrawingInternal.dotGrPolygon_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCloudHandler(Tekla.Structures.DrawingInternal.dotGrCloud_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportRectangleHandler(Tekla.Structures.DrawingInternal.dotGrRectangle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCircleHandler(Tekla.Structures.DrawingInternal.dotGrCircle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportOpenGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportClosedGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGridHandler(Tekla.Structures.DrawingInternal.dotGrGrid_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGridAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGridLineHandler(Tekla.Structures.DrawingInternal.dotGrGridLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGridLineAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrImportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrImportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrImportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrImportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrImportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportViewHandler(Tekla.Structures.DrawingInternal.dotGrView_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEnumeratorHandler(Tekla.Structures.DrawingInternal.dotEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPartHandler(Tekla.Structures.DrawingInternal.dotGrPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPartAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPartAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportBoltHandler(Tekla.Structures.DrawingInternal.dotGrBolt_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportBoltAttributesHandler(Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEdgeChamferHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEdgeChamferAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPourHandler(Tekla.Structures.DrawingInternal.dotGrPour_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPourAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPourBreakHandler(Tekla.Structures.DrawingInternal.dotGrPourBreak_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPourBreakAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportConnectionHandler(Tekla.Structures.DrawingInternal.dotGrConnection_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSurfacingHandler(Tekla.Structures.DrawingInternal.dotGrSurfacing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSurfacingAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportWeldHandler(Tekla.Structures.DrawingInternal.dotGrWeld_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportWeldAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportWeldMarkHandler(Tekla.Structures.DrawingInternal.dotGrWeldMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportWeldMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportTextHandler(Tekla.Structures.DrawingInternal.dotGrText_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportTextAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPluginHandler(Tekla.Structures.DrawingInternal.dotGrPlugin_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEmbeddedObjectHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEmbeddedObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportReferenceModelHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportReferenceModelAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportTextFileHandler(Tekla.Structures.DrawingInternal.dotGrTextFile_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportTextFileAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLinkHandler(Tekla.Structures.DrawingInternal.dotGrLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLinkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDrawingHandler(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDrawingHandlerHandler(Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLayoutHandler(Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportMarkLearningHandler(Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportMarkListingHandler(Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAssociativityHandler(Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCloningHandler(Tekla.Structures.DrawingInternal.dotGrCloningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPrintDrawing(Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportModelDatabaseUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportStraightDimensionHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportStraightDimensionSetHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportStraightDimensionSetExcludePartsAccordingToFilter(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDimensionLinkHandler(Tekla.Structures.DrawingInternal.dotGrDimensionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportStraightDimensionSetAttributesHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAngleDimensionHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAngleDimensionAttributeHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportRadiusDimensionHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportRadiusDimensionAttributeHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionSetRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionSetRadialAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionSetOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCurvedDimensionSetOrthogonalAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportMarkHandler(Tekla.Structures.DrawingInternal.dotGrMarkBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPickerHandler(Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDrawingObjectSelectorHandler(Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportViewAttributesHandler(Tekla.Structures.DrawingInternal.dotGrViewAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSymbolHandler(Tekla.Structures.DrawingInternal.dotGrSymbol_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSymbolAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLevelMarkHandler(Tekla.Structures.DrawingInternal.dotGrLevelMark_t@)">
            <summary>
            Function to handle .Net side requests about level marks
            </summary>
            <param name="pLevelMark">.Net Level Mark</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLevelMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t@)">
            <summary>
            Function to handle .Net side requests about level mark attributes
            </summary>
            <param name="pLevelMarkAttributes">.Net Level Mark Attributes</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAutomationHandler(Tekla.Structures.DrawingInternal.dotGrAutomation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportLeaderLineHandler(Tekla.Structures.DrawingInternal.dotGrLeaderLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetDotType(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportReinforcementHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportReinforcementSetGroupGetModelIdentifiers(Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t@,System.Int32*@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportReinforcementBaseAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAssociativityRuleHandler(Tekla.Structures.DrawingInternal.dotGrAssociativity_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDetailMarkHandler(Tekla.Structures.DrawingInternal.dotGrDetailMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDetailMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSectionMarkHandler(Tekla.Structures.DrawingInternal.dotGrSectionMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSectionMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportViewCommandHandler(Tekla.Structures.DrawingInternal.dotGrViewCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPluginQueueHandler(Tekla.Structures.DrawingInternal.dotGrPluginQueue_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportPickerCommandHandler(Tekla.Structures.DrawingInternal.dotGrPickerCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportEnumerateCustomLineTypes(Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetChangedDrawingForUpdatedEvent(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSetDrawingPlotDateById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportDisplayRevisionDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportDisplayDrawingPropertiesDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportDisplayDrawingUdaDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportUpdateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportUpdateSelectedDrawingMarks">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportRecreateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportDeleteSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportDisplayDrawingCloningDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportDisplaySnapshotsDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportAddToMasterDrawingCatalog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportCopySelectedDrawingsToNewSheet">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrHighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrUnhighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrHighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrUnhighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrShowAssociativityPinPushed(System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrShowAssociativityPinUnpushed(System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotExportSignalDrawingSelectionChanged">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportTryOpenDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetEditMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetDrawingExportFileName(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetDrawingExportFileNameExt(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSelectPartsByDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportGetDrawingsBySelectedParts(Tekla.Structures.DrawingInternal.dotClientId_t)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSetColorRgb(System.Int32,System.Byte,System.Byte,System.Byte)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportSetPenWidth(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSynchronized.dotGrExportRefreshColorMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateWrapper.ExportGetSnapshotFromDatabase(Tekla.Structures.DrawingInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Enumerator"></param>
            <param name="SerializedObjects"></param>
            <param name="SelectInstances"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateWrapper.ExportLevelMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t@)">
            <summary>
            Wraps Level Mark Attributes Handler
            </summary>
            <param name="pLevelMarkAttributes">.Net Level Mark Attributes</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateWrapper.ExportLevelMarkHandler(Tekla.Structures.DrawingInternal.dotGrLevelMark_t@)">
            <summary>
            Wraps Level Mark Handler
            </summary>
            <param name="pLevelMark">.Net Level Mark</param>
            <returns>Result of request</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.AreWeUnitTesting">
            <summary>
            This is to enable unit-testing specific features like faking TS connection.
            This class hold a flag that is set to true when user wants to prevent 
            DelegateProxy's static constructor from running and creating IPC connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.AreWeUnitTesting.Value">
            <summary>
            Gets or sets a value indicating whether we are running in unit testing
            environment where ICDelegate is replaced with a fake.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.CDelegate.Singletons">
            <summary>
            Storage class for singleton instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegate.Singletons.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit. Do not remove.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DelegateFake">
            <summary>
            Implements ICDelegate so that every method throws NotImplementedException.
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.DrawingInternal.CDelegateSetter" />.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DelegateFake.ExportLevelMarkHandler(Tekla.Structures.DrawingInternal.dotGrLevelMark_t@)">
            <summary>
            Fake Level Mark Attributes Hander
            </summary>
            <param name="pLevelMark">.Net Level Mark</param>
            <returns>No Return</returns>
            <exception cref="T:System.NotImplementedException">Not Implemented</exception>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DelegateFake.ExportLevelMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t@)">
            <summary>
            Fake Level Mark Attributes Hander
            </summary>
            <param name="pLevelMarkAttributes">.Net Level Mark Atributes</param>
            <returns>No Return</returns>
            <exception cref="T:System.NotImplementedException">Not Implemented</exception>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DelegateProxy">
            <summary>
            CDelegate remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DelegateProxy._instance">
            <summary>
            The remote delegate object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DelegateProxy._formWrapperInstance">
            <summary>Form wrapper instance</summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.DelegateProxy.ErrorMessage">
            <summary>Error message for missing Tekla Structures process</summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DelegateProxy.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Tekla.Structures.DrawingInternal.DelegateProxy"/> class.
            </summary>
            <exception cref="T:System.Runtime.Remoting.RemotingException">Thrown if Tekla Structures is not running</exception>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.DelegateProxy.Delegate">
            <summary>
            Gets the singleton CDelegate instance that includes model API methods.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.CDelegateSetter">
            <summary>
            This class is purely available for the reason to enable faking of
            ICDelegate interface for the sake of testing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.CDelegateSetter.SetInstanceForUnitTesting(Tekla.Structures.DrawingInternal.ICDelegate)">
            <summary>
            Set the current ICDelegate instance to your fake/mock class.
            The instance must be restored to null when test method ends.
            </summary>
            <param name="cdelegate">The delegate implementation</param>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.ScopedCDelegateSetter">
            <summary>
            Can be used for scoped settings of ICDelegate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ScopedCDelegateSetter.#ctor(Tekla.Structures.DrawingInternal.ICDelegate)">
            <summary>
            Construct scoped setter and set the DelegateProxy.Delegate to what is provided for constructor.
            </summary>
            <param name="deleg"></param>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ScopedCDelegateSetter.Dispose">
            <summary>
            Restores the DelegateProxy.Delegate to what it was before this class was constructed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.DotNetDrawingProxy">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.DotNetDrawingProxy.Run(System.String)">
            <exclude/>
            <param name="Param">Not Used.</param>
            <returns>The return value is not usefull because AKIT doesn't send it to Core.</returns>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.EventHandler">
            <summary>
            EventHandler is a class that TS calls when an event is raised. Handler
            then calls all the listener "Events" objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.AddListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.AddListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.RemoveListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.RemoveListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.OnEvent(System.String)">
            <summary>
            TS calls when event is raised.
            </summary>
            <param name="Param">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.TimerSelectionChangedTick(System.Object,System.EventArgs)">
            <summary>
            Gets invoked if slection changed interval smaller than 100 msecs
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandler.GetChangedDrawing">
            <summary>
            Gets changed drawing from model database
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.EventHandlerProxy">
            <summary>
            EventHandler remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EventHandlerProxy._Instance">
            <summary>
            The remote EventHandler object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.DrawingInternal.EventHandlerProxy.EventHandler">
            <summary>
            Gets the singleton EventHandler instance that includes drawing event handlers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.EventHandlerWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EventHandlerWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.EventHandlerWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerWrapper.#ctor(Tekla.Structures.DrawingInternal.IEventHandler,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerWrapper.AddListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerWrapper.AddListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerWrapper.RemoveListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.EventHandlerWrapper.RemoveListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.ICDelegate">
            <summary>
            CDelegate interface
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEnumerateObjects(Tekla.Structures.DrawingInternal.dotEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLineHandler(Tekla.Structures.DrawingInternal.dotGrLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportArcHandler(Tekla.Structures.DrawingInternal.dotGrArc_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPolylineHandler(Tekla.Structures.DrawingInternal.dotGrPolyline_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPolygonHandler(Tekla.Structures.DrawingInternal.dotGrPolygon_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCloudHandler(Tekla.Structures.DrawingInternal.dotGrCloud_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportRectangleHandler(Tekla.Structures.DrawingInternal.dotGrRectangle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCircleHandler(Tekla.Structures.DrawingInternal.dotGrCircle_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportOpenGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrOpenGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportClosedGraphicObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrClosedGraphicObjectAttributes_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ImportPointListHandler(Tekla.Structures.DrawingInternal.dotGrPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ImportIntListHandler(Tekla.Structures.DrawingInternal.dotGrIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ImportDoubleListHandler(Tekla.Structures.DrawingInternal.dotGrDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ImportStringListHandler(Tekla.Structures.DrawingInternal.dotGrStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ImportMarkElementListHandler(Tekla.Structures.DrawingInternal.dotGrElementList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportViewHandler(Tekla.Structures.DrawingInternal.dotGrView_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPartHandler(Tekla.Structures.DrawingInternal.dotGrPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPartAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPartAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportBoltHandler(Tekla.Structures.DrawingInternal.dotGrBolt_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportBoltAttributesHandler(Tekla.Structures.DrawingInternal.dotGrBoltAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEdgeChamferHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamfer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEdgeChamferAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEdgeChamferAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPourHandler(Tekla.Structures.DrawingInternal.dotGrPour_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPourAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPourBreakHandler(Tekla.Structures.DrawingInternal.dotGrPourBreak_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPourBreakAttributesHandler(Tekla.Structures.DrawingInternal.dotGrPourBreakAttributes_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportConnectionHandler(Tekla.Structures.DrawingInternal.dotGrConnection_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSurfacingHandler(Tekla.Structures.DrawingInternal.dotGrSurfacing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSurfacingAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSurfacingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportWeldHandler(Tekla.Structures.DrawingInternal.dotGrWeld_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportWeldAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportWeldMarkHandler(Tekla.Structures.DrawingInternal.dotGrWeldMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportWeldMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrWeldMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportTextHandler(Tekla.Structures.DrawingInternal.dotGrText_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportTextAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEmbeddedObjectHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEmbeddedObjectAttributesHandler(Tekla.Structures.DrawingInternal.dotGrEmbeddedObjectAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportReferenceModelHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportReferenceModelAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReferenceModelAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportTextFileHandler(Tekla.Structures.DrawingInternal.dotGrTextFile_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportTextFileAttributesHandler(Tekla.Structures.DrawingInternal.dotGrTextFileAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLinkHandler(Tekla.Structures.DrawingInternal.dotGrLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLinkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLinkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGridHandler(Tekla.Structures.DrawingInternal.dotGrGrid_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGridAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGridLineHandler(Tekla.Structures.DrawingInternal.dotGrGridLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGridLineAttributesHandler(Tekla.Structures.DrawingInternal.dotGrGridLineAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDrawingHandler(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDrawingHandlerHandler(Tekla.Structures.DrawingInternal.dotGrDrawingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLayoutHandler(Tekla.Structures.DrawingInternal.dotGrLayoutHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportMarkLearningHandler(Tekla.Structures.DrawingInternal.dotGrMarkLearningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportMarkListingHandler(Tekla.Structures.DrawingInternal.dotGrMarkListingHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAssociativityHandler(Tekla.Structures.DrawingInternal.dotGrAssociativityHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCloningHandler(Tekla.Structures.DrawingInternal.dotGrCloningHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPrintDrawingHandler(Tekla.Structures.DrawingInternal.dotGrPrintDrawing_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportModelDatabaseUserPropertyHandler(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportStraightDimensionHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportStraightDimensionSetHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSet_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportStraightDimensionSetExcludePartsAccordingToFilter(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportStraightDimensionSetAttributesHandler(Tekla.Structures.DrawingInternal.dotGrStraightDimensionSetAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAngleDimensionAttributesHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAngleDimensionHandler(Tekla.Structures.DrawingInternal.dotGrAngleDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportRadiusDimensionAttributesHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimensionAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportRadiusDimensionHandler(Tekla.Structures.DrawingInternal.dotGrRadiusDimension_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionSetRadialHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadial_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionSetRadialAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetRadialAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionSetOrthogonalHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonal_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCurvedDimensionSetOrthogonalAttributesHandler(Tekla.Structures.DrawingInternal.dotGrCurvedDimensionSetOrthogonalAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDimensionLinkHandler(Tekla.Structures.DrawingInternal.dotGrDimensionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportMarkHandler(Tekla.Structures.DrawingInternal.dotGrMarkBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrMarkBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSymbolHandler(Tekla.Structures.DrawingInternal.dotGrSymbol_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSymbolAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSymbolAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLevelMarkHandler(Tekla.Structures.DrawingInternal.dotGrLevelMark_t@)">
            <summary>
            Function to handle .Net side requests about level marks
            </summary>
            <param name="pLevelMark">.Net Level Mark</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLevelMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrLevelMarkAttributes_t@)">
            <summary>
            Function to handle .Net side requests about level mark attributes
            </summary>
            <param name="pLevelMarkAttributes">.Net Level Mark Attributes</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetDotType(Tekla.Structures.DrawingInternal.dotGrDrawingObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPickerHandler(Tekla.Structures.DrawingInternal.dotDrawingUIPicker_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetSnapshotFromDatabase(Tekla.Structures.DrawingInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDrawingObjectSelectorHandler(Tekla.Structures.DrawingInternal.dotDrawingObjectSelector_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportViewAttributesHandler(Tekla.Structures.DrawingInternal.dotGrViewAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAutomationHandler(Tekla.Structures.DrawingInternal.dotGrAutomation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportLeaderLineHandler(Tekla.Structures.DrawingInternal.dotGrLeaderLine_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPluginHandler(Tekla.Structures.DrawingInternal.dotGrPlugin_t@,System.String@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportReinforcementHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBase_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportReinforcementSetGroupGetModelIdentifiers(Tekla.Structures.DrawingInternal.dotGrReinforcementSetGroupIdentifiers_t@,System.Collections.Generic.List{System.Int32}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportReinforcementBaseAttributesHandler(Tekla.Structures.DrawingInternal.dotGrReinforcementBaseAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAssociativityRuleHandler(Tekla.Structures.DrawingInternal.dotGrAssociativity_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDetailMarkHandler(Tekla.Structures.DrawingInternal.dotGrDetailMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDetailMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrDetailMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSectionMarkHandler(Tekla.Structures.DrawingInternal.dotGrSectionMark_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSectionMarkAttributesHandler(Tekla.Structures.DrawingInternal.dotGrSectionMarkAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportViewCommandHandler(Tekla.Structures.DrawingInternal.dotGrViewCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPluginQueueHandler(Tekla.Structures.DrawingInternal.dotGrPluginQueue_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportPickerCommandHandler(Tekla.Structures.DrawingInternal.dotGrPickerCommand_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportEnumerateCustomLineTypes(Tekla.Structures.DrawingInternal.dotGrCustomLineTypes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetChangedDrawingForUpdatedEvent(Tekla.Structures.DrawingInternal.dotGrDrawingAttributes_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSetDrawingPlotDateById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDisplayRevisionDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDisplayDrawingPropertiesDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDisplayDrawingUdaDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportUpdateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportUpdateSelectedDrawingMarks">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportRecreateSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDeleteSelectedDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDisplayDrawingCloningDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportDisplaySnapshotsDialog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportAddToMasterDrawingCatalog">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportCopySelectedDrawingsToNewSheet">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportHighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportUnhighlightGridLine(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportHighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportUnhighlightPartInView(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportShowAssociativityPinPushed(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportShowAssociativityPinUnpushed(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSignalDrawingSelectionChanged">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetDocumentManagerController(Tekla.Structures.DrawingInternal.DocumentManagerController@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportTryOpenDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetEditMode">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetDrawingExportFileName(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetDrawingExportFileNameExt(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSelectPartsByDrawings">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportGetDrawingsBySelectedParts(Tekla.Structures.DrawingInternal.dotClientId_t)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSetColorRgb(System.Int32,System.Byte,System.Byte,System.Byte)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportSetPenWidth(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.ICDelegate.ExportRefreshColorMode">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.IEventHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.IEventHandler.AddListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.IEventHandler.AddListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.IEventHandler.RemoveListener(Tekla.Structures.Drawing.UI.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.IEventHandler.RemoveListener(Tekla.Structures.Drawing.Events)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.DrawingInternal.Remoter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.DrawingInternal.Remoter.ChannelName">
            <summary>
            Name of the remoting channel to register.
            </summary>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Remoter.PublishTypes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.DrawingInternal.Remoter.InitializeSandBox">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintOutputType">
            <summary>
            The printer output type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOutputType.Printer">
            <summary>
            Printer output type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOutputType.PDF">
            <summary>
            PDF output type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOutputType.Plot">
            <summary>
            Plot output type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOutputType.Image">
            <summary>
            Image png output type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintPaperSize">
            <summary>
            The paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.Auto">
            <summary>
            Printer output type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A0">
            <summary>
            A0 paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A1">
            <summary>
            A1 paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A2">
            <summary>
            A2 paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A3">
            <summary>
            A3 paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A4">
            <summary>
            A4 paper size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintPaperSize.A5">
            <summary>
            A5 paper size.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintColor">
            <summary>
            Output color mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintColor.Color">
            <summary>
            Color mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintColor.BlackAndWhite">
            <summary>
            Black and white mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintColor.GreyScale">
            <summary>
            Grey scale mode.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintToMultipleSheet">
            <summary>
            The print to multiple sheet type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintToMultipleSheet.Off">
            <summary>
            Off.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintToMultipleSheet.LeftToRightAndTopToBottom">
            <summary>
            Left to right and top to bottom.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintToMultipleSheet.BottomToTopAndRightToLeft">
            <summary>
            Bottom to top and right to left.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DPMPrinterAttributes">
            <summary>
            The DPMPrinterAttributes class contains the attributes for controlling the printing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.outputType">
            <summary>
            Whether to print to a physical printer, file or PDF file.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.printerName">
            <summary>
            The printer name. Not applicable when PDF printing in use.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.paperSize">
            <summary>
            Paper size name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.scalingMethod">
            <summary>
            The scaling method.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.scaleFactor">
            <summary>
            The scale factor. Applicable when scaling method is "Manual".
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.orientation">
            <summary>
            The print orientation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.numberOfCopies">
            <summary>
            The number of copies of each page.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.colorMode">
            <summary>
            Output color mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.outputFileName">
            <summary>
            Output file name and path. Applicable in PDF printing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.openFileWhenFinished">
            <summary>
            Whether to open file when finished.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DPMPrinterAttributes.printToMultipleSheet">
            <summary>
            Whether to print to multiple sheets.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.OutputType">
            <summary>
            The printing output type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.PrinterName">
            <summary>
            The printer name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.PaperSize">
            <summary>
            The paper size name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.ScalingMethod">
            <summary>
            The print scaling method.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.ScaleFactor">
            <summary>
            The print scale factor.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.Orientation">
            <summary>
            The print orientation type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.NumberOfCopies">
            <summary>
            The number of copies of each drawing to print. 
            Only applicable for printing to a printer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.ColorMode">
            <summary>
            Output color mode.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.OutputFileName">
            <summary>
            Output file name and path. Applicable in PDF printing. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.OpenFileWhenFinished">
            <summary>
            Whether to open file when finished.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DPMPrinterAttributes.PrintToMultipleSheet">
            <summary>
            Whether to print to multiple sheets. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DPMPrinterAttributes.#ctor">
            <summary>
            Creates a new PrintAttributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DPMPrinterAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.EmbeddedObjectAttributes">
            <summary>
            The EmbeddedObjectAttributes class contains attributes for embedded objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.EmbeddedObjectBase"/>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectAttributes.xScale">
            <summary>The xScale</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectAttributes.yScale">
            <summary>The yScale</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectAttributes.scaling">
            <summary>The scaling</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectAttributes.frame">
            <summary>The frame</summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectAttributes.XScale">
            <summary>
            Gets or sets the X scaling value. Changing this property
            will set the scaling type to ScaleXY.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectAttributes.YScale">
            <summary>
            Gets or sets the Y scaling value. Changing this property
            will set the scaling type to ScaleXY.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectAttributes.Scaling">
            <summary>
            Gets or sets the scaling type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectAttributes.Frame">
            <summary>
            Gets or sets the frame.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.EmbeddedObjectAttributes"/> class that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectAttributes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.EmbeddedObjectAttributes"/> class that loads given attributes.
            </summary>
            <param name="AttributeFile">The name of the attribute file</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GenericAttributesBase">
            <summary>
            The GenericAttributesBase class is a base class that shared attributes among many classes use.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GenericAttributesBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LinkFrameAttributes">
            <summary>
            The LinkFrameAttributes class contains the attributes for controlling the appearance of
            a link frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.Line">
            <summary>
            Gets or sets the line type.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LineTypeAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.Width">
            <summary>
            The width of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.Height">
            <summary>
            The height of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.Angle">
            <summary>
            The angle of the frame (compared to X-axis)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.InsertionPoint">
            <summary>
            The InsertionPoint of the frame (CenterPoint)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.LineType">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkFrameAttributes.Color">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkFrameAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkFrameAttributes.GetObjectAlignedBoundingBox">
            <summary>
            Gets the bounding box of the frame in the local coordinate system.
            </summary>
            <returns>The bounding box of the frame in the local coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkFrameAttributes.GetAxisAlignedBoundingBox">
            <summary>
            Gets the bounding box of the frame in the global axis coordinate system.
            </summary>
            <returns>The bounding box of the frame in the global axis coordinate system.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LinkAttributes">
            <summary>
            The LinkAttributes class contains the attributes for controlling the appearance of a link.
            </summary>
            <example>
            The following code shows how to load user-defined attributes that are named "red":
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       LinkAttributes linkAttributes = new LinkAttributes("red");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkAttributes.IsUnderlined">
            <summary>
            Defines whether the link is underlined or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkAttributes.Font">
            <summary>
            Gets or sets the font attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkAttributes.Scaling">
            <summary>
            Gets or sets the link scaling options.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkAttributes.Frame">
            <summary>
            Gets or sets the link frame attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkAttributes.#ctor">
            <summary>
            Creates a new link attributes instance using standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkAttributes.#ctor(System.String)">
            <summary>
            Creates a new link attributes instance loading the specified attributes.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the link frame attributes from the specified file.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingAttributes">
            <summary>
            The PlacingAttributes class contains the basic attributes for determining an object's placing.
            </summary>
            <example>
            The following example enumerates through all marks in all views and changes
            their PlacingAttributes and InsertionPoints.
            You may try commenting out either Modify part to see how it affects the end result.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                public void Example1()
                {
                    DrawingHandler MyDrawingHandler = new DrawingHandler();
                    if(MyDrawingHandler.GetConnectionStatus())
                    {
                        MarkBase MyMarkBase;
                        DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                        while(views.MoveNext())
                        {
                            DrawingObjectEnumerator allObjects = (views.Current as ViewBase).GetAllObjects();
                            while(allObjects.MoveNext())
                            {
                                if(allObjects.Current is MarkBase)
                                {
                                    MyMarkBase = allObjects.Current as MarkBase;
                                    // Using PlacingAttributes.IsFixed = true will force the mark to go to the specified point.
                                    MyMarkBase.Attributes.PlacingAttributes.IsFixed = true;
                                    MyMarkBase.InsertionPoint = new Point(100, 100);
                                    MyMarkBase.Modify();
                                    // Using PlacingAttributes.IsFixed = false will try to place the mark to the specified point,
                                    // however, if there's already an object there, it will find a new place around that area.
                                    // When finding a place around the area, the rest of the PlacingAttributes take effect.
                                    MyMarkBase.Attributes.PlacingAttributes.IsFixed = false;
                                    // Minimum distance from other objects when searching for a space to place the mark
                                    MyMarkBase.Attributes.PlacingAttributes.PlacingDistance.SearchMargin = 10.0;
                                    // Minimum distance from the drawing object
                                    MyMarkBase.Attributes.PlacingAttributes.PlacingDistance.MinimalDistance = 1.0;
                                    // Maximum distance from the drawing object (0.0 = no limit)
                                    MyMarkBase.Attributes.PlacingAttributes.PlacingDistance.MaximalDistance = 0.0;
                                    // The directions to look for possible places
                                    MyMarkBase.Attributes.PlacingAttributes.PlacingQuarter = new PlacingQuarterAttributes(TopLeft: true, TopRight: true, BottomLeft: true, BottomRight: true);
                                    MyMarkBase.InsertionPoint = new Point(100, 100);
                                    MyMarkBase.Modify();
                                }
                            }
                        }
                    }
                }
            }
            </code> 
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingAttributes.IsFixed">
            <summary>
            Defines whether the object is using fixed or free placing.
            If set to true, it means that fixed placing is enabled, and the object will not be rearranged
            in the drawing automatically.
            If set to false, then free placing is enabled, and the object will be placed in the most
            appropriate location near the original location.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingAttributes.PlacingDistance">
            <summary>
            Gets or sets the placing distance attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingAttributes.PlacingQuarter">
            <summary>
            Gets or sets the placing quarter attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingAttributes.#ctor">
            <summary>
            Creates a new placing attributes instance. The default parameters are:
            IsFixed = true, default PlacingDistanceAttributes, default PlacingQuarterAttributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingAttributes.#ctor(System.Boolean,Tekla.Structures.Drawing.PlacingDistanceAttributes,Tekla.Structures.Drawing.PlacingQuarterAttributes)">
            <summary>
            Creates a new placing quarter attributes instance with the given parameters.
            </summary>
            <param name="IsFixed">Defines whether the object is using fixed or free placing.</param>
            <param name="PlacingDistance">The distances to be used for the placing.</param>
            <param name="PlacingQuarter">The directions in which the placing can find suitable locations.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingAttributes.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingQuarterAttributes">
            <summary>
            The PlacingQuarterAttributes class contains the basic attributes for placing quarters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingQuarterAttributes.TopLeft">
            <summary>
            Defines whether the object can search for a suitable location in the top left direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingQuarterAttributes.TopRight">
            <summary>
            Defines whether the object can search for a suitable location in the top right direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingQuarterAttributes.BottomLeft">
            <summary>
            Defines whether the object can search for a suitable location in the bottom left direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingQuarterAttributes.BottomRight">
            <summary>
            Defines whether the object can search for a suitable location in the bottom right direction.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingQuarterAttributes.#ctor">
            <summary>
            Creates a new placing quarter attributes instance. The default parameters are:
            TopLeft = true, TopRight = true, BottomLeft = true, BottomRight = true.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingQuarterAttributes.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new placing quarter attributes instance with the given parameters.
            </summary>
            <param name="TopLeft">
            Defines whether the object can search for a suitable location in the top left direction.
            </param>
            <param name="TopRight">
            Defines whether the object can search for a suitable location in the top right direction.
            </param>
            <param name="BottomLeft">
            Defines whether the object can search for a suitable location in the bottom left direction.
            </param>
            <param name="BottomRight">
            Defines whether the object can search for a suitable location in the bottom right direction.
            </param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingQuarterAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingQuarterAttributes.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintScalingType">
            <summary>
            The print scaling type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintScalingType.Auto">
            <summary>
            Auto scale.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintScalingType.Scale">
            <summary>
            Use defined scale.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintOrientationType">
            <summary>
            The print orientation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOrientationType.Auto">
            <summary>
            Auto orientation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOrientationType.Landscape">
            <summary>
            Landscape orientation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintOrientationType.Portrait">
            <summary>
            Portrait orientation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DotPrintAreaType">
            <summary>
            The print area type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintAreaType.EntireDrawing">
            <summary>
            Print entire drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DotPrintAreaType.VisibleArea">
            <summary>
            Print visible area.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PrintAttributes">
            <summary>
            The PrintAttributes class contains the attributes for controlling the printing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.PrinterInstance">
            <summary>
            The name of the printer instance.
            Can be fetched from the printer catalog.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.ScalingType">
            <summary>
            The scale type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.Scale">
            <summary>
            The scale factor.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.PrintToMultipleSheet">
            <summary>
            Whether to print to multiple sheets.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.NumberOfCopies">
            <summary>
            The number of copies in printing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.Orientation">
            <summary>
            The print orientation type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PrintAttributes.PrintArea">
            <summary>
            The print area type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintAttributes.#ctor">
            <summary>
            Creates a new PrintAttributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Units">
            <summary>
            The available unit types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Automatic">
            <summary>Automatic, chooses the most appropriate unit for the current environment.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Millimeters">
            <summary>Show the value in millimeters.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Centimeters">
            <summary>Show the value in centimeters.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Meters">
            <summary>Show the value in meters.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.FeetAndInches">
            <summary>Show the value in feet and inches.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.CentimetersOrMeters">
            <summary>Show the value in centimeters or meters whichever is more appropriate.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Inches">
            <summary>Show the value in inches.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Units.Feet">
            <summary>Show the value in feet.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.FormatTypes">
            <summary>
            The available format types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.Automatic">
            <summary>Automatic, chooses the most appropriate format for the current environment.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.WholeNumber">
            <summary>As shown on the dialog: ###. This format will not show fractions or decimals.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.OneDecimalIfValidDecimal">
            <summary>As shown on the dialog: ###.[#]. This format will not show fractions or decimals, unless the rounded decimal part is a non zero value.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.OneDecimal">
            <summary>As shown on the dialog: ###.#. This format will always show the value with one decimal.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.TwoDecimalsIfValidDecimals">
            <summary>As shown on the dialog: ###.[##]. This format will not show fractions or decimals, unless the rounded decimal part is a non zero value.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.TwoDecimals">
            <summary>As shown on the dialog: ###.##. This format will always show the value with two decimals.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.ThreeDecimalsIfValidDecimals">
            <summary>As shown on the dialog: ###.[###]. This format will not show fractions or decimals, unless the rounded decimal part is a non zero value.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.ThreeDecimals">
            <summary>As shown on the dialog: ###.###. This format will always show the value with three decimals.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FormatTypes.Fractional">
            <summary>As shown on the dialog: ### #/#. This format will always show the value with fractions.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UnitAttributes">
            <summary>
            The UnitAttributes class handles attributes related to units and formatting of values.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UnitAttributes.Unit">
            <summary>
            Gets or sets the unit to use.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UnitAttributes.Format">
            <summary>
            Gets or sets the format to use.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UnitAttributes.Precision">
            <summary>
            Gets or sets the precision to use. For the future
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UnitAttributes.#ctor">
            <summary>
            Creates a new default UnitAttributes attributes instance. The default values are Units.Automatic, FormatTypes.Automatic.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UnitAttributes.#ctor(Tekla.Structures.Drawing.Units,Tekla.Structures.Drawing.FormatTypes)">
            <summary>
            Creates a new UnitAttributes attributes instance with the given parameters.
            </summary>
            <param name="unit">The units to use.</param>
            <param name="format">The format to use.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.UnitAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UnitAttributes.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkSymbolShape">
            <summary>
            The mark symbol shapes for the detail mark.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkSymbolShape.None">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkSymbolShape.Circular">
            <summary>
            The circular shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkSymbolShape.SlashedCircular">
            <summary>
            The slashed circular shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkSymbolShape.Custom">
            <summary>
            The custom shape.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes">
            <summary>
            The ViewMarkBasicSymbolAttributes class contains basic attributes for mark symbols.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes.Size">
            <summary>
            The size of the mark symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes.Shape">
            <summary>
            The shape of the mark symbol.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes.#ctor">
            <summary>
            Creates a new mark symbol attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes.#ctor(System.Double,Tekla.Structures.Drawing.MarkSymbolShape)">
            <summary>
            Creates a new mark symbol attributes instance with the given size and shape.
            </summary>
            <param name="size">The size of the mark symbol to be used.</param>
            <param name="shape">The shape of the mark symbol to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicSymbolAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TagLocation">
            <summary>
            The mark tag location values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.AboveLine">
            <summary>
            The mark tag is above the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.BelowLine">
            <summary>
            The mark tag is below the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.MiddleLevelOfSymbol">
            <summary>
            The mark tag is in the middle level of the mark symbol.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.AboveSymbolCenterLine">
            <summary>
            The mark tag is above the center line of the mark symbol.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.BelowSymbolCenterLine">
            <summary>
            The mark tag is below the center line of the mark symbol.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TagLocation.CustomRelativeToSymbol">
            <summary>
            The mark tag is in a custom location relative to the mark symbol.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes">
            <summary>
            The ViewMarkBasicTagAttributes class contains basic attributes for view mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.Offset">
            <summary>
            The offset of the mark tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.Location">
            <summary>
            The location of the mark tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.TagContent">
            <summary>
            The tag content.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.#ctor">
            <summary>
            Creates a new mark tag attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Drawing.TagLocation,Tekla.Structures.Drawing.ContainerElement)">
            <summary>
            Creates a new mark tag attributes instance with the given offset, location and content.
            </summary>
            <param name="offset">The offset of the mark tag to be used.</param>
            <param name="location">The location of the mark tag to be used.</param>
            <param name="tagContent">The content of the mark tag to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewMarkBasicTagAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LevelMark">
            <summary>
            The LevelMark class defines a drawing object that is displayed as a level mark in a drawing.
            See the Tekla Structures help for more information.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Drawing.UI;
            using Tekla.Structures.Geometry3d;
            
            namespace Example
            {
                class Program
                {
                    public static void LevelMarkModify()
                    {
                        DrawingHandler myDrawingHandler = new DrawingHandler();
                        DrawingObjectSelector dos = myDrawingHandler.GetDrawingObjectSelector();
                        DrawingObjectEnumerator allObjectsOnSheet = dos.GetSelected();
                        while(allObjectsOnSheet.MoveNext())
                        {
                            if(allObjectsOnSheet.Current is Tekla.Structures.Drawing.LevelMark)
                            {
                                LevelMark levelMark = allObjectsOnSheet.Current as Tekla.Structures.Drawing.LevelMark;
                                levelMark.Attributes.Font.Height = 5;
                                levelMark.Attributes.Font.Color = DrawingColors.Red;
                                levelMark.Attributes.Frame.Color = DrawingColors.Yellow;
                                levelMark.Attributes.Frame.Type = FrameTypes.Round;
                                bool res = levelMark.Modify();
                            }
                        }
                    }
                    public static LevelMark GetSelectedLevelMark()
                    {
                        DrawingHandler myDrawingHandler = new DrawingHandler();
                        DrawingObjectSelector dos = myDrawingHandler.GetDrawingObjectSelector();
                        DrawingObjectEnumerator allObjectsOnSheet = dos.GetSelected();
                        while(allObjectsOnSheet.MoveNext())
                        {
                            if(allObjectsOnSheet.Current is Tekla.Structures.Drawing.LevelMark)
                            {
                                LevelMark levelMark = allObjectsOnSheet.Current as Tekla.Structures.Drawing.LevelMark;
                                return levelMark;
                            }
                        }
                        return null;
                    }
            
                    public static void LevelMarkCreateAsACopy()
                    {
                        var levelmark = GetSelectedLevelMark();
                        levelmark.InsertionPoint.X += 100;
                        levelmark.Insert();
                    }
                    public static void LevelMarkCreate()
                    {
                        DrawingHandler MyDrawingHandler = new DrawingHandler();
                        var drawing1 = MyDrawingHandler.GetActiveDrawing();
                        var sheet1 = drawing1.GetSheet();
                        var allviews = sheet1.GetAllViews();
                        foreach(var item in allviews)
                        {
                            ViewBase view = item as ViewBase;
                            LeaderLinePlacing leaderLinePlacing = new LeaderLinePlacing(new Point(0000, 1000, 0));
                            LevelMark levelMark = new LevelMark(view, new Point(1000, 2000, 0), leaderLinePlacing);
                            levelMark.Attributes.Font.Height = 4.0;
                            bool res = levelMark.Insert();
                        }
                    }
                    static void Main(string[] args)
                    {
                        LevelMarkCreate();
                        //LevelMarkCreateAsACopy();
                        //LevelMarkModify();
                        DrawingHandler myDrawingHandler = new DrawingHandler();
                        myDrawingHandler.GetActiveDrawing().CommitChanges();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the default standard attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PlacingBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="Placing">The way the object is placed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="Attributes">The level mark attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.ModelObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="modelObject">The model object that the Mark will be attached to.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PlacingBase,Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="Placing">The way the object is placed.</param>
            <param name="Attributes">The level mark attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PlacingBase,Tekla.Structures.Drawing.ModelObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="Placing">The way the object is placed.</param>
            <param name="modelObject">The model object that the Mark will be attached to.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.ModelObject,Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="modelObject">The model object that the Mark will be attached to.</param>
            <param name="Attributes">The level mark attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PlacingBase,Tekla.Structures.Drawing.ModelObject,Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class using the given attributes.
            </summary>
            <param name="View">The view where to insert the level mark.</param>
            <param name="InsertionPoint">The location where to place the level mark.</param>
            <param name="BasePoint">The location where to the level mark points.</param>
            <param name="modelObject">The model object that the Mark will be attached to.</param>
            <param name="Attributes">The level mark attributes to be applied.</param>
            <param name="Placing">The way the object is placed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LevelMark.LevelMarkType">
            <summary>
            Defines options about how the level mark is shown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LevelMark.LevelMarkType.NoArrowNoLeaderLine">
            <summary>
            Level mark is shown without an arrow and a leader line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LevelMark.LevelMarkType.ArrowWithoutLeaderLine">
            <summary>
            Level mark is shown with an arrow but without a leader line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LevelMark.LevelMarkType.InclinedLeaderLine">
            <summary>
            Level mark is shown with an inclined leader line but without an arrow.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LevelMark.LevelMarkType.OrthogonalLeaderLine">
            <summary>
            Level mark is shown with an orthogonal leader line and with an arrow.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.SubType">
            <summary>
            Gets or sets the subtype of the level mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.Attributes">
            <summary>
            Gets or sets the level mark attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.InsertionPoint">
            <summary>
            Gets or sets the level mark insertion point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.BasePoint">
            <summary>
            Gets or sets the level mark base point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.Placing">
            <summary>
            Gets or sets the current placing of the object.
            See the placing types for different placing options.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.Hideable">
            <summary>
            Gets the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.ModelObjectIdentifier">
            <summary>
            Gets the model object identifier
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.GetObjectAlignedBoundingBox">
            <summary>
            Returns the bounding box of the level mark (rectangle format).
            </summary>
            <returns>The bounding box of the level mark.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.GetAxisAlignedBoundingBox">
            <summary>
            Returns the axis aligned bounding box of the level mark (rectangle format).
            </summary>
            <returns>The bounding box of the level mark.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.GetObjects">
            <summary>
            Gets the children objects of the current object.
            </summary>
            <returns>The children objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.GetObjects(System.Type[])">
            <summary>
            Gets the children objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children objects of the current object that are of certain types.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.Insert">
            <summary>
            Inserts the level mark into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.Select">
            <summary>
            Selects the level mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.Modify">
            <summary>
            Modifies the level mark in the current drawing database.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">Thrown if Attributes contains values that are not supported by the object.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.Delete">
            <summary>
            Deletes the level mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Call TS and perform database operation specified in OperationType.
            </summary>
            <param name="OperationType">The type of the operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes">
            <summary>
            The LevelMarkAttributes class contains the attributes for the level mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes"/> class that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes"/> class that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Prefix">
            <summary>
            Gets or sets the text before the level value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.UsePositiveSignForPositiveLevels">
            <summary>
            Gets or sets a value indicating whether a + character in front of positive level value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.TextHidden">
            <summary>
            Gets or sets a value indicating whether the numeric values are visible or hidden.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Postfix">
            <summary>
            Gets or sets text after the level value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Unit">
            <summary>
            Gets or sets the unit attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.UseGrouping">
            <summary>
            Gets or sets a value indicating whether to use different grouping options 
            to represent the level mark dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Angle">
            <summary>
            Gets or sets the angle of the level mark, in degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Font">
            <summary>
            Gets or sets the font of the level mark text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.Frame">
            <summary>
            Gets or sets the frame attributes for the level mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.TransparentBackground">
            <summary>
            Gets or sets a value indicating whether the transparency 
            of the background of the level mark text is enabled.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.ArrowHead">
            <summary>
            Gets or sets the arrow attributes for the level mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.PlacingAttributes">
            <summary>
            Gets or sets the placing attributes that the object should use.
            Using these you can specify whether the object is automatically arranged in the drawing or not.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LevelMark.LevelMarkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Image">
            <summary>
            The Image class defines an image that can be inserted into a drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.Image"/> class with the given parameters.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="fileName">The filename to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.Image"/> class using the specified attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="fileName">The filename to be used.</param>
            <param name="attributes">The attributes to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Size,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.Image"/> class with the given parameters.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="frameSize">The frames size.</param>
            <param name="fileName">The filename to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Size,System.String,Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.Image"/> class using the specified attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="frameSize">The frames size.</param>
            <param name="fileName">The filename to be used.</param>
            <param name="attributes">The attributes to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Image.Initialize">
            <summary>
            Sets inherited member properties.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AnnotationDrawing">
            <summary>
            The Annotation drawing class is for handling annotation drawings in Tekla Structures.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AnnotationDrawing.#ctor">
            <summary>
            Instantiates a new Annotation drawing using standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AnnotationDrawing.#ctor(System.Boolean)">
            <summary>
            Instantiates new Annotation drawing.
            </summary>
            <param name="LoadAttributefile">used internally for selection for performance reasons</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AnnotationDrawing.Modify">
            <summary>
            Applies the changes made to the drawing attributes.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.DrawingHandler"/>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AnnotationDrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AnnotationDrawing.Insert">
            <summary>
            Inserts an empty annotation arrangement drawing. Views must be added separately.
            A drawing can be inserted only when there is no active drawing.
            </summary>
            <returns>True on success.</returns>
            <exception cref="T:Tekla.Structures.Drawing.CannotInsertDrawingException">Thrown if inserting a drawing when another drawing is active.</exception>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingEnumeratorBase">
             <summary>
             The DrawingEnumeratorBase class is a base class for DrawingObjectEnumerator and DrawingEnumerator.
             </summary>
             <example>
             The following example gets all the drawings and the objects of the drawings.
             <code>
             using Tekla.Structures.Drawing;
             using System.Windows.Forms;
             
             public class Example
             {
                    TreeView drawingListTreeView = new TreeView();
                    DrawingHandler DrawingHandler = new DrawingHandler();
                    CheckBox ShowViews = new CheckBox();
                    CheckBox ShowObjectsInViews = new CheckBox();
             
                    private void AddDrawingInformationToDrawingListTreeView()
                    {
                        drawingListTreeView.Nodes.Clear();
                        DrawingEnumerator DrawingList = DrawingHandler.GetDrawings(); // Get drawing list.
             
                        while (DrawingList.MoveNext())
                        {
                            Drawing CurrentDrawing = DrawingList.Current;
             
                            // Add the drawing name to the UI tree.
                            TreeNode DrawingNode = new TreeNode();
                            DrawingNode.Tag = CurrentDrawing;
                            DrawingNode.Text = "" + CurrentDrawing.GetType();
             
                            if (ShowViews.Checked)
                                AddChildDrawingObjectsToTreeNode(DrawingNode, CurrentDrawing.GetSheet()); // Add all the objects placed to the sheet to the UI tree.
                            drawingListTreeView.Nodes.Add(DrawingNode);
                        }
                    }
             
                    private void AddChildDrawingObjectsToTreeNode(TreeNode Node, Tekla.Structures.Drawing.IHasChildren CurrentContainer)
                    {
                        DrawingObjectEnumerator ObjectList = CurrentContainer.GetObjects(); // Gets the objects that are placed directly to the current container object.
                        ObjectList.SelectInstances = false; // The instances don't need to be automatically selected, only whether the object exists or not has to be found out (objects properties are not used at all).
             
                        while (ObjectList.MoveNext())
                        {
                            if(ShowObjectsInViews.Checked || ObjectList.Current is ViewBase)
                            {
                                TreeNode CurrentNode = new TreeNode("" + ObjectList.Current.GetType());
            
                                CurrentNode.Tag = ObjectList.Current;
             
                                if (ObjectList.Current is Tekla.Structures.Drawing.IHasChildren)
                                    AddChildDrawingObjectsToTreeNode(CurrentNode, ObjectList.Current as IHasChildren);
             
                                Node.Nodes.Add(CurrentNode);
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase._ObjectIDs">
            <summary>
            List of IDs of enumerated objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase._ObjectTypes">
            <summary>
            List of types of enumerated objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.CurrentItem">
            <summary>
            Index of current item
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.CurrentSelected">
            <summary>
            Instance of current item
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.SerializedObjects">
            <summary>
            List of serialized objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.SerializedDrawings">
            <summary>
            List of serialized drawings
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.SelectInstances">
            <summary>
            Indicates that the instance Select() is called when the 'Current' item is asked from the enumerator.
            The user can set this to 'false' if no members are ever asked from the instance. This is the case
            when, for example, asking only a report property from the identifier. Warning: normally the user should not
            change this value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingEnumeratorBase.AutoFetch">
            <summary>
            Indicates that the objects are fetched from the drawing when the enumerator is created.
            Object information is therefore not anymore fetched when 'Current' item is asked from the enumerator.
            Property value is used for all enumerators in application  
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum">
            <summary>
            The types of enumerator available.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.ALL_SELECTED">
            <summary>
            Selects all user selected objects from the drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.ALL_OBJECTS">
            <summary>
            Selects all objects from the drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.PICKED_OBJECTS">
            <summary>
            Picked objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.ALL_RELATED_OBJECTS">
            <summary>
            Related Objects of Object
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.OBJECTS_BASED_ON_MODELIDENTIFIER">
            <summary>
            Objects based on model identifier
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.ANNOTATION_OBJECTS">
            <summary>
            Annotation objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum.ALL_ANNOTATION_SELECTED">
            <summary>
            Selected annotation objects
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum">
            <summary>
            Enumerator sub type specifiers.        
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum.ALL_CHILDREN">
            <summary>
            Selects all children (but not their children)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum.ALL_GRAND_CHILDREN">
            <summary>
            Selects all children and their childrens
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.#ctor(Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum,Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum,Tekla.Structures.Identifier,Tekla.Structures.Identifier,System.Type[])">
            <summary>
            Instantiates a new enumerator of given type.
            </summary>
            <param name="Type">Type of enumerator</param>
            <param name="SubType">Subtype of enumerator</param>
            <param name="FatherIdentifier">Id of father object</param>
            <param name="DrawingIdentifier">Drawing from which data is fetched</param>
            <param name="types">Type filter.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.#ctor(Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorTypeEnum,Tekla.Structures.Drawing.DrawingEnumeratorBase.EnumeratorSubTypeEnum,Tekla.Structures.Identifier,Tekla.Structures.Identifier,Tekla.Structures.Identifier,System.Type[])">
            <summary>
            Instantiates a new enumerator of given type.
            </summary>
            <param name="Type">Type of enumerator</param>
            <param name="SubType">Subtype of enumerator</param>
            <param name="FatherIdentifier">Id of father object</param>
            <param name="DrawingIdentifier">Drawing from which data is fetched</param>
            <param name="ModelObjectIdentifier">Model object id from which data is fetched</param>
            <param name="types">Type filter.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.GetAllFromDB_FAST(Tekla.Structures.DrawingInternal.dotEnumerator_t@)">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="Enumerator">Enumerator including possible select rules and filters.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.GetAllFromDB(Tekla.Structures.DrawingInternal.dotEnumerator_t@,System.Type[])">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="Enumerator">Enumerator including possible select rules and filters.</param>
            <param name="TypeFilter">Type filter</param>
            <returns>true if succeed</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.GetEnumerator">
            <summary>
            Allows the usage of the foreach statement with DrawingObjectEnumerator.
            </summary>
            <returns>A pointer to the existing instance of the class.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingEnumeratorBase.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type Drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumeratorBase.GetCurrent">
            <summary>
            Returns the current item as an object. Needed to make IEnumerator.Current work correctly.
            </summary>
            <returns>The current item as an object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingObjectEnumerator">
            <summary>
            The DrawingObjectEnumerator class provides the means to iterate through drawing object instances. Drawing object enumerators
            are generated by the container view and they contain drawing objects that are children of the container view instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler DrawingHandler = new DrawingHandler();
                       Drawing CurrentDrawing = DrawingHandler.GetActiveDrawing();
            
                       // Loop through all objects in the drawing and delete all existing line objects.
                       DrawingObjectEnumerator AllObjects = CurrentDrawing.GetSheet().GetAllObjects();
            
                       while(AllObjects.MoveNext())
                       {
                           if(AllObjects.Current is Line)
                           {
                               AllObjects.Current.Delete();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingObjectEnumerator.Current">
            <summary>
            Gets the current drawing object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObjectEnumerator.GetCurrent">
            <summary>
            Returns the current item as an object. Needed to make IEnumerator.Current work correctly.
            </summary>
            <returns>The current item as an object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CustomLineTypeCatalog">
            <summary>
            The CustomLineTypeCatalog provides accessors to fetch the possible custom line types of drawing objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineTypeCatalog.Get(System.Int32)">
            <summary>
            Gets the CustomLineType with the specified ID.
            </summary>
            <param name="CustomLineTypeId">The ID of the CustomLineType to fetch.</param>
            <returns>The requested CustomLineType or null if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineTypeCatalog.Get(System.String)">
            <summary>
            Gets the CustomLineType with the specified Name.
            </summary>
            <param name="Name">The Name of the CustomLineType to fetch.</param>
            <returns>The requested CustomLineType or null if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineTypeCatalog.Get">
            <summary>
            Gets all the available CustomLineType's.
            </summary>
            <returns>List of CustomLineType's.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionBase">
            <summary>
            The DimensionBase class is the common base class for all the different dimensions.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionBase.GetDimensionSet">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionBase.GetDimensionSet(System.Boolean)">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionBase.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            An interface for calling core functions. New query types are added to DrawingObject.
            </summary>
            <param name="QueryType">The type of the query. See more details from DrawingObject.</param>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionBase.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionLink">
            <summary>
            The DimensionLink class contains methods related to dimension links.
            A dimension link is a link between two dimension sets.
            </summary>
            <example>
            The following example creates two dimensions in the drawing sheet and links them:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if (MyDrawingHandler.GetConnectionStatus())
                       {
                           StraightDimension Dimension1 = new StraightDimension(MyDrawingHandler.GetActiveDrawing().GetSheet(),
                               new Point(0, 0, 0), new Point(100, 0, 0), new Vector(0, -1, 0), 100.0);
                           StraightDimension Dimension2 = new StraightDimension(MyDrawingHandler.GetActiveDrawing().GetSheet(),
                               new Point(0, 0, 0), new Point(0, 100, 0), new Vector(-1, 0, 0), 100.0);
            
                           Dimension1.Insert();
                           Dimension2.Insert();
            
                           StraightDimensionSet DimSet1 = Dimension1.GetDimensionSet() as StraightDimensionSet;
                           StraightDimensionSet DimSet2 = Dimension2.GetDimensionSet() as StraightDimensionSet;
            
                           DimensionLink DimLink = new DimensionLink(DimSet1, DimSet2);
                           DimLink.Insert();
                       }
                   }
            }
             </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.#ctor(Tekla.Structures.Drawing.StraightDimensionSet,Tekla.Structures.Drawing.StraightDimensionSet)">
            <summary>
            Creates a new DimensionLink instance.
            </summary>
            <param name="Dimension1">The first dimension set to be linked.</param>
            <param name="Dimension2">The second dimension set to be linked.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.GetDimension1">
            <summary>
            Gets the first one of the linked dimensions.
            </summary>
            <returns>The first one of the linked dimensions.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.GetDimension2">
            <summary>
            Gets the second one of the linked dimensions.
            </summary>
            <returns>The second one of the linked dimensions.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.Delete">
            <summary>
            Unlinks the dimensions in the current drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.Modify">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.Insert">
            <summary>
            Links the dimensions in the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionLink.Select">
            <summary>
            Selects the drawing DimensionLink from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBase">
            <summary>
            The DimensionSetBase class is the common base class for all the different dimension sets. 
            The dimension set base cannot be instantiated. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBase.Attributes">
            <summary>
            The dimension set attributes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBase.DimensionSetBuffer">
            <summary>A buffer for holding added dimension sets. When a dimension set is modified, these dimension sets are combined to it.</summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBase.GetObjects">
            <summary>
            Gets the children straight dimensions of the current straight dimension set.
            </summary>
            <returns>The children straight dimensions of the current straight dimension set.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBase.GetObjects(System.Type[])">
            <summary>
            Gets the children straight dimensions of the current straight dimension set that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children straight dimensions of the current straight dimension set that are of certain types.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBase.AddToDimensionSet(Tekla.Structures.Drawing.DimensionSetBase)">
            <summary>
            Adds a dimension set to the current dimension set.
            </summary>
            <param name="SetToAdd">The dimension set to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBase.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            An interface for calling core functions. New query types are added to DrawingObject.
            </summary>
            <param name="QueryType">The type of the query. See more details from DrawingObject.</param>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBase.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
            <example>
            This example opens the first available drawing and hides all ModelObject's from the view.
            <code>
            namespace Hideable
            {
                using Tekla.Structures.Drawing;
            
                public static class Example
                {
                    public static void Example1()
                    {
                        DrawingHandler drawingHandler = new DrawingHandler();
                        DrawingEnumerator drawingList = drawingHandler.GetDrawings();
                        if(drawingList.MoveNext())
                        {
                            Drawing currentDrawing = drawingList.Current;
                            drawingHandler.SetActiveDrawing(currentDrawing);
            
                            DrawingObjectEnumerator objectList = currentDrawing.GetSheet().GetAllObjects(typeof(ModelObject));
                            while(objectList.MoveNext())
                            {
                                ModelObject currentObject = objectList.Current as ModelObject;
            
                                if(currentObject != null)
                                {
                                    if(!currentObject.Hideable.IsHidden) // The object is not yet hidden
                                    {
                                        currentObject.Hideable.HideFromDrawingView();
                                        currentObject.Modify();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.Hideable.HiddenFlags">
            <summary>
            The flag for keeping track of objects hidden status.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.HiddenFlags.NotHidden">
            <summary>
            Not hidden.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.HiddenFlags.HiddenBySelf">
            <summary>
            Hidden by self (meaning nothing else is hiding it).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.HiddenFlags.HiddenByParent">
            <summary>
            Hidden by parent (the objects parent is hidden and thus this object is also hidden).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags">
            <summary>
            The flag for keeping track if object should be hidden.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags.ShouldNotBeHidden">
            <summary>
            Should not be hidden, default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags.HideFromDrawingView">
            <summary>
            To be hidden from drawing view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags.HideFromDrawing">
            <summary>
            To be hidden from drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags.ShowInDrawingView">
            <summary>
            To be shown in drawing view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Hideable.ShouldBeHiddenFlags.ShowInDrawing">
            <summary>
            To be shown in drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Hideable.IsHidden">
            <summary>
            Retrieves the information if this object is hidden or not.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Hideable.HideFromDrawingView">
            <summary>
            Hides this object from the drawing view.
            Calling Modify on the object is required to hide the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Hideable.HideFromDrawing">
            <summary>
            Hides this object from the whole drawing.
            Calling Modify on the object is required to hide the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Hideable.ShowInDrawingView">
            <summary>
            Shows this object in the drawing view.
            Calling Modify on the object is required to show the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Hideable.ShowInDrawing">
            <summary>
            Shows this object in the whole drawing.
            Calling Modify on the object is required to show the object.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LineTypesEnum">
            <summary>
            The line types (the presentation of the line).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.UndefinedLine">
            <summary>
            The line type is undefined.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.SolidLine">
            <summary>
            The solid line (default).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.DashedLine">
            <summary>
            The dashed line (-----).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.SlashedLine">
            <summary>
            The slashed line (- - -).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.DashDot">
            <summary>
            The dash dotted line (--.--.).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.DottedLine">
            <summary>
            The dotted line (.....).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.DashDoubleDot">
            <summary>
            The dash double dotted line (-..-..-).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.SlashDash">
            <summary>
            The slash dash line (-- - -- -).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypesEnum.Custom">
            <summary>
            The custom line type (it will also transport the custom line type name)
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LineTypes">
            <summary>
            The LineTypes class defines the possible line types that can be used by the drawing objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.UndefinedLine">
            <summary>
            The line type is undefined.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.SolidLine">
            <summary>
            The solid line (default).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.DashedLine">
            <summary>
            The dashed line (-----).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.SlashedLine">
            <summary>
            The slashed line (- - -).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.DashDot">
            <summary>
            The dash dotted line (--.--.).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.DottedLine">
            <summary>
            The dotted line (.....).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.DashDoubleDot">
            <summary>
            The dash double dotted line (-..-..-).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LineTypes.SlashDash">
            <summary>
            The slash dash line (-- - -- -).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.Custom(System.String)">
            <summary>
            The Custom line type defines a line that is drawn using one of the custom line types, as specified by the CustomLineTypeName.
            </summary>
            <param name="CustomLineTypeName">A valid custom line type name, if it is not valid an exception will be thrown.</param>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an invalid custom line type name is given.</exception>
            <returns>The requested custom line type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.op_Explicit(System.Int32)~Tekla.Structures.Drawing.LineTypes">
            <summary>
            Returns the corresponding LineTypes value of the given int value.
            </summary>
            <param name="value">An int that corresponds to a LineTypes value.</param>
            <returns>A LineTypes value that corresponds with the given int.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.op_Explicit(Tekla.Structures.Drawing.LineTypes)~System.Int32">
            <summary>
            Returns the corresponding int value of the given LineTypes value.
            </summary>
            <param name="lineType">The given LineTypes value.</param>
            <returns>An int value corresponding to the given LineTypes value.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.Equals(System.Object)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="obj">The object we wish to check the equality with.</param>
            <returns>True if the given object equals the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.op_Equality(Tekla.Structures.Drawing.LineTypes,Tekla.Structures.Drawing.LineTypes)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="a">The first object we wish to check the equality with.</param>
            <param name="b">The second object we wish to check the equality with.</param>
            <returns>True if both objects equals each other.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.op_Inequality(Tekla.Structures.Drawing.LineTypes,Tekla.Structures.Drawing.LineTypes)">
            <summary>
            Returns true if the current object and the given object are not equal.
            </summary>
            <param name="a">The first object we wish to check the inequality with.</param>
            <param name="b">The second object we wish to check the inequality with.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypes.ToString">
            <summary>
            Returns the LineTypes information as a string.
            </summary>
            <returns>The LineTypes information as a string.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.NormalLineType">
            <summary>
            The NormalLineType class defines the non-custom line types that can be used by the drawing objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.Equals(System.Object)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="obj">The object we wish to check the equality with.</param>
            <returns>True if the given object equals the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.op_Equality(Tekla.Structures.Drawing.NormalLineType,Tekla.Structures.Drawing.NormalLineType)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="a">The first object we wish to check the equality with.</param>
            <param name="b">The second object we wish to check the equality with.</param>
            <returns>True if both objects equals each other.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.op_Inequality(Tekla.Structures.Drawing.NormalLineType,Tekla.Structures.Drawing.NormalLineType)">
            <summary>
            Returns true if the current object and the given object are not equal.
            </summary>
            <param name="a">The first object we wish to check the inequality with.</param>
            <param name="b">The second object we wish to check the inequality with.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NormalLineType.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.CustomLineType">
            <summary>
            The CustomLineType class defines the custom line types of the drawing objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CustomLineType.Name">
            <summary>
            The Name of the custom line type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CustomLineType.Description">
            <summary>
            The Description of the custom line type (ASCII representation of the line).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CustomLineType.LineDescription">
            <summary>
            The description of the custom line type.
            Description uses the following format:
            List of line segments.
            Positive value gives length of filled line segment and
            negative value gives length of empty line segment.
            0 means a dot. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.Equals(System.Object)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="obj">The object we wish to check the equality with.</param>
            <returns>True if the given object equals the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.op_Equality(Tekla.Structures.Drawing.CustomLineType,Tekla.Structures.Drawing.CustomLineType)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="a">The first object we wish to check the equality with.</param>
            <param name="b">The second object we wish to check the equality with.</param>
            <returns>True if both objects equals each other.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.op_Inequality(Tekla.Structures.Drawing.CustomLineType,Tekla.Structures.Drawing.CustomLineType)">
            <summary>
            Returns true if the current object and the given object are not equal.
            </summary>
            <param name="a">The first object we wish to check the inequality with.</param>
            <param name="b">The second object we wish to check the inequality with.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CustomLineType.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingLink">
            <summary>
            The DrawingLink class defines a drawing link object in a drawing.
            When a drawing link is double clicked, the target drawing is opened.
            </summary>
            <example>
            The following example shows how to create a basic drawing link to the current drawing.
            The drawing mark is used as the link text.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler _drawingHandler = new DrawingHandler();
                       ViewBase _view = _drawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
                       Size size = new Size(10.0, 10.0);
            
                       Point insertionPoint = new Point(200, 200);
                       DrawingLink link = new DrawingLink(_view, insertionPoint,
                           _drawingHandler.GetActiveDrawing(), String.Empty, size);
                       link.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingLink.Target">
            <summary>
            Gets or sets the target drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Drawing,System.String)">
            <summary>
            Creates a new drawing link instance using standard attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Drawing,System.String,Tekla.Structures.Drawing.LinkAttributes)">
            <summary>
            Creates a new drawing link instance using the given attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Attributes">The attributes for creating the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Drawing,System.String,Tekla.Structures.Drawing.Size)">
            <summary>
            Creates a new drawing link instance of the given size.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Size">The width and height for the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Drawing,System.String,Tekla.Structures.Drawing.Size,Tekla.Structures.Drawing.LinkAttributes)">
            <summary>
            Creates a new drawing link instance of the given size.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Size">The width and height for the link.</param>
            <param name="Attributes">The attributes for creating the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.Insert">
            <summary>
            Inserts the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.Select">
            <summary>
            Selects the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.Modify">
            <summary>
            Modifies the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingLink.Delete">
            <summary>
            Deletes the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DwgObject">
            <summary>
            The DwgObject class defines a DWG or DXF object that can be inserted into a drawing.
            </summary>
            <example>
            The following example shows how to embed a DXF file to a drawing with
            the scale 0.5:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            using System.IO;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase _view = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
            
                       EmbeddedObjectAttributes attributes = new EmbeddedObjectAttributes();
                       attributes.XScale = 0.5;
                       attributes.YScale = 0.5;
                       DwgObject dxf = new DwgObject(_view, new Point(100, 100),
                                                     Path.GetFullPath("my_dxf.dxf"), attributes);
                       dxf.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.DwgObject.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String)">
            <summary>
            Creates a new DwgObject instance with the given parameters.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="fileName">The filename to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.DwgObject.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <summary>
            Creates a new DwgObject instance using the specified attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="fileName">The filename to be used.</param>
            <param name="attributes">The attributes to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.DwgObject.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Size,System.String)">
            <summary>
            Creates a new DwgObject instance with the given parameters.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="frameSize">The frames size.</param>
            <param name="fileName">The filename to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.DwgObject.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Size,System.String,Tekla.Structures.Drawing.EmbeddedObjectAttributes)">
            <summary>
            Creates a new DwgObject instance using the specified attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="frameSize">The frames size.</param>
            <param name="fileName">The filename to be used.</param>
            <param name="attributes">The attributes to be used.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file does not exist.</exception>
        </member>
        <member name="T:Tekla.Structures.Drawing.EmbeddedObjectBase">
            <summary>
            The EmbeddedObjectBase class defines an embedded object in a drawing.
            The object refers to another file in the file system and its drawing
            representation is updated when a drawing is opened.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectBase.InsertionPoint">
            <summary>
            Gets or sets the insertion point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectBase.FileName">
            <summary>
            Gets or sets the file name defining the embedded object.
            </summary>
            <remarks>A full path should be used because the application may
            not be running with the same working directory as Tekla Structures
            (usually using \TeklaStructuresModels\ModelName).
            </remarks>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectBase.Angle">
            <summary>
            Gets or sets the angle (in degrees).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectBase.Size">
            <summary>
            Gets or sets the size of the frame of the embedded object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectBase.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.Insert">
            <summary>
            Inserts the embedded object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.Select">
            <summary>
            Selects the embedded object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.Modify">
            <summary>
            Modifies the embedded object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.Delete">
            <summary>
            Deletes the embedded object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object according to the given move vector.
            </summary>
            <param name="moveVector">The move vector to be used.</param>
            <returns>True.</returns>
            <example>
            The following example calculates a move vector from two points.
            The move vector in the example will move an object 1000 points in the +X direction.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       DwgObject exampleObject = new DwgObject(MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase,
                           new Point(100, 100), "filename");
            
                       Vector moveVector = new Vector(new Point(1000, 0) - new Point(0, 0));
                       exampleObject.MoveObjectRelative(moveVector);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.Resize(Tekla.Structures.Drawing.Size)">
            <summary>
            Resizes the object. The scaling type is changed to ScaleToFit.
            </summary>
            <param name="size">The width and height to be used.</param>
            <returns>True.</returns>
            <seealso cref="T:Tekla.Structures.Drawing.ScalingOptions"/>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.GetAxisAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in the global axis coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectBase.GetObjectAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in its local coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.EmbeddedObjectFrame">
            <summary>
            The EmbeddedObjectFrame class defines the frame object for embedded objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Width">
            <summary>
            The width of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Height">
            <summary>
            The height of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Angle">
            <summary>
            The angle of the frame (compared to X-axis)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.InsertionPoint">
            <summary>
            The InsertionPoint of the frame (CenterPoint)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Type">
            <summary>
            Gets the frame type (rectangular).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Line">
            <summary>
            Gets or sets the line type of the frame.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LineTypeAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.LineType">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.EmbeddedObjectFrame.Color">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectFrame.GetAxisAlignedBoundingBox">
            <summary>
            Returns the bounding box of the frame in the global axis coordinate system.
            </summary>
            <returns>The bounding box of the frame in the global axis coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectFrame.GetObjectAlignedBoundingBox">
            <summary>
            Returns the bounding box of the frame in the local coordinate system.
            </summary>
            <returns>The bounding box of the frame in the local coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectFrame.Initialize">
            <summary>
            Initializes the standard values for Frame
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectFrame.#ctor(Tekla.Structures.Drawing.LineTypes,Tekla.Structures.Drawing.DrawingColors)">
            <summary>
            Creates a new embedded object frame instance with the specified line type and color.
            </summary>
            <param name="LineType">The line type of the frame.</param>
            <param name="FrameColor">The color of the frame.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.EmbeddedObjectFrame.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.HyperLink">
            <summary>
            The HyperLink class defines a hyperlink object in a drawing. When a hyperlink is double
            clicked, the default browser is launched.
            </summary>
            <example>
            The following example shows how to insert a hyperlink:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase _view = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
            
                       HyperLink link = new HyperLink(_view, new Point(200, 200),
                           new Uri("http://www.tekla.com"),
                           "Link to Tekla home page");
                       link.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.HyperLink.Target">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Uri,System.String)">
            <summary>
            Creates a new hyperlink instance using standard attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Uri,System.String,Tekla.Structures.Drawing.LinkAttributes)">
            <summary>
            Creates a new hyperlink instance using the given attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Attributes">The attributes for creating the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Uri,System.String,Tekla.Structures.Drawing.Size)">
            <summary>
            Creates a new hyperlink instance using standard attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Size">The width and height for the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Uri,System.String,Tekla.Structures.Drawing.Size,Tekla.Structures.Drawing.LinkAttributes)">
            <summary>
            Creates a new hyperlink instance using the given attributes.
            </summary>
            <param name="View">A drawing view.</param>
            <param name="InsertionPoint">The location for the link.</param>
            <param name="Target">The link target.</param>
            <param name="Text">The link text visible to the user.</param>
            <param name="Size">The width and height for the link.</param>
            <param name="Attributes">The attributes for creating the link.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.Insert">
            <summary>
            Inserts the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.Select">
            <summary>
            Selects the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.Modify">
            <summary>
            Modifies the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.HyperLink.Delete">
            <summary>
            Deletes the link.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LinkBase">
            <summary>
            The LinkBase class is the base class for links.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkBase.InsertionPoint">
            <summary>
            Gets or sets the insertion point of the link.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkBase.Attributes">
            <summary>
            Gets or sets the link attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkBase.Text">
            <summary>
            Gets or sets the link text that is visible on the screen.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LinkBase.Angle">
            <summary>
            Gets or sets the angle of the link.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkBase.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object according to the given move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkBase.Resize(Tekla.Structures.Drawing.Size)">
            <summary>
            Resizes the object. The scaling type is changed to ScaleToFit.
            </summary>
            <param name="size">The width and height to be used.</param>
            <returns>True.</returns>
            <seealso cref="T:Tekla.Structures.Drawing.ScalingOptions"/>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkBase.GetAxisAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in the global axis coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LinkBase.GetObjectAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in its local coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LengthPropertyElement">
            <summary>
            The LengthPropertyElement class represents a mark element that is of Length type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LengthPropertyElement.Unit">
            <summary>
            Gets or sets the unit attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LengthPropertyElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkSet">
            <summary>
            The MarkSet class defines mark set objects that contain several mark objects merged to one mark set.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkSet.Attributes">
            <summary>
            Gets or sets the mark set attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.Insert">
            <summary>
            Mark sets cannot be inserted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">Thrown if Attributes contains values that are not supported by the object.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkSet.MarkSetAttributes">
            <summary>
            The MarkSetAttributes class is the attribute class for the mark set.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.MarkSetAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkSet.MarkSetAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file. Not implemented yet.
            </summary>
            <param name="attributeFilename">The attribute file's filename.</param>
            <returns>False always.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Mark">
            <summary>
            The Mark class represents a mark object that contains a single mark.
            Several mark objects can be merged into one mark set.
            </summary>
            <example>
            The following example enumerates through all parts in all views and inserts
            marks for all those parts, the marks are placed in the middle of the part.
            <code>
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures.Drawing;
            using TSM = Tekla.Structures.Model;
            
            class Example
            {
                public void InsertMarksForAllPartsInDrawing()
                {
                    TSM.Model MyModel = new TSM.Model();
                    DrawingHandler MyDrawingHandler = new DrawingHandler();
                    if(MyModel.GetConnectionStatus())
                    {
                        if(MyDrawingHandler.GetConnectionStatus())
                        {
                            DrawingHandler.SetMessageExecutionStatus(DrawingHandler.MessageExecutionModeEnum.INSTANT);
                            Drawing CurrentDrawing = MyDrawingHandler.GetActiveDrawing();
                            DrawingObjectEnumerator allParts = CurrentDrawing.GetSheet().GetAllObjects(typeof(Part));
                            while(allParts.MoveNext())
                            {
                                ModelObject modelObject = (ModelObject)allParts.Current;
            
                                Point PartMiddleStart = null, PartMiddleEnd = null, PartCenterPoint = null;
                                GetPartPoints(MyModel, modelObject.GetView(), modelObject, out PartMiddleStart, out PartMiddleEnd, out PartCenterPoint);
            
                                Mark Mark = new Mark(modelObject);
                                Mark.Attributes.Content.Clear();
                                Mark.Attributes.Content.Add(new TextElement("My Mark"));
                                Mark.Placing = new AlongLinePlacing(PartMiddleStart, PartMiddleEnd);
                                Mark.InsertionPoint = PartCenterPoint;
                                Mark.Insert();
                            }
                        }
                    }
                }
            
                private void GetPartPoints(TSM.Model MyModel, ViewBase PartView, ModelObject modelObject, out Point PartMiddleStart, out Point PartMiddleEnd, out Point PartCenterPoint)
                {
                    TSM.ModelObject modelPart = GetModelObjectFromDrawingModelObject(MyModel, modelObject);
                    GetModelObjectStartAndEndPoint(modelPart, (View)PartView, out PartMiddleStart, out PartMiddleEnd);
                    PartCenterPoint = GetInsertionPoint(PartMiddleStart, PartMiddleEnd);
                }
            
                private TSM.ModelObject GetModelObjectFromDrawingModelObject(TSM.Model MyModel, ModelObject PartOfMark)
                {
                    TSM.ModelObject modelObject = MyModel.SelectModelObject(PartOfMark.ModelIdentifier);
            
                    TSM.Part modelPart = (TSM.Part)modelObject;
            
                    return modelPart;
                }
            
                private void GetModelObjectStartAndEndPoint(TSM.ModelObject modelObject, View PartView, out Point PartStartPoint, out Point PartEndPoint)
                {
                    TSM.Part modelPart = (TSM.Part)modelObject;
            
                    PartStartPoint = modelPart.GetSolid().MinimumPoint;
                    PartEndPoint = modelPart.GetSolid().MaximumPoint;
            
                    Matrix convMatrix = MatrixFactory.ToCoordinateSystem(PartView.DisplayCoordinateSystem);
                    PartStartPoint = convMatrix.Transform(PartStartPoint);
                    PartEndPoint = convMatrix.Transform(PartEndPoint);
                }
            
                private Point GetInsertionPoint(Point PartStartPoint, Point PartEndPoint)
                {
                    Point MinPoint = PartStartPoint;
                    Point MaxPoint = PartEndPoint;
                    Point InsertionPoint = new Point((MaxPoint.X + MinPoint.X) * 0.5, (MaxPoint.Y + MinPoint.Y) * 0.5, (MaxPoint.Z + MinPoint.Z) * 0.5);
                    InsertionPoint.Z = 0;
                    return InsertionPoint;
                }
            }
            </code> 
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Mark.Attributes">
            <summary>
            Gets or sets the mark attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.#ctor(Tekla.Structures.Drawing.ModelObject)">
            <summary>
            Constructs a Mark that will be attached to the specified ModelObject upon Insert.
            </summary>
            <param name="modelObject">The model object that the Mark will be attached to.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">Thrown if Attributes contains values that are not supported by the object.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Mark.MarkAttributes">
            <summary>
            The MarkAttributes class defines the mark attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Mark.MarkAttributes.Content">
            <summary>
            The mark content as a list of elements.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.MarkAttributes.#ctor(Tekla.Structures.Drawing.ModelObject)">
            <summary>
            Creates a new default mark attributes instance that loads standard attributes.
            </summary>
            <param name="modelObject">The ModelObject defining the content to load.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.MarkAttributes.#ctor(Tekla.Structures.Drawing.ModelObject,System.String)">
            <summary>
            Creates a new mark attributes instance that loads the specified attributes.
            </summary>
            <param name="modelObject">The ModelObject defining the content to load.</param>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.MarkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Mark.MarkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads attributes from the attribute file.
            </summary>
            <param name="attributeFilename">The filename of the attribute file.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.AlongLinePlacing">
            <summary>
            The AlongLinePlacing class defines a placing where the object is
            located and moved along a line defined by two points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AlongLinePlacing.StartPoint">
            <summary>
            The start point of the line that the object is placed on.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AlongLinePlacing.EndPoint">
            <summary>
            The end point of the line that the object is placed on.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLinePlacing.#ctor">
            <summary>
            Construct object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLinePlacing.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new along line placing instance.
            The given two points define the line to be used for the placing.
            </summary>
            <param name="StartPoint">The first point of the line.</param>
            <param name="EndPoint">The second point of the line.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLinePlacing.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.BaseLinePlacing">
            <summary>
            The BaseLinePlacing class defines a placing where the
            object is placed using a line as a reference.
            This will thus define the object's X-axis along that line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.BaseLinePlacing.StartPoint">
            <summary>
            Sets the start point of the line that the object is using for the placement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.BaseLinePlacing.EndPoint">
            <summary>
            Sets the end point of the line that the object is using for the placement.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLinePlacing.#ctor">
            <summary>
            Construct object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLinePlacing.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new base line placing instance.
            The given two points define the line to be used for the placing.
            </summary>
            <param name="StartPoint">The first point of the line.</param>
            <param name="EndPoint">The second point of the line.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLinePlacing.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LeaderLinePlacing">
            <summary>
            The LeaderLinePlacing class defines a placing where the
            object is placed attached to a leader line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LeaderLinePlacing.StartPoint">
            <summary>
            The start point of the leader line
            (if multiple leader lines exist, only returns the first).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLinePlacing.#ctor">
            <summary>
            Construct object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLinePlacing.#ctor(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new leader line placing instance.
            The given point defines the start point of the leader line.
            </summary>
            <param name="LeaderLineStartPoint">The start point of the leader line.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLinePlacing.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingBase">
            <summary>
            The PlacingBase class is the base class for placing types.
            If you set a user defined Placing to an object it will override the PreferredPlacingType set in the object's attributes.
            Please note that not all objects accept all types.
            If you try to use the wrong type it will not be accepted (Insert, Modify will fail).
            (It is strongly recommended to use the PreferredPlacingTypes to assign new Placings to objects.)
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Point = Tekla.Structures.Geometry3d.Point;
            
            public class Example
            {
                public void Example1()
                {
                    DrawingHandler DrawHandler = new DrawingHandler();
                    Drawing CurrentDrawing = DrawHandler.GetActiveDrawing();
                    ContainerView Sheet = CurrentDrawing.GetSheet();
                    DrawingObjectEnumerator AllViews = Sheet.GetViews();
                    while(AllViews.MoveNext())
                    {
                        if(AllViews.Current is View)
                        {
                            View CurrentView = (View)AllViews.Current;
            
                            Point MyInsertionPoint = new Point(200, 400);
                            Text.TextAttributes MyTextAttributes = new Text.TextAttributes();
            
                            // Here we create one Text with a specific placing given to it.
                            // Please note that should the object be arranged (using the command Arrange Drawing Objects (Freeplace)),
                            // then it will use the PreferredPlacingType specified in the attributes (which in this case is the same).
                            MyTextAttributes.PreferredPlacing = PreferredTextPlacingTypes.LeaderLinePlacingType();
                            Text MyText = new Text(CurrentView, MyInsertionPoint, "Text with a LeaderLine.",
                                                   new LeaderLinePlacing(new Point(100, 100)), MyTextAttributes);
                            MyText.Insert();
            
                            // Here we create a text that is placed along a line with an arrow indicating the starting point of the line.
                            MyInsertionPoint = new Point(200, 600);
                            MyText = new Text(CurrentView, MyInsertionPoint, "Text with a LeaderLine.",
                                              new LeaderLinePlacing(new Point(100, 100)));
                            MyText.Insert();
                            MyText.Attributes.PreferredPlacing = PreferredTextPlacingTypes.PointPlacingType();
                            MyText.TextString = "Text will now be without a LeaderLine.";
                            MyText.Modify();
                        }
                        else
                        {
                            AllViews = ((ContainerView)AllViews.Current).GetViews();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Drawing.PlacingBase._IsUserDefinedValue">
            <summary>
            Setting this value to true will override the PreferredPlacingType with the appropriate value.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingTypes">
            <summary>
            The PlacingTypes class defines the different available placing types.
            Please note that not all objects accept all types.
            If you try to use the wrong type it will not be accepted (Insert, Modify will fail).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingTypes.AlongLinePlacing(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            The object is located and moved along a line defined by two points.
            </summary>
            <param name="StartPoint">The first point of the line.</param>
            <param name="EndPoint">The second point of the line.</param>
            <returns>A new along line placing instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingTypes.BaseLinePlacing(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            The object is placed using a line as a reference.
            This will thus define the object's X-axis along that line.
            </summary>
            <param name="StartPoint">The first point of the line.</param>
            <param name="EndPoint">The second point of the line.</param>
            <returns>A new base line placing instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingTypes.LeaderLinePlacing(Tekla.Structures.Geometry3d.Point)">
            <summary>
            The object is placed attached to a leader line.
            </summary>
            <param name="LeaderLineStartPoint">The start point of the leader line.</param>
            <returns>A new leader line placing instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingTypes.PointPlacing">
            <summary>
            The object is placed at one point (the insertion point) without any additional placing options.
            </summary>
            <returns>A new point placing instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PointPlacing">
            <summary>
            The PointPlacing class defines a placing where the object is placed at
            one point (the insertion point) without any additional placing options.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointPlacing.#ctor">
            <summary>
            Creates a new point placing instance.
            The value used for the placing is the parent object's insertion point in this case.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointPlacing.#ctor(System.Boolean)">
            <summary>
            FOR INTERNAL USAGE!!!
            Use Force = false to not override the PreferredPlacingType value.
            Construct PointPlacing type.
            The value used for placing is the Parent Objects InsertionPoint in this case.
            </summary>
            <param name="Force">If true then forces the placing type to PointPlacing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointPlacing.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.AlongLinePlacingType">
            <summary>
            The AlongLinePlacingType class defines a placing type that
            places the object using the along line placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLinePlacingType.#ctor">
            <summary>
            Creates a new along line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.BaseLineWithArrowAtStartPointPlacingType">
            <summary>
            The BaseLineWithArrowAtStartPointPlacingType class defines a
            placing type that places the object using the base line placing.
            The line is drawn and will have an arrow at the start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLineWithArrowAtStartPointPlacingType.#ctor">
            <summary>
            Creates a new base line with arrow at start point placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.BaseLinePlacingType">
            <summary>
            The BaseLinePlacingType class defines a placing type that
            places the object using the base line placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLinePlacingType.#ctor">
            <summary>
            Creates a new base line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AlongLineOrWithLeaderLinePlacingType">
            <summary>
            The AlongLineOrWithLeaderLinePlacingType class defines a placing type that
            places the object using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLineOrWithLeaderLinePlacingType.#ctor">
            <summary>
            Creates a new along line or with leader line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.BaseLineWithArrowAtEndPointPlacingType">
            <summary>
            The BaseLineWithArrowAtEndPointPlacingType class defines a
            placing type that places the object using the base line placing.
            The line is drawn and will have an arrow at the end point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.BaseLineWithArrowAtEndPointPlacingType.#ctor">
            <summary>
            Creates a new base line with arrow at end point placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AlongLineOrWithLeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The AlongLineOrWithLeaderLineAndParentObjectAlongPartPlacingType class defines
            a placing type that places the object using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line and rotated to be at the
            same angle as the connected part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongLineOrWithLeaderLineAndParentObjectAlongPartPlacingType.#ctor">
            <summary>
            Creates a new along line or with leader line and parent object along part placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The LeaderLineAndParentObjectAlongPartPlacingType class defines a placing type that places
            the object with a leader line and rotated to be at the same angle as the connected part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLineAndParentObjectAlongPartPlacingType.#ctor">
            <summary>
            Creates a new leader line and parent object along part placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InsidePartAlongPartOrWithLeaderLinePlacingType">
            <summary>
            The InsidePartAlongPartOrWithLeaderLinePlacingType class defines a placing
            type that places the object using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InsidePartAlongPartOrWithLeaderLinePlacingType.#ctor">
            <summary>
            Creates a new inside part along part or with leader line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InsidePartHorizontalOrWithLeaderLinePlacingType">
            <summary>
            The InsidePartHorizontalOrWithLeaderLinePlacingType class defines a placing
            type that places the object using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InsidePartHorizontalOrWithLeaderLinePlacingType.#ctor">
            <summary>
            Creates a new inside part horizontal or with leader line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LeaderLinePlacingType">
            <summary>
            The LeaderLinePlacingType class defines a placing type that places the object with a leader line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLinePlacingType.#ctor">
            <summary>
            Creates a new leader line placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AlongPartCenteredPlacingType">
            <summary>
            The AlongPartCenteredPlacingType class defines a placing type
            that places the object using the along line placing.
            The line used will be the part's edge in the center of that line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AlongPartCenteredPlacingType.#ctor">
            <summary>
            Creates a new along part centered placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InsidePartAlongPartPlacingType">
            <summary>
            The InsidePartAlongPartPlacingType class defines a placing type that 
            places the object using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InsidePartAlongPartPlacingType.#ctor">
            <summary>
            Creates a new inside part along part placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InsidePartHorizontalPlacingType">
            <summary>
            The InsidePartHorizontalPlacingType class defines a placing type that
            places the object using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InsidePartHorizontalPlacingType.#ctor">
            <summary>
            Creates a new inside part horizontal placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PointPlacingType">
            <summary>
            The PointPlacingType class defines a placing type where the object is placed
            at one point (the insertion point) without any additional placing options.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointPlacingType.#ctor">
            <summary>
            Creates a new point placing type instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PreferredPlacingTypeBase">
            <summary>
            The PreferredPlacingTypeBase class is the base class for the preferred placing type.
            You can set the PreferredPlacingType in the object's attributes to specify how your object should be placed in the drawing.
            Please note that not all objects accept all types.
            If you try to use the wrong type it will not be accepted (Insert, Modify will fail).
            To use valid types you should use the named defaults
            (PreferredTextPlacingTypes for Text, PreferredMarkPlacingTypes for Mark, PreferredSymbolPlacingTypes for Symbol).
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Point = Tekla.Structures.Geometry3d.Point;
            
            public class Example
            {
                public void Example1()
                {
                    DrawingHandler DrawHandler = new DrawingHandler();
                    Drawing CurrentDrawing = DrawHandler.GetActiveDrawing();
                    ContainerView Sheet = CurrentDrawing.GetSheet();
                    DrawingObjectEnumerator AllViews = Sheet.GetViews();
                    if(AllViews.MoveNext())
                    {
                        View CurrentView = (View)AllViews.Current;
            
                        Point MyInsertionPoint = new Point(200, 400);
                        Text.TextAttributes MyTextAttributes = new Text.TextAttributes();
            
                        // Here we create one Text with a preferred placing type indicating we want the text to have a LeaderLine.
                        // Please note that should the object be arranged (using the command Arrange Drawing Objects (Freeplace)),
                        // then it will still find a place along a leader line.
                        MyTextAttributes.PreferredPlacing = PreferredTextPlacingTypes.LeaderLinePlacingType();
                        Text MyText = new Text(CurrentView, MyInsertionPoint, "Text with a LeaderLine.", MyTextAttributes);
                        MyText.Insert();
            
                        // Here we create a text that is placed along a line with an arrow indicating the starting point of the line.
                        MyTextAttributes.ArrowHead.Head = ArrowheadTypes.FilledArrow;
                        MyTextAttributes.PreferredPlacing = PreferredTextPlacingTypes.BaseLineWithArrowAtStartPointPlacingType();
                        MyText = new Text(CurrentView, MyInsertionPoint, "Text placed along a line with an arrow at the start point.", MyTextAttributes);
                        MyText.Insert();
            
                        // Let's try something different, going through all the marks in the drawing assigning PreferredPlacingTypes to all of them.
                        DrawingObjectEnumerator AllObjectsInView = CurrentView.GetAllObjects();
                        while(AllObjectsInView.MoveNext())
                        {
                            if(AllObjectsInView.Current is MarkBase)
                            {
                                MarkBase CurrentMark = (MarkBase)AllObjectsInView.Current;
            
                                // Next the default preferred placing type is set to be AlongLineOrWithLeaderLinePlacingType.
                                // This means that the mark will first try to place itself along the parent object, however if there is not enough room,
                                // it will place itself along a leader line instead.
                                CurrentMark.Attributes.PreferredPlacing = PreferredMarkPlacingTypes.AlongLineOrWithLeaderLinePlacingType();
                                CurrentMark.Modify();
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.PreferredPlacingTypes">
            <summary>
            The PreferredPlacingTypes class contains all the available preferred placing types.
            Please note that not all objects accept all types.
            If you try to use the wrong type it will not be accepted (Insert, Modify will fail).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.PointPlacingType">
            <summary>
            The object is placed at one point (the insertion point) without any additional placing options.
            </summary>
            <returns>A new point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.BaseLinePlacingType">
            <summary>
            The object is placed using the base line placing.
            </summary>
            <returns>A new base line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.BaseLineWithArrowAtStartPointPlacingType">
            <summary>
            The object is placed using the base line placing.
            The line is drawn and will have an arrow at the start point.
            </summary>
            <returns>A new base line with arrow at start point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.BaseLineWithArrowAtEndPointPlacingType">
            <summary>
            The object is placed using the base line placing.
            The line is drawn and will have an arrow at the end point.
            </summary>
            <returns>A new base line with arrow at end point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.AlongLinePlacingType">
            <summary>
            The object is placed using the along line placing.
            </summary>
            <returns>A new along line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.AlongLineOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            </summary>
            <returns>A new along line or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.AlongLineOrWithLeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The object is placed using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line and rotated to be at the same angle as the connected part.
            </summary>
            <returns>A new along line or with leader line and parent object along part placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.AlongPartCenteredPlacingType">
            <summary>
            The object is placed using the along line placing.
            The line used will be the part's edge in the center of that line.
            </summary>
            <returns>A new along part centered placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.InsidePartAlongPartPlacingType">
            <summary>
            The object is placed using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
            <returns>A new inside part along part placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.InsidePartAlongPartOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
            <returns>A new inside part along part or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.InsidePartHorizontalPlacingType">
            <summary>
            The object is placed using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
            <returns>A new inside part horizontal placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.InsidePartHorizontalOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
            <returns>A new inside part horizontal or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.LeaderLinePlacingType">
            <summary>
            The object is placed with a leader line.
            </summary>
            <returns>A new leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredPlacingTypes.LeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The object is placed with a leader line and rotated to be at the same angle as the connected part.
            </summary>
            <returns>A new leader line and parent object along part placing type instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PreferredTextPlacingTypes">
            <summary>
            The PreferredTextPlacingTypes class contains the available preferred text placing types.
            These are allowed to be used for texts.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.PointPlacingType">
            <summary>
            The object is placed at one point (the insertion point) without any additional placing options.
            </summary>
            <returns>A new point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.LeaderLinePlacingType">
            <summary>
            The object is placed with a leader line.
            </summary>
            <returns>A new leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.AlongLinePlacingType">
            <summary>
            The object is placed using the along line placing.
            </summary>
            <returns>A new along line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.BaseLinePlacingType">
            <summary>
            The object is placed using the base line placing.
            </summary>
            <returns>A new base line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.BaseLineWithArrowAtStartPointPlacingType">
            <summary>
            The object is placed using the base line placing.
            The line is drawn and will have an arrow at the start point.
            </summary>
            <returns>A new base line with arrow at start point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredTextPlacingTypes.BaseLineWithArrowAtEndPointPlacingType">
            <summary>
            The object is placed using the base line placing.
            The line is drawn and will have an arrow at the end point.
            </summary>
            <returns>A new base line with arrow at end point placing type instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PreferredSymbolPlacingTypes">
            <summary>
            The PreferredSymbolPlacingTypes class contains the available preferred symbol placing types.
            These are allowed to be used for symbols.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredSymbolPlacingTypes.PointPlacingType">
            <summary>
            The object is placed at one point (the insertion point) without any additional placing options.
            </summary>
            <returns>A new point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredSymbolPlacingTypes.LeaderLinePlacingType">
            <summary>
            The object is placed with a leader line.
            </summary>
            <returns>A new leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredSymbolPlacingTypes.AlongLinePlacingType">
            <summary>
            The object is placed using the along line placing.
            </summary>
            <returns>A new along line placing type instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PreferredMarkPlacingTypes">
            <summary>
            The PreferredMarkPlacingTypes class contains the available preferred mark placing types.
            These are allowed to be used for marks.
            However, there are different mark types and not all types can be used by all marks.
            If you try to use the wrong type it will not be accepted (Insert, Modify will fail).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.PointPlacingType">
            <summary>
            The object is placed at one point (the insertion point) without any additional placing options.
            </summary>
            <returns>A new point placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.AlongLinePlacingType">
            <summary>
            The object is placed using the along line placing.
            </summary>
            <returns>A new along line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.AlongLineOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            </summary>
            <returns>A new along line or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.AlongLineOrWithLeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The object is placed using the along line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line and rotated to be at the same angle as the connected part.
            </summary>
            <returns>A new along line or with leader line and parent object along part placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.AlongPartCenteredPlacingType">
            <summary>
            The object is placed using the along line placing.
            The line used will be the part's edge in the center of that line.
            </summary>
            <returns>A new along part centered placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.InsidePartAlongPartPlacingType">
            <summary>
            The object is placed using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
            <returns>A new inside part along part placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.InsidePartAlongPartOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            </summary>
            <returns>A new inside part along part or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.InsidePartHorizontalPlacingType">
            <summary>
            The object is placed using the base line placing.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
            <returns>A new inside part horizontal placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.InsidePartHorizontalOrWithLeaderLinePlacingType">
            <summary>
            The object is placed using the base line placing as the first option.
            If there is no room for the first option the fallback option will be used.
            The fallback option is placing the object with a leader line.
            The base line used is in the middle of the part, aligned with the part.
            In addition the object will be rotated to be horizontal in the drawing.
            </summary>
            <returns>A new inside part horizontal or with leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.LeaderLinePlacingType">
            <summary>
            The object is placed with a leader line.
            </summary>
            <returns>A new leader line placing type instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PreferredMarkPlacingTypes.LeaderLineAndParentObjectAlongPartPlacingType">
            <summary>
            The object is placed with a leader line and rotated to be at the same angle as the connected part.
            </summary>
            <returns>A new leader line and parent object along part placing type instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PluginPickerInput">
            <summary>
            The PluginPickerInput class represents a predefined set of picker inputs that can be provided
            to a plug-in object. It replaces the interactive selection of points and/or objects by the user
            when the plug-in is inserted into a drawing through the API.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PluginPickerInput.Inputs">
            <summary>
            Gets or sets the picker inputs.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInput.#ctor">
            <summary>
            Initializes a new instance of the PluginPickerInput class with an empty list of picker inputs.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInput.#ctor(System.Collections.Generic.List{Tekla.Structures.Drawing.PickerInput})">
            <summary>
            Initializes a new instance of the PluginPickerInput class which contains a predefined sequence
            of inputs.
            </summary>
            <param name="inputs">The sequence of picker inputs.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInput.Add(Tekla.Structures.Drawing.PickerInput)">
            <summary>
            Appends a picker input to the plug-in input.
            </summary>
            <param name="input">The picker input to append.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInput.AddRange(System.Collections.Generic.List{Tekla.Structures.Drawing.PickerInput})">
            <summary>
            Appends several picker inputs to the picker input sequence.
            </summary>
            <param name="inputs">
            All elements of the collection passed in the parameter will be appended in the same order
            to the plug-in input.
            </param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInput">
            <summary>
            The PickerInput class instances can be provided as predefined results of requests through the
            methods of the UI.Picker class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInput.Type">
            <summary>
            The type of the picker input, identifying the most derived PickerInput class of this instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.PickerInput"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e">
            <summary>
            The possible types of derived PickerInput instances.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_INVALID">
            <summary>
            The type is invalid object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_ONE_POINT">
            <summary>
            The type is PickerInputPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_TWO_POINTS">
            <summary>
            The type is PickerInputTwoPoints.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_THREE_POINTS">
            <summary>
            The type is PickerInputThreePoints.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_N_POINTS">
            <summary>
            The type is PickerInputNPoints.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_OBJECT">
            <summary>
            The type is PickerInputObject.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_OBJECT_AND_POINT">
            <summary>
            The type is PickerInputObjectAndAPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PickerInput.PickerInputTypes_e.PICKER_INPUT_INTERRUPT">
            <summary>
            The type is PickerInputInterrupt.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInput.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputWithinAView">
            <summary>
            The PickerInputWithinAView class is the base class of PickerInput instances that represent
            a valid pick of point(s) or object(s) in a view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputWithinAView.PickedView">
            <summary>
            The view within which the pick occurred.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputWithinAView.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputWithinAView.#ctor">
            <summary>
            Default constructor for PickerInput derived classes for which PickedView is not known at
            construction time. Do not use if the view is known - prefer the 
            PickerInputWithinAView(ViewBase view) constructor.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputWithinAView.#ctor(Tekla.Structures.Drawing.ViewBase)">
            <summary>
            The base constructor for PickerInput derived classes representing picks in a view.
            </summary>
            <param name="view">The view where the pick occurred.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputPointsWithinAView">
            <summary>
            The PickerInputPointsWithinAView class is the base class of PickerInput instances that represent
            a pick of one or more points in a view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputPointsWithinAView.PickedPoints">
            <summary>
            Gets or sets the picked points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputPointsWithinAView.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputPointsWithinAView.#ctor(Tekla.Structures.Drawing.ViewBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.PickerInputPointsWithinAView"/> class.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputPointsWithinAView.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a new PickerInputPointsWithinAView instance representing N points selected in a view.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="pickedPoints">The list of picked points in the view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputPoint">
            <summary>
            The PickerInputPoint class represents a pick of one point in a view.
            Used for values asked by UI.Picker.PickPoint(string Prompt, out Point PickedPoint, out ViewBase PickedView).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputPoint.PickedPoint">
            <summary>
            The picked point in the view coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputPoint.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputPoint.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new PickerInputPoint instance with one point selected in a view.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="pickedPoint">The picked point in the view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputTwoPoints">
            <summary>
            The PickerInputTwoPoints class represents a pick of two points in a view.
            Used for values asked by UI.Picker.PickTwoPoints(string FirstPrompt, string SecondPrompt, out Point FirstPickedPoint, out Point SecondPickedPoint, out ViewBase PickedView).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputTwoPoints.FirstPickedPoint">
            <summary>
            The first picked point in the view coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputTwoPoints.SecondPickedPoint">
            <summary>
            The second picked point in the view coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputTwoPoints.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputTwoPoints.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new PickerInputTwoPoints instance with two points selected in a view.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="firstPickedPoint">The first picked point in the view coordinates.</param>
            <param name="secondPickedPoint">The second picked point in the view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputThreePoints">
            <summary>
            The PickerInputThreePoints class represents a pick of three points in a view.
            Used for values asked by UI.Picker.PickThreePoints(string FirstPrompt, string SecondPrompt, string ThirdPrompt, out Point FirstPickedPoint, out Point SecondPickedPoint, out Point ThirdPickedPoint, out ViewBase PickedView).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputThreePoints.FirstPickedPoint">
            <summary>
            The first picked point in the view coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputThreePoints.SecondPickedPoint">
            <summary>
            The second picked point in the view coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputThreePoints.ThirdPickedPoint">
            <summary>
            The third picked point in the view coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputThreePoints.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputThreePoints.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new PickerInputThreePoints instance with one point selected in a view.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="firstPickedPoint">The first picked point in the view coordinates.</param>
            <param name="secondPickedPoint">The second picked point in the view coordinates.</param>
            <param name="thirdPickedPoint">The third picked point in the view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputNPoints">
            <summary>
            The PickerInputNPoints class represents a pick of several points in a view.
            Used for values asked by UI.Picker.PickPoints(StringList Prompts, out PointList PickedPoints, out ViewBase PickedView) and
            UI.Picker.PickPoints(int NumberOfPicks, StringList Prompts, out PointList PickedPoints, out ViewBase PickedView).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputNPoints.PickedPoints">
            <summary>
            Gets or sets the list of picked points in the view coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputNPoints.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a new PickerInputNPoints instance representing N points selected in a view.
            </summary>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="pickedPoints">The list of picked points in the view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputObject">
            <summary>
            The PickerInputObject class represents a pick of an object in a view.
            Used for values asked by UI.Picker.PickObject(string Prompt, out DrawingObject PickedObject, out ViewBase PickedView).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputObject.PickedObject">
            <summary>
            Gets or sets the picked object in the view.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputObject.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputObject.#ctor(Tekla.Structures.Drawing.DrawingObject)">
            <summary>
            Creates a new PickerInputObject instance representing the pick of a drawing object in a view.
            </summary>
            <param name="pickedObject">The picked drawing object.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputObjectAndAPoint">
            <summary>
            The PickerInputObjectAndAPoint class represents a pick of an object in a view.
            It provides both the picked object and the point used to pick the object.
            Used for values asked by UI.Picker.PickObject(string Prompt, out DrawingObject PickedObject, out ViewBase PickedView, out Point PickedPoint).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PickerInputObjectAndAPoint.PickedPoint">
            <summary>
            Gets or sets the picked point in the view coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputObjectAndAPoint.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputObjectAndAPoint.#ctor(Tekla.Structures.Drawing.DrawingObject,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new PickerInputObjectAndAPoint instance representing the pick of a drawing object and
            the coordinates of the point used to pick the object.
            </summary>
            <param name="pickedObject">The picked drawing object.</param>
            <param name="pickedPoint">The picked point in the picked object view coordinates.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInputInterrupt">
            <summary>
            The PickerInputInterrupt class represents the interruption of picking by the user (e.g. by
            pressing Escape while requested to pick points).
            Used for values asked by any UI.Picker.Pick* method where an interrupt happens by the user.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputInterrupt.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInputInterrupt.#ctor">
            <summary>
            Creates a new PickerInputInterrupt instance representing the interruption of picking by the user.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PluginPickerInputSerializer">
            <summary>
            Class dedicated to serialize and transport a PluginPickerInput from .NET to core
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PluginPickerInputSerializer._ListOfTypes">
            <summary>
            List of Inputs.Count PickerInputTypes_e that contains the type of each PickerInput in Inputs
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PluginPickerInputSerializer._ListOfViewIdentifiers">
            <summary>
            List of Inputs.Count Identifiers that contains the PickedView identifier of each contained PickerInput
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PluginPickerInputSerializer._ListOfSizesOfPointLists">
            <summary>
            List of Inputs.Count integers that describes how many points each contained PickerInput contains
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PluginPickerInputSerializer._ListOfPoints">
            <summary>
            Variable size list that concatenates all the points used in all PickerInputs of this PluginPickerInput which pick some points
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.PluginPickerInputSerializer._ListOfObjectIdentifiers">
            <summary>
            Variable size list that concatenates all the objects used in all PickerInputs of this PluginPickerInput which pick an object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.#ctor(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            Creates a new instance of class PluginPickedInputSerializer which is a serialized representation of a PluginInput
            </summary>
            <param name="PluginInput">PluginPickerInput instance to serialize in this PluginPickerInputSerializer</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.Export">
            <summary>
            Export serialized instance from .NET to core
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.GetListOfTypes(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            List of PluginInput.Inputs.Count PickerInputTypes_e that contains the type of each PickerInput in Inputs
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.GetListOfViewIdentifiers(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            List of PluginInput.Inputs.Count Identifiers that contains the PickedView identifier of each contained PickerInput
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.GetListOfSizesOfPointLists(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            List of PluginInput.Inputs.Count integers that describes how many points each contained PickerInput contains
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.GetListOfPoints(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            Variable size list that concatenates all the points used in all PickerInputs of this PluginPickerInput which pick some points
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PluginPickerInputSerializer.GetListOfObjectIdentifiers(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            Variable size list that concatenates all the objects used in all PickerInputs of this PluginPickerInput which pick an object
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Plugin">
            <summary>
            The Plugin class represents a drawing plug-in.
            </summary>
            <example>
            The following example demonstrates how to insert a plug-in into a view.
            The plug-in used in this example is the Center of gravity dimensions plug-in (COGDimensioning).
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                public void Example1()
                {
                    DrawingHandler MyDrawingHandler = new DrawingHandler();
                    DrawingObjectEnumerator allViews = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                    allViews.MoveNext();
                    ViewBase curView = allViews.Current as ViewBase;
            
                    Plugin myPlugin = new Plugin(curView, "COGDimensioning");
            
                    PluginPickerInput newPluginInput = new PluginPickerInput();
                    newPluginInput.Add(new PickerInputPoint(curView, new Point(100, 200)));
                    newPluginInput.Add(new PickerInputPoint(curView, new Point(300, 400)));
                    myPlugin.SetPickerInput(newPluginInput);
            
                    myPlugin.Insert(); // Inserts the plug-in, the plug-in's DefineInput method's UI.Picker calls will use the given data above.
                    // After the Insert returns the Plugin is inserted into the drawing view.
                    // Alternatively, if there are some errors during the insertion of the plug-in,
                    // exceptions may be thrown or the return value of Insert will be false.
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Plugin.Name">
            <summary>
            Gets the name of the plug-in.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if the names of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.#ctor">
            <summary>
            Create an instance of the object with empty content.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.#ctor(Tekla.Structures.Drawing.ViewBase,System.String)">
            <summary>
            Creates a new plug-in instance.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="Name">The plug-in name to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.SetPickerInput(Tekla.Structures.Drawing.PluginPickerInput)">
            <summary>
            Defines the sequence of inputs to use in place of interactive picks when the plug-in is inserted to a drawing.
            </summary>
            <param name="Input">The sequence of picks to provide to the plug-in at insertion.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.WaitInPluginQueue">
            <summary>
            Block thread while define input is running.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.Delete">
            <summary>
            Deletes the plug-in from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.Select">
            <summary>
            Selects the plug-in from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.Modify">
            <summary>
            Modifies the plug-in in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.Insert">
            <summary>
            Inserts the plug-in into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.ApplyStandardValues(System.String)">
            <summary>
            Applies the values of the specified file as the default values for the dialog belonging to this plug-in.
            This will affect each Insert call of the plug-ins with the same name.
            </summary>
            <param name="Filename">The short name of the file containing the attributes.</param>
            <returns>True on success. Otherwise, false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.LoadStandardValues(System.String)">
            <summary>
            Sets the values from the specified file to this plug-in.
            </summary>
            <param name="Filename">The short name of the file containing the attributes.</param>
            <returns>True on success. Otherwise, false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TrySetAttribute(System.String,System.Int32)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <returns>True on success. Otherwise, false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TrySetAttribute(System.String,System.String)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <returns>True on success. Otherwise, false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TrySetAttribute(System.String,System.Double)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <returns>True on success. Otherwise, false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.SetAttribute(System.String,System.Int32)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginException">
            Thrown when setting the attribute to the plug-in failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException">
            Thrown when setting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToInexistantFieldException">
            Thrown when setting the value of an inexistent field.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.SetAttribute(System.String,System.Double)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginException">
            Thrown when setting the attribute to the plug-in failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException">
            Thrown when setting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToInexistantFieldException">
            Thrown when setting the value of an inexistent field.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.SetAttribute(System.String,System.String)">
            <summary>
            Sets the specified attribute of the plug-in to the given value.
            NOTE! Only works on already inserted plug-ins.
            </summary>
            <param name="FieldName">The name of the attribute to set.</param>
            <param name="fieldValue">The value for the attribute.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginException">
            Thrown when setting the attribute to the plug-in failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException">
            Thrown when setting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToInexistantFieldException">
            Thrown when setting the value of an inexistent field.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TryGetAttribute(System.String,System.Int32@)">
            <summary>
            Gets the value of the specified int attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <param name="FieldValue">The value of the attribute.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.GetIntAttribute(System.String)">
            <summary>
            Gets the value of the specified int attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginException">
            Thrown when the getting of the attribute failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException">
            Thrown when getting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToInexistantFieldException">
            Thrown when getting the value of an inexistent field.
            </exception>
            <returns>The value of the attribute, or 0 if the plug-in does not have such an attribute.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TryGetAttribute(System.String,System.Double@)">
            <summary>
            Gets the value of the specified double attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <param name="FieldValue">The value of the attribute.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.GetDoubleAttribute(System.String)">
            <summary>
            Gets the value of the specified double attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginException">
            Thrown when the getting of the attribute failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException">
            Thrown when getting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToInexistantFieldException">
            Thrown when getting the value of an inexistent field.
            </exception>
            <returns>The value of the attribute, or 0 if the plug-in does not have such an attribute.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.TryGetAttribute(System.String,System.String@)">
            <summary>
            Gets the value of the specified string attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <param name="FieldValue">The value of the attribute.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Plugin.GetStringAttribute(System.String)">
            <summary>
            Gets the value of the specified string attribute of the plug-in.
            </summary>
            <param name="FieldName">The name of the attribute to get.</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginException">
            Thrown when the getting of the attribute failed for an unknown reason
            (might indicate an invalid plug-in name).
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException">
            Thrown when getting a value with an invalid type for the specified field.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToInexistantFieldException">
            Thrown when getting the value of an inexistent field.
            </exception>
            <returns>The value of the attribute, or an empty string if the plug-in does not have such an attribute.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TextFile">
            <summary>
            The TextFile class defines a text file object in a drawing.
            </summary>
            <example>
            The following example shows how to insert a text file object:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            using System.IO;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase _sheet = MyDrawingHandler.GetActiveDrawing().GetSheet();
            
                       TextFile text = new TextFile(_sheet, new Point(-300, 100), Path.GetFullPath("my_text.txt"));
                       text.Insert();
                   }
            }
            </code>
            The following code inserts an object whose height is forced to 400 and width to 500, but
            it can overflow if the text is too long.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            using System.IO;
            
            public class Example
            {
                   public void Example1()
                   {
                       Drawing myDrawing = new GADrawing();
            
                       TextFile text = new TextFile(myDrawing.GetSheet(), new Point(-300, 100),
                           Path.GetFullPath("my_text.txt"), new Size(500, 400));
                       text.Insert();
                   }
            }
            </code>
            </example>
            <remarks>
            A text file object can be inserted as-is without scaling or it can be forced
            to fit inside the given space. The content is scaled in the Y direction, but it can overflow
            in the X direction.
            </remarks>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextFile.Attributes">
            <summary>
            Gets or sets the text file attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.Size)">
            <summary>
            Creates a new text file instance using standard attributes.
            </summary>
            <param name="view">The view for the object.</param>
            <param name="insertionPoint">The location of the object.</param>
            <param name="fileName">The name of the referenced text file.</param>
            <param name="size">The maximum height of the text file object.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.Size,Tekla.Structures.Drawing.TextFile.TextFileAttributes)">
            <summary>
            Creates a new text file instance using specific attributes.
            </summary>
            <param name="view">The view for the object.</param>
            <param name="insertionPoint">The location of the object.</param>
            <param name="fileName">The name of the referenced text file.</param>
            <param name="size">The maximum height of the text file object.</param>
            <param name="attributes">The text file attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String)">
            <summary>
            Creates a new text file instance using standard attributes.
            </summary>
            <param name="view">The view for the object.</param>
            <param name="insertionPoint">The location of the object.</param>
            <param name="fileName">The name of the referenced text file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.TextFile.TextFileAttributes)">
            <summary>
            Creates a new text file instance using specific attributes.
            </summary>
            <param name="view">The view for the object.</param>
            <param name="insertionPoint">The location of the object.</param>
            <param name="fileName">The name of the referenced text file.</param>
            <param name="attributes">The text file attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.Insert">
            <summary>
            Inserts the text file object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.Select">
            <summary>
            Selects the text file object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.Modify">
            <summary>
            Modifies the text file object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.Delete">
            <summary>
            Deletes the text file object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TextFile.TextFileAttributes">
            <summary>
            The TextFileAttributes class contains the attributes for the text file object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextFile.TextFileAttributes.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.FontAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextFile.TextFileAttributes.Line">
            <summary>
            Gets or sets the line type.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LineTypeAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextFile.TextFileAttributes.LineType">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextFile.TextFileAttributes.Scaling">
            <summary>
            Gets or sets the scaling.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.ScalingOptions"/>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.TextFileAttributes.#ctor">
            <summary>
            Creates a new text file attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.TextFileAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextFile.TextFileAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedSectionMark">
            <summary>
            The CurvedSectionMark class defines a drawing object that illustrates a curved section in a specific view.
            In contrast to straight section mark, the curved section mark can only be inserted as a result of 
            creating a curved section view.
            </summary>
            <example>
            The following code modifies a curved section mark in the current drawing:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class CurvedSectionMarkExample
            {
                public void CurvedSectionMarkModify()
                {
                    DrawingHandler myDrawingHandler = new DrawingHandler();
                    DrawingObjectSelector dos = myDrawingHandler.GetDrawingObjectSelector();
                    DrawingObjectEnumerator allObjectsOnSheet = dos.GetSelected();
                    while (allObjectsOnSheet.MoveNext())
                    {
                        if (allObjectsOnSheet.Current is Tekla.Structures.Drawing.CurvedSectionMark)
                        {
                            CurvedSectionMark sectionMark = allObjectsOnSheet.Current as Tekla.Structures.Drawing.CurvedSectionMark;
                            sectionMark.Attributes.LineWidthOffsetLeft = 5;
                            sectionMark.Attributes.LineWidthOffsetRight = 5;
                            sectionMark.Modify();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedSectionMark.MiddlePoint">
            <summary>
            The middle arc point of a curved section mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedSectionMark.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DetailMark">
             <summary>
             The DetailMark class defines a drawing object that illustrates a detail in a specific view.
             </summary>
             <example>
             The following code inserts a new detail mark in the current drawing:
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
             
             public class DetailMarkExample
             {
                 public void DetailMarkInsert()
                 {
                     DrawingHandler myDrawingHandler = new DrawingHandler();
                     if (myDrawingHandler.GetConnectionStatus())
                     {
                         DrawingObjectEnumerator viewsEnumerator = myDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                         View view = null;
                         if (viewsEnumerator.MoveNext())
                             view = viewsEnumerator.Current as View;
            
                         if (view != null)
                         {
                             DetailMark detailMark = new DetailMark(view, new Point(50, 100), new Point(100, 150), new Point(200, 200));
                             detailMark.Insert();
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.CenterPoint">
            <summary>
            The center point of the mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.BoundaryPoint">
            <summary>
            The boundary point of the mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.LabelPoint">
            <summary>
            The label point of the mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.Attributes">
            <summary>
            The attributes for the detail mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.#ctor(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new detail mark instance with the given positions.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="centerPoint">The center point to be used.</param>
            <param name="boundaryPoint">The boundary point to be used.</param>
            <param name="labelPoint">The label point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.#ctor(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes)">
            <summary>
            Creates a new detail mark instance with the given positions and attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="centerPoint">The center point to be used.</param>
            <param name="boundaryPoint">The boundary point to be used.</param>
            <param name="labelPoint">The label point to be used.</param>
            <param name="detailMarkAttributes">The detail mark attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Call TS and perform database operation specified in OperationType.
            </summary>
            <param name="OperationType">The type of the operation.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.Delete">
            <summary>
            Deletes the detail mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.Modify">
            <summary>
            Modifies the detail mark in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.Insert">
            <summary>
            Inserts the detail mark into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.Select">
            <summary>
            Selects the detail mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes">
            <summary>
            The DetailMarkAttributes class is the attributes class for detail marks.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.MarkName">
            <summary>
            The detail mark name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.BoundingLine">
            <summary>
            Gets or sets the line type.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LineTypeAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.BoundaryShape">
            <summary>
            The detail mark boundary shape.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.MarkSymbolColor">
            <summary>
            The detail mark symbol color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.MarkSymbolAttributes">
            <summary>
            The detail mark symbol attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.TagsAttributes">
            <summary>
            The attributes for detail mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.BoundaryLineType">
            <obsolete>Deprecated, use BoundingLine instead</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.BoundaryLineColor">
            <obsolete>Deprecated, use BoundingLine instead</obsolete>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.#ctor">
            <summary>
            Creates a new default DetailMarkAttributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.#ctor(System.String)">
            <summary>
            Creates a new DetailMarkAttributes instance that loads the specified attributes.
            </summary>
            <param name="attributesFile">The attributes file's filename.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.DetailBoundaryShape">
            <summary>
            The boundary shapes of the detail mark.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.DetailBoundaryShape.None">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.DetailBoundaryShape.Circular">
            <summary>
            The circular shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.DetailBoundaryShape.Rectangular">
            <summary>
            The rectangular shape.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DetailMarkTagsAttributes">
            <summary>
            The DetailMarkTagsAttributes class contains attributes for detail mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMarkTagsAttributes.TagA1">
            <summary>
            The tag A1 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMarkTagsAttributes.TagA2">
            <summary>
            The tag A2 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMarkTagsAttributes.TagA3">
            <summary>
            The tag A3 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMarkTagsAttributes.TagA4">
            <summary>
            The tag A4 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DetailMarkTagsAttributes.TagA5">
            <summary>
            The tag A5 of a mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMarkTagsAttributes.#ctor">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMarkTagsAttributes.#ctor(Tekla.Structures.Drawing.ViewMarkBasicTagAttributes,Tekla.Structures.Drawing.ViewMarkBasicTagAttributes,Tekla.Structures.Drawing.ViewMarkBasicTagAttributes,Tekla.Structures.Drawing.ViewMarkBasicTagAttributes,Tekla.Structures.Drawing.ViewMarkBasicTagAttributes)">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
            <param name="tagA1">The tag at place A1.</param>
            <param name="tagA2">The tag at place A2.</param>
            <param name="tagA3">The tag at place A3.</param>
            <param name="tagA4">The tag at place A4.</param>
            <param name="tagA5">The tag at place A5.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DetailMarkTagsAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DetailMarkSymbolAttributes">
            <summary>
            The DetailMarkSymbolAttributes class is for detail mark attributes related to the shape of
            the connecting symbol.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMark">
             <summary>
             The SectionMark class defines a drawing object that illustrates a straight section in a specific view.
             </summary>
             <example>
             The following code inserts a new section mark in the current drawing:
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
             
             public class SectionMarkExample
             {
                 public void SectionMarkInsert()
                 {
                     DrawingHandler myDrawingHandler = new DrawingHandler();
                     DrawingObjectEnumerator viewsEnumerator = myDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                     View view = null;
                     if (viewsEnumerator.MoveNext())
                         view = viewsEnumerator.Current as View;
            
                     if (view != null)
                     {
                         SectionMark sectionMark = new SectionMark(view, new Point(1000, 2000), new Point(3000, 1200));
                         sectionMark.Insert();
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMark.#ctor(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new section mark instance with the given positions.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="leftPoint">The starting point of the left side of the new section mark.</param>
            <param name="rightPoint">The starting point of the right side of the new section mark.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMark.#ctor(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes)">
            <summary>
            Creates a new section mark instance with the given positions and attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="leftPoint">The starting point of the left side of the new section mark.</param>
            <param name="rightPoint">The starting point of the right side of the new section mark.</param>
            <param name="sectionMarkAttributes">The section mark attributes to be used.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase">
            <summary>
            The SectionMarkBase class is a base class for both the SectionMark class and the CurvedSectionMark class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.LeftPoint">
            <summary>
            The starting point of the left symbol of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.RightPoint">
            <summary>
            The starting point of the right symbol of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.Attributes">
            <summary>
            The attributes for the section mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrSectionMark_t@)">
            <summary>
            Call TS and perform database operation specified in OperationType.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.Delete">
            <summary>
            Deletes the section mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.Modify">
            <summary>
            Modifies the section mark in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.Insert">
            <summary>
            Inserts the section mark into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.Select">
            <summary>
            Selects the section mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol">
            <summary>
            The SectionMarkSymbol class is for section mark attributes related to the shape of the connecting symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.Shape">
            <summary>
            The shape of the section mark symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.Size">
            <summary>
            The size of the section mark symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.Position">
            <summary>
            The position of the section mark symbol.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes">
            <summary>
            The possible shapes of the section mark symbol.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.None">
            <summary>
            No symbol.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape1">
            <summary>
            The triangle with black and white halves.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape2">
            <summary>
            The arrow line pointing to an orthogonal straight line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape3">
            <summary>
            The line with half of an arrow end.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape4">
            <summary>
            The rectangle shape with very small height.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape5">
            <summary>
            The triangle and circle shapes mixed. The circle partly hides the triangle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape6">
            <summary>
            The triangle and circle shapes mixed. The triangle is on top.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape7">
            <summary>
            The triangle shape without content.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.SymbolShape8">
            <summary>
            The triangle shape filled in black.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes.Custom">
            <summary>
            The custom shape.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.#ctor">
            <summary>
            Creates a new section mark symbol instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.#ctor(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.SymbolShapes,System.Double,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new section mark symbol instance with the given shape, size and position.
            </summary>
            <param name="shape">The shape of the section mark symbol to be used.</param>
            <param name="size">The size of the section mark symbol to be used.</param>
            <param name="position">The position of the section mark symbol to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkSymbol.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes">
            <summary>
            The SectionMarkAttributes class is the attributes class for section marks.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.MarkName">
            <summary>
            The section mark name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineLength">
            <summary>
            The length of the section mark lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineWidth">
            <summary>
            The width of the section mark lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineLengthOffset">
            <summary>
            The offset from the end of the line on both sides of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineWidthOffsetLeft">
            <summary>
            The offset from the start of the line on the left side of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineWidthOffsetRight">
            <summary>
            The offset from the start of the line on the right side of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LineColor">
            <summary>
            The color of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.SymbolColor">
            <summary>
            The color of the mark symbols.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LeftSymbol">
            <summary>
            The symbol to use on the left side of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.RightSymbol">
            <summary>
            The symbol to use on the right side of the section mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.TagsAttributes">
            <summary>
            The tags A1-A5 in the section mark attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.#ctor">
            <summary>
            Creates a new default SectionMarkAttributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.#ctor(System.String)">
            <summary>
            Creates a new SectionMarkAttributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes">
            <summary>
            The SectionMarkTagAttributes class contains attributes for section mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.ShowOnSide">
            <summary>
            The side(s) on which the tag is shown.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagRotation">
            <summary>
            The policy for the tag rotation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation">
            <summary>
            The mark tag text rotation values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysRotate">
            <summary>
            Always rotate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysHorizontal">
            <summary>
            Always horizontal.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.DoNotRotateVertically">
            <summary>
            Do not rotate vertically.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation.AlwaysOrthogonal">
            <summary>
            Always orthogonal.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide">
            <summary>
            The values that determine on which side(s) the mark tag text is shown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnBothSides">
            <summary>
            Show on both sides.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnLeftSideOnly">
            <summary>
            Show only on the left side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide.ShowOnRightSideOnly">
            <summary>
            Show only on the right side.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.#ctor">
            <summary>
            Creates a new section mark tag attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.#ctor(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagShowOnSide,Tekla.Structures.Drawing.TagLocation,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.TagTextRotation,Tekla.Structures.Drawing.ContainerElement)">
            <summary>
            Creates a new section mark tag attributes instance with the given information.
            </summary>
            <param name="showOnSide">The side(s) on which to show the tag to be used.</param>
            <param name="location">The location of the mark tag to be used.</param>
            <param name="offset">The offset of the mark tag to be used.</param>
            <param name="rotation">The policy for text rotation of the mark tag to be used.</param>
            <param name="tagContent">The content of the mark tag to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes">
            <summary>
            The SectionMarkTagsAttributes class contains attributes for section mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.TagA1">
            <summary>
            The tag A1 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.TagA2">
            <summary>
            The tag A2 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.TagA3">
            <summary>
            The tag A3 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.TagA4">
            <summary>
            The tag A4 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.TagA5">
            <summary>
            The tag A5 of a mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.#ctor">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.#ctor(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagAttributes)">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
            <param name="tagA1">The tag at place A1.</param>
            <param name="tagA2">The tag at place A2.</param>
            <param name="tagA3">The tag at place A3.</param>
            <param name="tagA4">The tag at place A4.</param>
            <param name="tagA5">The tag at place A5.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.WeldMark">
             <summary>
             The WeldMark class defines a drawing object that illustrates a weld mark in a specific view.
             </summary>
             <example>
             The following code modifies a weld mark in the current drawing:
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
            
             public class WeldMarkExample
             {
                 public void WeldMarkModify()
                 {
                     DrawingHandler myDrawingHandler = new DrawingHandler();
                     DrawingObjectSelector dos = myDrawingHandler.GetDrawingObjectSelector();
                     DrawingObjectEnumerator allObjectsOnSheet = dos.GetSelected();
                     while (allObjectsOnSheet.MoveNext())
                     {
                         if (allObjectsOnSheet.Current is Tekla.Structures.Drawing.WeldMark)
                         {
                             WeldMark weldMark = allObjectsOnSheet.Current as Tekla.Structures.Drawing.WeldMark;
                             weldMark.Modify();
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.#ctor(System.Boolean)">
            <summary>
            Create instance of WeldMark
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.ModelIdentifier">
            <summary>
            Gets the model identifier related to the weld mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.Attributes">
            <summary>
            The attributes of the weld mark.
            For more information see <see cref="T:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.InsertionPoint">
            <summary>
            The insertion point of the mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.TextWidth">
            <summary>
            The width of the text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.TextHeight">
            <summary>
            The height of the text frame.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.DbOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Call TS and perform database operation specified in OperationType.
            </summary>
            <param name="OperationType">The type of the operation.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.Delete">
            <summary>
            Deletes the weld mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.Modify">
            <summary>
            Modifies the weld mark in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.Select">
            <summary>
            Selects the weld mark from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes">
            <summary>
            The SeamVisibilityAttributes class is the attributes class for the weld seam visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowPrefix">
            <summary>
            Gets or sets a value indicating whether the seam prefix is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowSize">
            <summary>
            Gets or sets a value indicating whether the seam size is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowType">
            <summary>
            Gets or sets a value indicating whether the seam type is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowAngle">
            <summary>
            Gets or sets a value indicating whether the seam angle is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowContour">
            <summary>
            Gets or sets a value indicating whether the seam contour is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowFinish">
            <summary>
            Gets or sets a value indicating whether the seam finish is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowLength">
            <summary>
            Gets or sets a value indicating whether the seam length is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowPitch">
            <summary>
            Gets or sets a value indicating whether the seam pitch is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowEffectiveThroat">
            <summary>
            Gets or sets a value indicating whether the seam effective throat is visible.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.ShowRootOpening">
            <summary>
            Gets or sets a value indicating whether the seam root opening is visible.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.#ctor">
            <summary>
            Creates a new weld seam visibility attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new weld seam visibility attributes instance with the given attributes.
            </summary>
            <param name="showPrefix">The seam prefix visibility to be used.</param>
            <param name="showSize">The seam size visibility to be used.</param>
            <param name="showType">The seam type visibility to be used.</param>
            <param name="showAngle">The seam angle visibility to be used.</param>
            <param name="showContour">The seam contour visibility to be used.</param>
            <param name="showFinish">The seam finish visibility to be used.</param>
            <param name="showLength">The seam length visibility to be used.</param>
            <param name="showPitch">The seam pitch visibility to be used.</param>
            <param name="showEffectiveThroat">The seam effective throat visibility to be used.</param>
            <param name="showRootOpening">The seam root opening visibility to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.SeamVisibilityAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes">
            <summary>
            The WeldMarkAttributes class is the attributes class for the weld mark attributes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._SeamAbove">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._SeamBelow">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._Font">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._CustomPresentation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._LineColor">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes._LineType">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.ShowWeldNumber">
            <summary>
            The visibility of the weld number.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.SeamAbove">
            <summary>
            The visibility of the seam above parameters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.SeamBelow">
            <summary>
            The visibility of the seam below parameters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.ShowReferenceText">
            <summary>
            Gets or sets visibility of the weld mark reference text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.ShowEdgeAround">
            <summary>
            Gets or sets visibility of the weld mark edge/around property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.ShowWorkshopSite">
            <summary>
            Gets or sets visibility of the weld mark workshop/site property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.Font">
            <summary>
            The weld mark font settings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.TransparentBackground">
            <summary>
            Controls the text background transparency (transparent/opaque).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default weld mark attributes instance that might load attributes.
            SkipLoading value does make any difference.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.#ctor">
            <summary>
            Creates a new default weld mark attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.#ctor(System.String)">
            <summary>
            Creates a new weld mark attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.WeldMarkAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.GetAxisAlignedBoundingBox">
            <summary>
            Returns the axis aligned bounding box of the weld mark (rectangle format).
            </summary>
            <returns>The bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.GetObjectAlignedBoundingBox">
            <summary>
            Returns the object aligned bounding box of the weld mark (rectangle format).
            </summary>
            <returns>The bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.GetObjects">
            <summary>
            Gets the children objects of the current object.
            </summary>
            <returns>The children objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.WeldMark.GetObjects(System.Type[])">
            <summary>
            Gets the children objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children objects of the current object that are of certain types.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.WeldMark.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SizeDefinitionMode">
            <summary>
            Controls the size definition mode of the drawing sheet. Set the mode to
            SizeDefinitionMode.SpecifiedSize if you want to force the sheet to a
            certain size.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LayoutAttributes"/>
        </member>
        <member name="F:Tekla.Structures.Drawing.SizeDefinitionMode.AutoSize">
            <summary>The smallest possible drawing sheet is automatically calculated.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SizeDefinitionMode.SpecifiedSize">
            <summary>Fixed values are used to control the sheet size.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AutoSizeOptions">
            <summary>
            Options for controlling how the sheet size is
            calculated when the SizeDefinitionMode is <c>AutoSize</c>.
            </summary>
            <obsolete>Deprecated since TS2020.</obsolete>
            <seealso cref="T:Tekla.Structures.Drawing.SizeDefinitionMode"/>
            <seealso cref="T:Tekla.Structures.Drawing.LayoutAttributes"/>
        </member>
        <member name="F:Tekla.Structures.Drawing.AutoSizeOptions.CalculatedSizes">
            <summary>Use "calculated size" values of the selected layout in the drawing.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AutoSizeOptions.FixedSizes">
            <summary>Use "fixed size" values of the selected layout in the drawing.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AutoSizeOptions.CalculatedAndFixedSizes">
            <summary>Use both "fixed size" and "calculated size"
            values of the selected layout in the drawing.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.LayoutAttributes">
            <summary>
            The LayoutAttributes class contains attributes for controlling the drawing layout.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.Drawing"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.ListHiddenObjectsInTemplates">
            <summary>
            Gets or sets the property for controlling whether to list hidden objects in templates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.SizeDefinitionMode">
            <summary>
            Gets or sets the size definition mode.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.AutoSizeOptions">
            <summary>
            Gets or sets the auto size options that control the drawing sheet
            size. Setting this property will change the SizeDefinitionMode to <c>AutoSize</c>.
            </summary>
            <obsolete>Deprecated since TS2020. Always returns AutoSizeOptions.FixedSizes</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.SheetSize">
            <summary>
            Gets or sets the sheet size. Setting this property will change the
            SizeDefinitionMode to <c>SpecifiedSize</c>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.InternalLayout">
            <summary>
            Gets or sets the property for which layout to use.
            </summary>
            NOTE! Both Layout and TableLayoutId are marked as internal for now, we get the values loaded correctly through LoadAttributes, however
            there are some serious issues with the transporting of an id here and in core. We need to do some more refactoring to reveal the layouts correctly for the users.
        </member>
        <member name="P:Tekla.Structures.Drawing.LayoutAttributes.InternalTableLayoutId">
            <summary>
            Gets or sets the property for which table layout id to use.
            </summary>
            NOTE! Both Layout and TableLayoutId are marked as internal for now, we get the values loaded correctly through LoadAttributes, however
            there are some serious issues with the transporting of an id here and in core. We need to do some more refactoring to reveal the layouts correctly for the users.
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor(System.String,Tekla.Structures.Drawing.DrawingType)">
            <summary>
            Creates a new layout attributes instance that loads standard attributes.
            </summary>
            <param name="AttributeFile">The name of the drawing attribute file. E.g. "standard".</param>
            <param name="drawingType">The type of drawing to load layout attributes for.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor(System.Boolean,Tekla.Structures.Drawing.DrawingType)">
            <summary>
            Creates a new layout attributes instance that loads standard attributes if LoadAttributes is true.
            </summary>
            <param name="LoadAttributes">Whether to load the attributes.</param>
            <param name="drawingType">The type of drawing to load layout attributes for.</param>
            <remarks>AttributesBase will call LoadAttributes before the drawing type is set, so explictly pass true for SkipLoadingAttributes parameter.</remarks>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor(System.String)">
            <summary>
            Creates a new layout attributes instance that loads drawing layout attributes from the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the drawing attribute file. E.g. "standard".</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor">
            <summary>
            Creates a new layout attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor(System.String,Tekla.Structures.Drawing.Drawing)">
            <summary>
            Creates a new layout attributes instance that loads drawing layout attributes from the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the drawing attribute file. E.g. "standard".</param>
            <param name="Drawing">The type of drawing to load layout attributes for.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.#ctor(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Creates a new layout attributes instance that loads standard attributes.
            </summary>
            <param name="Drawing">The type of drawing to load layout attributes for.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.LoadAttributes(System.String)">
            <summary>
            Loads drawing layout attributes from the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the drawing attribute file. E.g. "standard".</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LayoutAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GraphicObjectHatchAttributes">
            <summary>
            The GraphicObjectHatchAttributes class contains hatch attributes for graphic object hatches.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GraphicObjectHatchAttributes.OffsetX">
            <summary>
            The offset from the origin in the X-direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GraphicObjectHatchAttributes.OffsetY">
            <summary>
            The offset from the origin in the Y-direction.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GraphicObjectHatchAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ModelObjectHatchAttributes">
            <summary>
            The ModelObjectHatchAttributes class contains hatch attributes for model object hatches.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ModelObjectHatchAttributes.AutomaticScaling">
            <summary>
            Specifies whether automatic scaling is enabled. If disabled, custom
            scale values will be used (see <see cref="P:Tekla.Structures.Drawing.HatchAttributes.ScaleX"/> and <see cref="P:Tekla.Structures.Drawing.HatchAttributes.ScaleY"/>).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ModelObjectHatchAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionOrthogonal">
            <summary>
            The CurvedDimensionOrthogonal class defines a curved dimension with orthogonal reference lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.Attributes">
            <summary>
            Gets or sets the curved dimension set orthogonal attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes)">
            <summary>
            Creates a new curved dimension with orthogonal reference lines.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="StartPoint">The start point to be used.</param>
            <param name="EndPoint">The end point to be used.</param>
            <param name="Distance">The distance in paper millimeters.</param>
            <param name="Attributes">The attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new curved dimension with orthogonal reference lines
            using default attributes.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="StartPoint">The start point to be used.</param>
            <param name="EndPoint">The end point to be used.</param>
            <param name="Distance">The distance in paper millimeters.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.GetDimensionSet(System.Boolean)">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionOrthogonal.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionRadial">
            <summary>
            The CurvedDimensionRadial class defines a curved dimension with radial reference points.
            The dimension text on the line can be either a distance or an angle value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionRadial.Attributes">
            <summary>
            CurvedDimensionSetRadialAttributes
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionRadial.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes)">
            <summary>
            Creates a new curved dimension with radial reference points.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="StartPoint">The start point to be used.</param>
            <param name="EndPoint">The end point to be used.</param>
            <param name="Distance">The distance in paper millimeters.</param>
            <param name="Attributes">The attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionRadial.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new curved dimension with radial reference points
            using standard attributes.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="StartPoint">The start point to be used.</param>
            <param name="EndPoint">The end point to be used.</param>
            <param name="Distance">The distance in paper millimeters.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionRadial.GetDimensionSet(System.Boolean)">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionRadial.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionRadial.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal">
            <summary>
            The CurvedDimensionSetOrthogonal class defines a curved dimension set with orthogonal reference lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.Attributes">
            <summary>
            The curved dimension set orthogonal attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes">
            <summary>
            The CurvedDimensionSetOrthogonalAttributes class contains the attributes for managing all the attributes
            of the curved dimension with orthogonal reference lines.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes.#ctor">
            <summary>
            Creates a new curved dimension set orthogonal attributes instance which loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes.#ctor(System.String)">
            <summary>
            Creates a new curved dimension set orthogonal attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new curved dimension set orthogonal attributes instance that loads the specified attributes.
            </summary>
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFilename">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetRadial">
            <summary>
            The CurvedDimensionSetRadial class defines a curved dimension set with radial reference lines.
            </summary>
            <example>
            The following code asks the user to pick three points and then creates a
            dimension between the points with a 50 mm distance:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Drawing.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   static void PickPoints(int numberToPick, ref PointList pointList, ref ViewBase view)
                   {
                       Picker picker = new DrawingHandler().GetPicker();
                       Point point;
                       while (--numberToPick != -1)
                       {
                           picker.PickPoint("Pick point", out point, out view);
                           pointList.Add(point);
                       }
                   }
            
                   static void CreateDimension()
                   {
                       double Distance = 50.0;
                       PointList pointList = new PointList();
                       ViewBase view = null;
                       PickPoints(3, ref pointList, ref view);
                       new CurvedDimensionSetHandler().CreateCurvedDimensionSetRadial(view,
                                                                                      pointList[0],
                                                                                      pointList[1],
                                                                                      pointList[2],
                                                                                      pointList,
                                                                                      Distance);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetRadial.Attributes">
            <summary>
            The curved dimension set radial attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes">
            <summary>
            The CurvedDimensionSetRadialAttributes class contains the attributes for managing all the attributes
            of the curved dimension with radial reference lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.CurvedDimensionType">
            <summary>
            The curved dimension type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.DimensionType">
            <summary>
            The dimension type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.#ctor">
            <summary>
            Creates a new curved dimension set radial attributes instance which loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new curved dimension set radial attributes instance which loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.#ctor(System.String)">
            <summary>
            Creates a new curved dimension set radial attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFilename">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetHandler">
            <summary>
            The CurvedDimensionSetHandler class contains operations for creating curved dimension sets.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetHandler.CreateCurvedDimensionSetRadial(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PointList,System.Double,Tekla.Structures.Drawing.CurvedDimensionSetRadial.CurvedDimensionSetRadialAttributes)">
            <summary>
            Creates a curved dimension set from the specified points and inserts it to the database.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <param name="Attributes">The attributes to be used.</param>
            <returns>The created dimension set or null if failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetHandler.CreateCurvedDimensionSetRadial(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PointList,System.Double)">
            <summary>
            Creates a curved dimension set from the specified points and inserts it to the database.
            Uses the default attributes.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <returns>The created dimension set or null if failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetHandler.CreateCurvedDimensionSetOrthogonal(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PointList,System.Double,Tekla.Structures.Drawing.CurvedDimensionSetOrthogonal.CurvedDimensionSetOrthogonalAttributes)">
            <summary>
            Creates a curved dimension set with orthogonal reference lines 
            from the specified points and inserts it to the database.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <param name="Attributes">The attributes to be used.</param>
            <returns>The created dimension set or null if failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetHandler.CreateCurvedDimensionSetOrthogonal(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PointList,System.Double)">
            <summary>
            Creates a curved dimension set with orthogonal reference lines 
            from the specified points and inserts it to the database.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <returns>The created dimension set or null if failed.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.RadiusDimensionAttributes">
            <summary>
            The RadiusDimensionAttributes class contains attributes to manage all the attributes of a straight dimension.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       RadiusDimensionAttributes attributes = new RadiusDimensionAttributes("MyAttributes");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimensionAttributes.#ctor">
            <summary>
            Creates a new radius dimension attributes instance which loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimensionAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new radius dimension attributes instance which loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimensionAttributes.#ctor(System.String)">
            <summary>
            Creates a new radius dimension attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimensionAttributes.LoadAttributes(System.String)">
            <summary>
            Loads attributes from the specified attribute file.
            </summary>
            <param name="AttributeFile">The attribute file's filename.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimensionAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetBase">
            <summary>
            The CurvedDimensionSetBase class is the base class for curved dimension sets which are defined by
            an arc and a point list.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.ArcPoint1">
            <summary>
            Gets the first arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.ArcPoint2">
            <summary>
            Gets the second arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.ArcPoint3">
            <summary>
            Gets the third arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.Distance">
            <summary>
            Gets the distance.
            The distance is measured in paper millimeters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.Attributes">
            <summary>
            Gets or sets the dimension set attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionSetBase.DimensionPoints">
            <summary>
            Gets a list of the dimension points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.Insert">
            <summary>
            Curved dimensions are created using the curved dimension set handler.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Curved dimensions are created using the curved dimension set handler.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.InternalInsert">
            <summary>
            Dimension sets can only be Inserted Internally.
            </summary>
            <returns>True if Insert succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.Select">
            <summary>
            Selects the dimension set from the database.
            </summary>
            <returns>True if the selection succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.Modify">
            <summary>
            Modifies the existing dimension set in the database.
            </summary>
            <returns>True if the updating succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.Delete">
            <summary>
            Deletes the dimension set and its child dimensions from the database.
            </summary>
            <returns>True if the deletion succeeds.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes">
            <summary>
            The CurvedDimensionSetBaseAttributes class contains the attributes for the curved dimensions.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes.#ctor">
            <summary>
            Creates a new curved dimension set base attributes instance which loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new curved dimension set base attributes instance which loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes.#ctor(System.String)">
            <summary>
            Creates a new curved dimension set base attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.AngleDimension">
            <summary>
            The AngleDimension class defines an angle dimension between two lines. The dimension can be shown
            by a triangle or in degrees. You can also enter the triangle base length.
            </summary>
            <example>
            The following code inserts an angle dimension:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase _view = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
            
                       Point origin = new Point(2000, 2000);
                       Point point1 = new Point(3000, 5000);
                       Point point2 = new Point(6000, 2000);
                       AngleDimension myAngle = new AngleDimension(_view, origin, point1, point2, 200);
                       myAngle.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimension.Attributes">
            <summary>
            Gets or sets the angle dimension attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimension.Origin">
            <summary>
            Gets or sets the origin of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimension.Point1">
            <summary>
            Gets or sets the first point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimension.Point2">
            <summary>
            Gets or sets the second point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimension.Distance">
            <summary>
            Gets or sets the distance (from the origin to the second point's direction).
            The distance is measured in paper millimeters.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new angle dimension instance using three points.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="Origin">The origin to be used.</param>
            <param name="Point1">The first point to be used.</param>
            <param name="Point2">The second point to be used.</param>
            <param name="Distance">The distance of the angle sign from the origin to the first point.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.AngleDimensionAttributes)">
            <summary>
            Creates a new angle dimension instance using three points.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="Origin">The origin to be used.</param>
            <param name="Point1">The first point to be used.</param>
            <param name="Point2">The second point to be used.</param>
            <param name="Distance">The distance of the angle sign from the origin to the first point.</param>
            <param name="Attributes">The angle dimension attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Creates a new angle dimension instance using the origin and two vectors relative to the origin.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="Origin">The origin to be used.</param>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <param name="Distance">The distance to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Double,Tekla.Structures.Drawing.AngleDimensionAttributes)">
            <summary>
            Creates a new angle dimension instance using the origin and two vectors relative to the origin.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="Origin">The origin to be used.</param>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <param name="Attributes">The angle dimension attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.GetAngle">
            <summary>
            Gets the angle value (in degrees).
            </summary>
            <returns>The angle value.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.GetDimensionSet">
            <summary>
            The angle dimension doesn't have a dimension set.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.GetDimensionSet(System.Boolean)">
            <summary>
            The angle dimension doesn't have a dimension set.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.Insert">
            <summary>
            Inserts the dimension into the database.
            </summary>
            <returns>True if the insertion succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.Select">
            <summary>
            Selects the angle dimension from the database.
            </summary>
            <returns>True if the selection succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.Modify">
            <summary>
            Modifies the existing dimension in the database.
            </summary>
            <returns>True if the updating succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimension.Delete">
            <summary>
            Deletes the dimension from the database.
            </summary>
            <returns>True if the deletion succeeds.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.AngleTypes">
            <summary>
            The different types for angle dimensions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AngleTypes.AngleOnSide">
            <summary>
            Shows the angle dimensions in degrees on the side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AngleTypes.AngleAtVertex">
            <summary>
            Shows the angle dimensions in degrees at the angle vertex.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AngleTypes.Triangle">
            <summary>
            Shows the angle dimensions using a triangle. The triangle base length can be configured.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.AngleTypes.TriangleWithDegrees">
            <summary>
            Shows the angle using a triangle, also shows the angle in degrees on one side of the triangle.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.AngleDimensionAttributes">
            <summary>
            The AngleDimensionAttributes class contains the attributes for angle dimensions.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       AngleDimensionAttributes attributes = new AngleDimensionAttributes("MyAttributes");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimensionAttributes.Type">
            <summary>
            The type of the angle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AngleDimensionAttributes.TriangleBase">
            <summary>
            Gets or sets the triangle base length which controls the base dimension
            shown for bevel dimensions (only if Type is AngleTypes.Triangle).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimensionAttributes.#ctor">
            <summary>
            Creates a new angle dimension attributes instance which loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimensionAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new angle dimension attributes instance which loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimensionAttributes.#ctor(System.String)">
            <summary>
            Creates a new angle dimension attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimensionAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AngleDimensionAttributes.LoadAttributes(System.String)">
            <summary>
            Loads attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The attribute file's filename.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.CurvedDimensionBase">
            <summary>
            The CurvedDimensionBase class is the base class for radial and orthogonal curved dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.ArcPoint1">
            <summary>
            Gets the first arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.ArcPoint2">
            <summary>
            Gets the second arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.ArcPoint3">
            <summary>
            Gets the third arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.StartPoint">
            <summary>
            The start point of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.EndPoint">
            <summary>
            The end point of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.Distance">
            <summary>
            Gets the distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CurvedDimensionBase.Attributes">
            <summary>
            Gets or sets the curved dimension set base attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.CurvedDimensionSetBase.CurvedDimensionSetBaseAttributes)">
            <summary>
            
            </summary>
            <param name="TargetView"></param>
            <param name="ArcPoint1"></param>
            <param name="ArcPoint2"></param>
            <param name="ArcPoint3"></param>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <param name="Distance"></param>
            <param name="Attributes"></param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.GetDimensionSet">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.Insert">
            <summary>
            Inserts the dimension to the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.Select">
            <summary>
            Selects the straight dimension from the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.Modify">
            <summary>
            The single dimension cannot be modified.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.Delete">
            <summary>
            Deletes the straight dimension from the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CurvedDimensionBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LineTypeAttributes">
            <summary>
            The LineTypeAttributes class contains basic attributes for lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LineTypeAttributes.Type">
            <summary>
            The type of the line (see <see cref="T:Tekla.Structures.Drawing.LineTypes"/> for options).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LineTypeAttributes.Color">
            <summary>
            The color of the line (see <see cref="T:Tekla.Structures.Drawing.DrawingColors"/> for options).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypeAttributes.#ctor">
            <summary>
            Creates a new line type attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypeAttributes.#ctor(Tekla.Structures.Drawing.LineTypes,Tekla.Structures.Drawing.DrawingColors)">
            <summary>
            Creates a new line type attributes instance with the given line type and color.
            </summary>
            <param name="lineType">The line type to be used.</param>
            <param name="color">The color to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.LineTypeAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum">
            <summary> 
            The status of the AutoDrawing script execution. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum.OPERATION_OK">
            <summary>
            The AutoDrawing script was executed without errors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum.OPERATION_FAILED">
            <summary>
            An error occured during the AutoDrawing script execution. See the AutoDrawing log file for more details.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum.ERROR_NUMBERING_NOT_UPTODATE">
            <summary>
            The AutoDrawing script could not be executed because the numbering was not up-to-date.
            </summary>        
        </member>
        <member name="F:Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum.ERROR_DRAWING_EDITOR_MUST_BE_CLOSED">
            <summary>
            The command could not be executed because a drawing was open. Close the drawing and try again.
            </summary>        
        </member>
        <member name="T:Tekla.Structures.Drawing.Automation.AutoDrawingRule">
            <summary>
            The AutoDrawingRule class contains the definition of a rule for the Tekla Structures AutoDrawing tool.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Automation.AutoDrawingRule.Filename">
            <summary>
            The filename of the AutoDrawing script.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Automation.AutoDrawingRule.#ctor(System.String)">
            <summary>
            Creates a new AutoDrawing rule by using an existing rule file.
            </summary>
            <param name="RuleFromFile">The filename of the rule file.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.Automation.DrawingCreator">
            <summary>
            The DrawingCreator class is for handling the creation of drawings using the built-in logic of Tekla Structures.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Automation.DrawingCreator.CreateDrawings(Tekla.Structures.Drawing.Automation.AutoDrawingRule,System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum@)">
            <summary>
            Creates drawings using the AutoDrawing tool of Tekla Structures.
            </summary>
            <param name="Rule">The AutoDrawing rule to be used.</param>
            <param name="aModelObjectIdentifier">The model object identifier list to be used.
            Part identifiers to create single part drawings or assembly identifiers to create assembly drawings.</param>
            <param name="OperationStatus">The operation status to be used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Automation.DrawingCreator.CreateDrawings(Tekla.Structures.Drawing.Automation.AutoDrawingRule,Tekla.Structures.Identifier,Tekla.Structures.Drawing.Automation.AutoDrawingsStatusEnum@)">
            <summary>
            Creates drawings using the AutoDrawing tool of Tekla Structures.
            </summary>
            <param name="Rule">The AutoDrawing rule to be used.</param>
            <param name="ModelObjectIdentifier">The model object identifier to be used.
            Part identifier to create single part drawing or assembly identifier to create assembly drawing.</param>
            <param name="OperationStatus">The operation status to be used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Automation.DrawingCreator.CreateDrawings(Tekla.Structures.Drawing.Automation.AutoDrawingRule,Tekla.Structures.Identifier)">
            <summary>
            Creates drawings using the AutoDrawing tool of Tekla Structures.
            </summary>
            <param name="Rule">The AutoDrawing rule to be used.</param>
            <param name="ModelObjectIdentifier">The model object identifier to be used.
            Part identifier to create single part drawing or assembly identifier to create assembly drawing.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DatabaseObject">
            <summary>
            The DatabaseObject class is a base class for all drawing objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DatabaseObject.QueryReturnValue">
            <summary>
            Status information about the latest database operation (select, insert, modify, delete).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DatabaseObject.DrawingIdentifier">
            <summary>
            Database identifier. All drawings have an unique identifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DatabaseObject.Identifier">
            <summary>
            Database identifier. All drawing objects have an unique identifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DatabaseObject.ViewIdentifier">
            <summary>
            Database identifier. All views have an unique identifier inside the drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.Insert">
            <summary>
            Inserts the object instance into the database. The inserted instance must be of a real type.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.Select">
            <summary>
            Selects the object instance from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.Modify">
            <summary>
            Modifies the instance in the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.Delete">
            <summary>
            Deletes the instance from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.IsSameDatabaseObject(Tekla.Structures.Drawing.DatabaseObject)">
            <summary>
            Returns true if the current object and the given object are referencing the same database object.
            </summary>
            <param name="Object">The other object to be used.</param>
            <returns>True if the objects are referencing the same database object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.QueryUserPropertyGet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.QueryUserPropertySet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.UserPropertySet(System.String,Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <summary>
            Sets a user property (UDA) to the drawing.
            </summary>
            <param name="Name">The property's name.</param>
            <param name="Property">The property.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.UserPropertyGet(System.String,Tekla.Structures.DrawingInternal.QueryTypeEnum,Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <summary>
            Gets a user property (UDA) from the drawing.
            </summary>
            <param name="Name">The property's name.</param>
            <param name="queryType">The query type.</param>
            <param name="Property">The property.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.SetUserProperty(System.String,System.String)">
            <summary>
            Sets a string property for the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.SetUserProperty(System.String,System.Int32)">
            <summary>
            Sets an integer property for the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.SetUserProperty(System.String,System.Double)">
            <summary>
            Sets a double property for the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetUserProperty(System.String,System.String@)">
            <summary>
            Gets a string property from the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be gotten.</param>
            <param name="Value">The value of the property.</param>
            <returns>True if the property was gotten successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetUserProperty(System.String,System.Int32@)">
            <summary>
            Gets an integer property from the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be gotten.</param>
            <param name="Value">The value of the property.</param>
            <returns>True if the property was gotten successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetUserProperty(System.String,System.Double@)">
            <summary>
            Gets a double property from the drawing object. The object has to be in a drawing before
            the method can be used.
            </summary>
            <param name="Name">The name of the property to be gotten.</param>
            <param name="Value">The value of the property.</param>
            <returns>True if the property was gotten successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetStringUserProperties(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Retrieves all string user properties for the object with the given list of names.
            </summary>
            <param name="names">List of names to get the values for.</param>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no such UserProperties were found).</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetDoubleUserProperties(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Double}@)">
            <summary>
            Retrieves all double user properties for the object with the given list of names.
            </summary>
            <param name="names">List of names to get the values for.</param>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no such UserProperties were found).</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetIntegerUserProperties(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Retrieves all integer user properties for the object with the given list of names.
            </summary>
            <param name="names">List of names to get the values for.</param>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no such UserProperties were found).</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetStringUserProperties(System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Retrieves all string user properties for the object with the given list of names.
            </summary>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no UserProperties were found).</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetDoubleUserProperties(System.Collections.Generic.Dictionary{System.String,System.Double}@)">
            <summary>
            Retrieves all double user properties for the object with the given list of names.
            </summary>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no UserProperties were found).</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DatabaseObject.GetIntegerUserProperties(System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Retrieves all integer user properties for the object with the given list of names.
            </summary>
            <param name="values">Dictionary of name/value pairs that contain the values of the found user properties with the given names.</param>
            <returns>True if the request succeeded (the returned values can still be empty if no UserProperties were found).</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StraightDimensionSetHandler">
            <summary>
            The StraightDimensionSetHandler class contains operations for creating and modifying straight dimension sets.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSetHandler.CreateDimensionSet(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Geometry3d.Vector,System.Double,Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes)">
            <summary>
            Creates straight dimensions and combines them to one straight dimension set. Returns null if fails.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="UpDirection">The direction from the dimension points to the dimension line.</param>
            <param name="Distance">The distance in paper millimeters taken from the first dimension point to the dimension line.</param>
            <param name="Attributes">The attributes to be used.</param>
            <returns>The created straight dimension set or null if fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSetHandler.CreateDimensionSet(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Geometry3d.Vector,System.Double,System.Double,System.Double,Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes)">
            <summary>
            Creates straight dimensions and combines them to one straight dimension set. Returns null if fails.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="UpDirection">The direction from the dimension points to the dimension line.</param>
            <param name="Distance">The distance in paper millimeters taken from the first dimension point to the dimension line.</param>
            <param name="LeftTagLineOffset">The left tag line offset measured in paper millimeters.</param>
            <param name="RightTagLineOffset">The right tag line offset measured in paper millimeters.</param>
            <param name="Attributes">The attributes to be used.</param>
            <returns>The created straight dimension set or null if fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSetHandler.CreateDimensionSet(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Creates straight dimensions and combines them to one straight dimension set. Returns null if fails.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="UpDirection">The direction from the dimension points to the dimension line.</param>
            <param name="Distance">The distance in paper millimeters taken from the first dimension point to the dimension line.</param>
            <returns>The created straight dimension set or null if fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSetHandler.CreateDimensionSet(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Geometry3d.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Creates straight dimensions and combines them to one straight dimension set. Returns null if fails.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="DimensionPoints">The dimension points to be used.</param>
            <param name="UpDirection">The direction from the dimension points to the dimension line.</param>
            <param name="Distance">The distance in paper millimeters taken from the first dimension point to the dimension line.</param>
            <param name="LeftTagLineOffset">The left tag line offset measured in paper millimeters.</param>
            <param name="RightTagLineOffset">The right tag line offset measured in paper millimeters.</param>
            <returns>The created straight dimension set or null if fails.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ElementBase">
            <summary>
            The ElementBase class is the abstract base class for all mark elements.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ElementBase.Hidden">
            <summary>
            Sets if the content is hidden from view.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ElementBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Drawing.ElementBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with the given object.
            Checks every field of both objects for equality.
            </summary>
            <param name="ObjectToCompare">An object of the same type to be used for comparing.</param>
            <returns>True if the field values of both objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ElementBase.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ContainerElement">
            <summary>
            The ContainerElement class defines container elements. A container element
            is a mark element that has a frame and contains other mark elements.
            A container element may also contain container elements to achieve nested frames.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ContainerElement.Frame">
            <summary>
            The frame of the container element.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ContainerElement.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Drawing.ContainerElement.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Drawing.ContainerElement.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.Add(Tekla.Structures.Drawing.ElementBase)">
            <summary>
            Adds a new element base to the end of the list.
            </summary>
            <param name="value">The element base to be added to the list.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.Clear">
            <summary>
             Removes all elements from the container instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerElement.GetUnformattedString">
            <summary>
            Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.NewLineElement">
            <summary>
            The NewLineElement class defines a line feed between the desired elements to create multi-row marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.NewLineElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NewLineElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if both objects are new line elements.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.NewLineElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement">
            <summary>
            The PropertyElement class may represent any of the many different mark element types, such as the profile, the material and the name.
            The property is defined by the name and it is converted into a textual value before the mark is drawn.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType">
            <summary>
            The PropertyElementType class represents the type of a property element.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PropertyTypes">
            <summary>
            Identical to core
            libgr_attrib\interface\gr_mark_content_types.h grMarkTypes_e
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes">
            <summary>
            The BoltMarkPropertyElementTypes class represents the available property element types for bolt marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltLength">
            <summary>Returns the bolt length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.BoltDiameter">
            <summary>Returns the bolt diameter property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.HoleDiameter">
            <summary>Returns the hole diameter property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Material">
            <summary>Returns the material property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Standard">
            <summary>Returns the standard property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.ShortName">
            <summary>Returns the short name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.FullName">
            <summary>Returns the full name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.AssemblyType">
            <summary>Returns the assembly type property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.NumberOfBolts">
            <summary>Returns the number of bolts property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.SlotLengthX">
            <summary>Returns the slot length in the X direction property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.SlotLengthY">
            <summary>Returns the slot length in the Y direction property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.SlotHeight">
            <summary>Returns the slot height property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.SlotLength">
            <summary>Returns the slot length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Size">
            <summary>Returns the size property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.Countersunk">
            <summary>Returns the countersunk property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.GageOfOutstandingLeg">
            <summary>Returns the gage of the outstanding leg property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.BoltMarkPropertyElementTypes.CenterToCenterDistance">
            <summary>Returns the center-to-center distance property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes">
            <summary>
            The PartMarkPropertyElementTypes class represents the available property element types for part marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.AssemblyPosition">
            <summary>Returns the assembly position property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.PartPosition">
            <summary>Returns the part position property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Profile">
            <summary>Returns the profile property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Material">
            <summary>Returns the material property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Class">
            <summary>Returns the class property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Finish">
            <summary>Returns the finish property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Size">
            <summary>Returns the size property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Length">
            <summary>Returns the length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.Camber">
            <summary>Returns the camber property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.FittingsNsFs">
            <summary>Returns the fittings (NS/FS) property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.FaceDirection">
            <summary>Returns the face direction property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.GageOfOutstandingLeg">
            <summary>Returns the gage of the outstanding leg property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.CenterToCenterDistance">
            <summary>Returns the center-to-center distance property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PartMarkPropertyElementTypes.RotationAngle">
            <summary>Returns the rotation angle property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes">
            <summary>
            The ReinforcementMarkPropertyElementTypes class represents the available property element types for reinforcement marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Grade">
            <summary>Returns the grade property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Diameter">
            <summary>Returns the diameter property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Class">
            <summary>Returns the class property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Length">
            <summary>Returns the length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Number">
            <summary>Returns the number property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Position">
            <summary>Returns the position property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Shape">
            <summary>Returns the shape property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Weight">
            <summary>Returns the weight property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.Cc">
            <summary>Returns the cc property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.CcMin">
            <summary>Returns the cc min property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.CcMax">
            <summary>Returns the cc max property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.CcExact">
            <summary>Returns the cc exact property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMarkPropertyElementTypes.CcTarget">
            <summary>Returns the cc target property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes">
            <summary>
            The ReinforcementMeshMarkPropertyElementTypes class represents the available property element types for reinforcement mesh marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Grade">
            <summary>Returns the grade property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Size">
            <summary>Returns the size property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Class">
            <summary>Returns the class property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.MeshLength">
            <summary>Returns the mesh length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.MeshWidth">
            <summary>Returns the mesh width property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Number">
            <summary>Returns the number property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Position">
            <summary>Returns the position property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Shape">
            <summary>Returns the shape property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.Weight">
            <summary>Returns the weight property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcLongitudinal">
            <summary>Returns the longitudinal cc property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcMinLongitudinal">
            <summary>Returns the longitudinal cc min property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcMaxLongitudinal">
            <summary>Returns the longitudinal cc max property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcExactLongitudinal">
            <summary>Returns the longitudinal cc exact property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcCrossing">
            <summary>Returns the crossing cc property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcMinCrossing">
            <summary>Returns the crossing cc min property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcMaxCrossing">
            <summary>Returns the crossing cc max property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.CcExactCrossing">
            <summary>Returns the crossing cc exact property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.DiameterLongitudinal">
            <summary>Returns the longitudinal diameter property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ReinforcementMeshMarkPropertyElementTypes.DiameterCrossing">
            <summary>Returns the crossing diameter property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.MergedMarkPropertyElementTypes">
            <summary>
            The MergedMarkPropertyElementTypes class represents the available property element types for merged marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.MergedMarkPropertyElementTypes.BlockPrefix">
            <summary>Returns the block prefix property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.MergedMarkPropertyElementTypes.SingleMarkContent">
            <summary>Returns the single mark content property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.MergedMarkPropertyElementTypes.DistancesBetweenGroups">
            <summary>Returns the distances between groups property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.MergedMarkPropertyElementTypes.SymbolSeparatingBlocksInMarks">
            <summary>Returns the symbol separating blocks in marks property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes">
            <summary>
            The SurfacingMarkPropertyElementTypes class represents the available property element types for surfacing marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes.Material">
            <summary>Returns the material property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes.Class">
            <summary>Returns the class property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes.Code">
            <summary>Returns the code property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SurfacingMarkPropertyElementTypes.SurfaceTreatmentName">
            <summary>Returns the surface treatment name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ChamferMarkPropertyElementTypes">
            <summary>
            The ChamferMarkPropertyElementTypes class represents the available property element types for chamfer marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ChamferMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ChamferMarkPropertyElementTypes.Length">
            <summary>Returns the length property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ChamferMarkPropertyElementTypes.DX">
            <summary>Returns the change in the X direction property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ChamferMarkPropertyElementTypes.DY">
            <summary>Returns the change in the Y direction property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes">
            <summary>
            The ConnectionMarkPropertyElementTypes class represents the available property element types for connection marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.Code">
            <summary>Returns the code property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.DSTVCode">
            <summary>Returns the DSTV code property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.ConnectionNumber">
            <summary>Returns the connection number property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.RunningNumber">
            <summary>Returns the running number property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.Group">
            <summary>Returns the group property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ConnectionMarkPropertyElementTypes.ConnectionError">
            <summary>Returns the connection error property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailMarkPropertyElementTypes">
            <summary>
            The DetailMarkPropertyElementTypes class represents the available property element types for detail marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailMarkPropertyElementTypes.DetailName">
            <summary>Returns the detail name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailMarkPropertyElementTypes.SourceDrawingName">
            <summary>Returns the source drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailMarkPropertyElementTypes.SourceDrawingNameWhenMoved">
            <summary>Returns the source drawing name when moved property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionMarkPropertyElementTypes">
            <summary>
            The SectionMarkPropertyElementTypes class represents the available property element types for section marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionMarkPropertyElementTypes.SectionName">
            <summary>Returns the section name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionMarkPropertyElementTypes.SourceDrawingName">
            <summary>Returns the source drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionMarkPropertyElementTypes.SourceDrawingNameWhenMoved">
            <summary>Returns the source drawing name when moved property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes">
            <summary>
            The ViewLabelMarkPropertyElementTypes class represents the available property element types for view label marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.ViewName">
            <summary>Returns the view name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.Scale">
            <summary>Returns the scale property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.DrawingName">
            <summary>Returns the drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.SourceDrawingName">
            <summary>Returns the source drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.ViewLabelMarkPropertyElementTypes.SourceDrawingNameWhenMoved">
            <summary>Returns the source drawing name when moved property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes">
            <summary>
            The DetailViewLabelMarkPropertyElementTypes class represents the available property element types for detail view label marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes.DetailName">
            <summary>Returns the detail name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes.Scale">
            <summary>Returns the scale property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes.DrawingName">
            <summary>Returns the drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes.SourceDrawingName">
            <summary>Returns the source drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.DetailViewLabelMarkPropertyElementTypes.SourceDrawingNameWhenMoved">
            <summary>Returns the source drawing name when moved property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes">
            <summary>
            The SectionViewLabelMarkPropertyElementTypes class represents the available property element types for section view label marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.SectionName">
            <summary>Returns the section name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.Scale">
            <summary>Returns the scale property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.DrawingName">
            <summary>Returns the drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.SourceDrawingName">
            <summary>Returns the source drawing name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.SectionViewLabelMarkPropertyElementTypes.SourceDrawingNameWhenMoved">
            <summary>Returns the source drawing name when moved property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes">
            <summary>
            The PourMarkPropertyElementTypes class represents the available property element types for pour marks.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.Material">
            <summary>Returns the material property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.Name">
            <summary>Returns the name property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.Class">
            <summary>Returns the class property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.PourNumber">
            <summary>Returns the pour number property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.PourType">
            <summary>Returns the pour type property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.PourMarkPropertyElementTypes.PourConcreteMixture">
            <summary>Returns the contrete mixture property element type.</summary>
            <returns>The requested property element type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.PropertyElementType.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.PropertyElement.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PropertyElement.Value">
            <summary>
            The current value of the property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PropertyElement.Font">
            <summary>
            The font of the property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PropertyElement.PropertyType">
            <summary>
            The type of the property element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.#ctor(Tekla.Structures.Drawing.PropertyElement.PropertyElementType)">
            <summary>
             Creates a new property element instance with the given property element type.
            </summary>
            <param name="PropertyType">The property element type to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PropertyElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementPulloutElement">
            <summary>
            The ReinforcementPulloutElement class illustrates the shape and dimensions of a reinforcing bar in a drawing.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols">
            <summary>
            The shape of the bar ends in the pull-out.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.NONE">
            <summary>
            No end symbols.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.None">
            <summary>
            No end symbols.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.SINGLE">
            <summary>
            A single end symbol arrow.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.Single">
            <summary>
            A single end symbol arrow.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.BOTH">
            <summary>
            An arrow to both directions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbols.Both">
            <summary>
            An arrow to both directions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementPulloutElement.Rotation">
            <summary>
            The rotation of the pull-out.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.Rotation.Automatic">
            <summary>
            Automatic rotation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.Rotation.Plane">
            <summary>
            Plane rotation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementPulloutElement.Rotation.Global">
            <summary>
            Global 3D rotation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.Font">
            <summary>
            The font of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.AutomaticScaling">
            <summary>
            Whether the pull-out is scaled automatically or to a specified value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.ScaleX">
            <summary>
            The scaling of the pull-out in the X direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.ScaleY">
            <summary>
            The scaling of the pull-out in the Y direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.RotationAxis">
            <summary>
            The rotation of the pull-out.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.Exaggeration">
            <summary>
            Whether the pull-out is exaggerated.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.BendingRadius">
            <summary>
            Whether to show the pull-out bending radii.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.BendingAngle">
            <summary>
            Whether to show the pull-out bending angles.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.Dimensioning">
            <summary>
            Whether to show the pull-out dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.EndSymbolType">
            <summary>
            The type of the ending marks.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.CouplersEndAnchorSymbols">
            <summary>
            Whether to show coupler/anchor symbols or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementPulloutElement.CouplersScale">
            <summary>
            The scale of coupler/anchor symbols.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementPulloutElement.#ctor">
            <summary>
            Creates a new reinforcement pull-out element instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementPulloutElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementPulloutElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementPulloutElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SpaceElement">
            <summary>
            The SpaceElement class defines a space between the desired elements.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SpaceElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SpaceElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if both objects are space elements.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SpaceElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SymbolElement">
            <summary>
            The SymbolElement class represents a symbol in the Tekla Structures symbol library.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SymbolElement.Symbol">
            <summary>
            The symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SymbolElement.Color">
            <summary>
            The symbol color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SymbolElement.Height">
            <summary>
            The symbol height (mm).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.#ctor">
            <summary>
            Creates a new symbol element instance with the default symbol.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.#ctor(Tekla.Structures.Drawing.SymbolInfo)">
            <summary>
            Creates a new symbol element instance with the given symbol.
            </summary>
            <param name="Symbol">The symbol to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.#ctor(Tekla.Structures.Drawing.SymbolInfo,Tekla.Structures.Drawing.DrawingColors,System.Double)">
            <summary>
            Creates a new symbol element instance with the given symbol, color and height.
            </summary>
            <param name="Symbol">The symbol to be used.</param>
            <param name="Color">The symbol color to be used.</param>
            <param name="Height">The symbol height (mm) to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReportTemplateElement">
            <summary>
            The ReportTemplateElement class represents a template in the Tekla Structures template library.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReportTemplateElement.Template">
            <summary>
            The template.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReportTemplateElement.#ctor">
            <summary>
            Creates a new report template element instance with the default template.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReportTemplateElement.#ctor(Tekla.Structures.Drawing.TemplateInfo)">
            <summary>
            Creates a new report template element instance with the given template.
            </summary>
            <param name="Template">The template to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReportTemplateElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReportTemplateElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReportTemplateElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TemplateInfo">
            <summary>
            The TemplateInfo class holds template information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TemplateInfo.Default">
            <summary>
            The default template information.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.TemplateInfo.Name">
            <summary>
            Gets or sets the name of the template file. E.g. "revision".
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TemplateInfo.#ctor">
            <summary>
            Creates a new template info instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TemplateInfo.#ctor(System.String)">
            <summary>
            Creates a new template info instance with the given template file name.
            </summary>
            <param name="TemplateFile">The template file name to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TemplateInfo.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TextElement">
            <summary>
            The TextElement class defines a user-defined text in a mark content.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextElement.Font">
            <summary>
            The font of the text element.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.TextElement.Value">
            <summary>
            The textual value of the text element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextElement.#ctor(System.String)">
            <summary>
            Creates a new text element instance with the given textual value.
            </summary>
            <param name="Text">The textual value to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextElement.#ctor(System.String,Tekla.Structures.Drawing.FontAttributes)">
            <summary>
            Creates a new text element instance with the given textual value and font.
            </summary>
            <param name="Text">The textual value to be used.</param>
            <param name="Font">The font to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.TextElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.UserDefinedElement">
            <summary>
            The UserDefinedElement class represents a user-defined attribute specified by its name.
            A user-defined element is converted into a textual value before it is drawn.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UserDefinedElement._Name">
            <summary>
            The _ name
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UserDefinedElement._Value">
            <summary>
            The _ value
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UserDefinedElement._Font">
            <summary>
            The _ font
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UserDefinedElement._Unit">
            <summary>
            The _ unit
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UserDefinedElement.Name">
            <summary>
            The name of the user-defined attribute.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UserDefinedElement.Value">
            <summary>
            The value of the user-defined attribute.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UserDefinedElement.Font">
            <summary>
            The font of the user-defined attribute.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.UserDefinedElement.Unit">
            <summary>
            Gets or sets the unit attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UserDefinedElement.#ctor(System.String)">
            <summary>
             Creates a new user-defined element instance with the given name.
            </summary>
            <param name="Name">The name to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.UserDefinedElement.#ctor(System.String,Tekla.Structures.Drawing.FontAttributes)">
            <summary>
            Creates a new user-defined element instance with the given name and font.
            </summary>
            <param name="Name">The name to be used.</param>
            <param name="Font">The font to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.UserDefinedElement.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UserDefinedElement.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UserDefinedElement.GetUnformattedString">
            <summary>
             Returns the content as a string without formatting.
            </summary>
            <returns>The content as a string without formatting.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.SymbolInfo">
            <summary>
            The SymbolInfo class holds symbol information: the symbol file and the symbol index in the symbol file.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.SymbolInfo.Default">
            <summary>
            The default symbol information: the symbol 0 in the xsteel library.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SymbolInfo.SymbolIndex">
            <summary>
            Gets or sets the the symbol index. Throws an ArgumentOutOfRangeException
            if the symbol index is not in the range from 0 to 255.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SymbolInfo.SymbolFile">
            <summary>
            Gets or sets the symbol file. E.g. "xsteel".
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolInfo.#ctor">
            <summary>
            Creates a new symbol info instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new symbol info instance.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the symbol index is invalid.</exception>
            <param name="SymbolFile">The symbol file to be used.</param>
            <param name="SymbolIndex">The symbol index to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolInfo.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Symbol">
            <summary>
            The Symbol class defines a drawing object that is displayed as a symbol in a drawing.
            Symbols are located in the environment directory under the folder named "symbols"
            in .sym files that can contain up to 255 symbols.
            Symbol files can be created with SymEd. See the Tekla Structures help for more information.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase view = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
            
                       Symbol xs = new Symbol(view, new Point(1000, 2000), new SymbolInfo("xsteel", 52));
                       xs.Attributes.Angle = 30;
                       xs.Attributes.Frame.Type = FrameTypes.Rectangular;
                       xs.Attributes.Height = 4.0;
                       xs.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.Attributes">
            <summary>
            Gets or sets the symbol attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.InsertionPoint">
            <summary>
            Gets or sets the symbol insertion point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolInfo">
            <summary>
            Gets or sets the symbol information.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.Placing">
            <summary>
            The current placing of the object.
            See the placing types for different placing options.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new symbol instance using the default symbol information and standard attributes.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.PlacingBase)">
            <summary>
            Creates a new symbol instance using the default symbol information, standard attributes and the given placing.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
            <param name="Placing">The way the object is placed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.SymbolInfo)">
            <summary>
            Creates a new symbol instance using standard attributes.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
            <param name="SymbolInfo">The symbol information to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.SymbolInfo,Tekla.Structures.Drawing.PlacingBase)">
            <summary>
            Creates a new symbol instance using standard attributes.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
            <param name="SymbolInfo">The symbol information to be used.</param>
            <param name="Placing">The way the object is placed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.SymbolInfo,Tekla.Structures.Drawing.Symbol.SymbolAttributes)">
            <summary>
            Creates a new symbol instance using the given attributes.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
            <param name="SymbolInfo">The symbol information to be used.</param>
            <param name="Attributes">The symbol attributes to be applied.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.SymbolInfo,Tekla.Structures.Drawing.Symbol.SymbolAttributes,Tekla.Structures.Drawing.PlacingBase)">
            <summary>
            Creates a new symbol instance using the given attributes and placing.
            </summary>
            <param name="View">The view where to insert the symbol.</param>
            <param name="InsertionPoint">The location where to place the symbol.</param>
            <param name="SymbolInfo">The symbol information to be used.</param>
            <param name="Attributes">The symbol attributes to be applied.</param>
            <param name="Placing">The way the object is placed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.Insert">
            <summary>
            Inserts the symbol into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.Select">
            <summary>
            Selects the symbol from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.Modify">
            <summary>
            Modifies the symbol in the current drawing database.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">Thrown if Attributes contains values that are not supported by the object.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.Delete">
            <summary>
            Deletes the symbol from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.GetObjectAlignedBoundingBox">
            <summary>
            Returns the bounding box of the symbol (rectangle format).
            </summary>
            <returns>The bounding box of the symbol.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.GetAxisAlignedBoundingBox">
            <summary>
            Returns the bounding box of the symbol (rectangle format).
            </summary>
            <returns>The bounding box of the symbol.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.GetObjects">
            <summary>
            Gets the children objects of the current object.
            </summary>
            <returns>The children objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.GetObjects(System.Type[])">
            <summary>
            Gets the children objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children objects of the current object that are of certain types.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Symbol.SymbolAttributes">
            <summary>
            The SymbolAttributes class contains the attributes for the symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolAttributes.Color">
            <summary>
            The symbol color. Does not have an effect on symbols
            where the color is already defined in the symbol file.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolAttributes.Height">
            <summary>
            The height of the symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolAttributes.Angle">
            <summary>
            The angle of the symbol. Cannot be changed for an
            editor-created symbol when the symbol is created "along line".
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolAttributes.Frame">
            <summary>
            The frame for the symbol.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Symbol.SymbolAttributes.PreferredPlacing">
            <summary>
            The type of placing the object should use.
            See the preferred placing types for different types of placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.SymbolAttributes.#ctor">
            <summary>
            Creates a new default symbol attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.SymbolAttributes.#ctor(System.String)">
            <summary>
            Creates a symbol attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.SymbolAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Symbol.SymbolAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.AssemblyDrawing">
            <summary>
            The AssemblyDrawing class is for handling assembly drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AssemblyDrawing.AssemblyIdentifier">
            <summary>
            The identifier of the model object assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.AssemblyDrawing.SheetNumber">
            <summary>
            The sheet number of the drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a new assembly drawing with standard attributes.
            </summary>
            <param name="assemblyIdentifier">The identifier of the model object assembly</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.#ctor(Tekla.Structures.Identifier,System.String)">
            <summary>
            Instantiates a new assembly drawing with given attributes.
            </summary>
            <param name="assemblyIdentifier">The identifier of the model object assembly</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.#ctor(Tekla.Structures.Identifier,System.Int32)">
            <summary>
            Instantiates a new assembly drawing with standard attributes and with a specified sheet number.
            </summary>
            <param name="assemblyIdentifier">The identifier of the model object assembly</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.#ctor(Tekla.Structures.Identifier,System.Int32,System.String)">
            <summary>
            Instantiates a new assembly drawing with given attributes and with a specified sheet number.
            </summary>
            <param name="assemblyIdentifier">The identifier of the model object assembly</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.Modify">
            <summary>
            Updates the drawing object in the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.Insert">
            <summary>
            Inserts a new assembly drawing. Views are added according to the View Creation rules of the standard file.
            A drawing can be inserted only when there is no active drawing.
            </summary>
            <returns>True on success.</returns>
            <exception cref="T:Tekla.Structures.Drawing.CannotInsertDrawingException">Thrown if inserting a drawing when another drawing is active.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.AssemblyDrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ArrowheadTypes">
            <summary>
            The arrowhead types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadTypes.NoArrow">
            <summary>
            No arrowhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadTypes.FilledArrow">
            <summary>
            The filled arrowhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadTypes.LineArrow">
            <summary>
            The line arrowhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadTypes.CircleArrow">
            <summary>
            The open circle arrowhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadTypes.FilledCircleArrow">
            <summary>
            The filled circle arrowhead.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ArrowheadPositions">
            <summary>
            The positions of the arrowheads on the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadPositions.None">
            <summary>
            No arrowheads on the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadPositions.Start">
            <summary>
            One arrowhead at the start of the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadPositions.End">
            <summary>
            One arrowhead at the end of the line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ArrowheadPositions.Both">
            <summary>
            Arrowheads at both ends of the line.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ArrowheadAttributes">
            <summary>
            The ArrowheadAttributes class handles attributes related to arrowheads of different objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ArrowheadAttributes.ArrowPosition">
            <summary>
            The position of the arrowhead. The position is always ArrowheadPositions.Both for dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ArrowheadAttributes.Head">
            <summary>
            The type of the arrowhead.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ArrowheadAttributes.Height">
            <summary>
            The height of the arrowhead.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ArrowheadAttributes.Width">
            <summary>
            The width of the arrowhead.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ArrowheadAttributes.#ctor">
            <summary>
            Creates a new default arrowhead attributes instance. The default values are ArrowheadPositions.None, ArrowheadTypes.FilledArrow, height 2.0 and width 1.0.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ArrowheadAttributes.#ctor(Tekla.Structures.Drawing.ArrowheadPositions,Tekla.Structures.Drawing.ArrowheadTypes,System.Double,System.Double)">
            <summary>
            Creates a new arrowhead attributes instance with the given parameters.
            </summary>
            <param name="arrowPosition">The arrowhead position.</param>
            <param name="head">The arrowhead type.</param>
            <param name="height">The arrowhead height.</param>
            <param name="width">The arrowhead width.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ArrowheadAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.FontAttributes">
            <summary>
            The FontAttributes class contains the basic attributes for fonts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.FontAttributes.Color">
            <summary>
            The color of the font.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.FontAttributes.Height">
            <summary>
            The height of the font (in millimeters).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.FontAttributes.Name">
            <summary>
            The name of the font.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.FontAttributes.Italic">
            <summary>
            Whether the font is italic.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.FontAttributes.Bold">
            <summary>
            Whether the font is bold.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.FontAttributes.#ctor">
            <summary>
            Creates a new font attributes instance. The default color is black, the height is 2.5, 
            the font name is Arial and the values of italic and bold are false.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.FontAttributes.#ctor(Tekla.Structures.Drawing.DrawingColors,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font attributes instance with the given parameters.
            </summary>
            <param name="color">The color of the font.</param>
            <param name="height">The height of the font.</param>
            <param name="fontName">The name of the font.</param>
            <param name="italic">The italic specifier.</param>
            <param name="bold">The bold specifier.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.FontAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.FontAttributes.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.HatchAttributes">
            <summary>
            The HatchAttributes base class, inherited by ModelObjectHatchAttributes
            and GraphicObjectHatchAttributes, contains hatch attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.Name">
            <summary>
            The name of the hatch.
            If an empty string is given as hatch name it will become "None".
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.Color">
            <summary>
            The color of the hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.BackgroundColor">
            <summary>
            The background color of the hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.DrawBackgroundColor">
            <summary>
            Sets whether the background color will be enabled or disabled for the hatch.
            See also: <see cref="P:Tekla.Structures.Drawing.HatchAttributes.BackgroundColor"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.Angle">
            <summary>
            The angle in which to draw the hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.FactorType">
            <summary>
            The type of the hatch factor.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.ScaleX">
            <summary>
            The scale value of the hatch in the X-direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.HatchAttributes.ScaleY">
            <summary>
            The scale value of the hatch in the Y-direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingDirectionAttributes">
            <summary>
            The PlacingDirectionAttributes class contains the basic attributes for placing directions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingDirectionAttributes.Positive">
            <summary>
            The positive direction of placing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingDirectionAttributes.Negative">
            <summary>
            The negative direction of placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDirectionAttributes.#ctor">
            <summary>
            Creates a new placing direction attributes instance. The positive and negative 
            directions are set to false by default.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDirectionAttributes.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new placing direction attributes instance.
            </summary>
            <param name="positive">Sets the positive direction.</param>
            <param name="negative">Sets the negative direction.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDirectionAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PlacingDistanceAttributes">
            <summary>
            The PlacingDistanceAttributes class contains the basic attributes for placing distances.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingDistanceAttributes.SearchMargin">
            <summary>
            Gets or sets the search marginal for placing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingDistanceAttributes.MinimalDistance">
            <summary>
            Gets or sets the minimal distance for placing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PlacingDistanceAttributes.MaximalDistance">
            <summary>
            Gets or sets the maximal distance for placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDistanceAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.PlacingDistanceAttributes"/> class.
            The default values are a 0.0 search margin and a 0.0 minimal distance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDistanceAttributes.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new placing distance attributes instance with the given search marginal and minimal distance.
            </summary>
            <param name="searchMargin">The search marginal to be used.</param>
            <param name="minimalDistance">The minimal distance to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDistanceAttributes.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new placing distance attributes instance with the given search margin, minimal and maximal distance.
            </summary>
            <param name="searchMargin">The search margin to be used.</param>
            <param name="minimalDistance">The minimal distance to be used.</param>
            <param name="maximalDistance">The maximal distance to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDistanceAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PlacingDistanceAttributes.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of the current instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingType">
            <summary>
            The type of Drawing
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_UNKNOWN_DRAWING">
            <summary>
            Unknown Drawing type
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_GA_DRAWING">
            <summary>
            General Arrangement Drawing
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_SINGLE_PART_DRAWING">
            <summary>
            Single part Drawing
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_ASSEMBLY_DRAWING">
            <summary>
            Assembly Drawing
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_MULTI_DRAWING">
            <summary>
            Multi Drawing
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_CAST_UNIT_DRAWING_BY_ID">
            <summary>
            Cast Unit Drawing by id
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_CAST_UNIT_DRAWING_BY_POSITION">
            <summary>
            Cast Unit Drawing by position
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingType.DOT_GR_ANNOTATION_DRAWING">
            <summary>
            Annotation drawing
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingUpToDateStatus">
            <summary>
            The drawing up to date status.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.DrawingIsUpToDate">
            <summary>
            The drawing is up to date.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.PartsWereModified">
            <summary>
            Some parts in the drawing were modified since the last update.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.DrawingIsUpToDateButMayNeedChecking">
            <summary>
            The drawing is up to date but may need checking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.IncludedDrawingModified">
            <summary>
            The included drawing was modified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.OriginalPartDeleted">
            <summary>
            The original part from which the drawing was created was deleted since the last update.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.AllPartsDeleted">
            <summary>
            All parts were deleted.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.NumberOfPartsInNumberingSeriesIncreased">
            <summary>
            The number of parts in the numbering series has increased since the last update.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.NumberOfPartsInNumberingSeriesDecreased">
            <summary>
            The number of parts in the numbering series has decreased since the last update.
             </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.DrawingWasCloned">
            <summary>
            The drawing was cloned from another drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.DrawingWasUpdated">
            <summary>
            The drawing was updated.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.CopiedViewChanged">
            <summary>
            The copied view changed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.DrawingWasSplitted">
            <summary>
            The drawing was splitted (cloned) during numbering.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.MovedViewDeleted">
            <summary>
            The moved view was deleted.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingUpToDateStatus.MovedViewLabelChanged">
            <summary>
            The moved view symbol has changed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.IncludeRevisionMarkEnum">
            <summary>
            Options for including a revision info in file name
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.IncludeRevisionMarkEnum.Never">
            <summary>
            Never include revision info
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.IncludeRevisionMarkEnum.Always">
            <summary>
            Always include revision info
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.IncludeRevisionMarkEnum.ByFormatString">
            <summary>
            Include revision info if it's present in the format string, otherwise not
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Drawing">
            <summary>
            The Drawing class represents a drawing in Tekla Structures.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Name">
            <summary>
            The name of the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.UpToDateStatus">
            <summary>
            Gets the drawing up to date status.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsMasterDrawing">
            <summary>
            Describes whether the drawing is a master drawing (shown with a special symbol on the drawing list).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsLocked">
            <summary>
            Describes whether the drawing is locked.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsIssued">
            <summary>
            Describes whether the drawing is issued.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsIssuedButModified">
            <summary>
            Describes whether the drawing is issued but modified since it was issued.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsFrozen">
            <summary>
            Describes whether the drawing is frozen.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsReadyForIssue">
            <summary>
            Describes whether the drawing is ready for issue.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Title1">
            <summary>
            The first drawing title.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Title2">
            <summary>
            The second drawing title.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Title3">
            <summary>
            The third drawing title.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Mark">
            <summary>
            The drawing mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.CreationDate">
            <summary>
            The drawing creation date.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.ModificationDate">
            <summary>
            The drawing modification date.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IssuingDate">
            <summary>
            The drawing issuing date.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.OutputDate">
            <summary>
            The drawing output date. XS_DISABLE_DRAWING_PLOT_DATE controls whether this date is set.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.Layout">
            <summary>
            Gets the drawing layout attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.SectionViewStartLabel">
            <summary>
            Gets the drawing attribute for start label of section view
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsReadyForIssueBy">
            <summary>
            Gets the logged in username that set the drawing Ready for issue
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.IsLockedBy">
            <summary>
            Gets the logged in username that set the drawing to locked
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Drawing.CommitMessage">
            <summary>
            Gets the commit message
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.#ctor(System.Boolean,Tekla.Structures.Drawing.DrawingType)">
            <summary>
            Create a Drawing instance
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.GetSheet">
            <summary>
            Gets the sheet of the drawing.
            </summary>
            <returns>The sheet of the drawing.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.IsSameDatabaseObject(Tekla.Structures.Drawing.DatabaseObject)">
            <summary>
            Returns true if the current object and the given object are referencing the same database object.
            </summary>
            <param name="Object">The other object to be used.</param>
            <returns>True if the objects are referencing the same database object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.QueryUserPropertySet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <summary>
            Sets a user property (UDA) to the drawing.
            </summary>
            <param name="Property">The property.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.QueryUserPropertyGet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <summary>
            Gets a user property (UDA) from the drawing.
            </summary>
            <param name="Property">The property.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.CommitChanges">
            <summary>
            Commits the changes made to the drawings database so far.
            Commit inserts a kind of save-point into the database and the save-point will be retrieved if the user does undo.
            Commit also executes all messages.
            Please note that you need to also to save the drawings database to persists the changes to disk.
            </summary>
            <returns>True on success.</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.CommitChanges(System.String)">
            <summary>
            Commits the changes made to the drawings database so far.
            Commit inserts a kind of save-point into the database and the save-point will be retrieved if the user does undo.
            Commit also executes all messages.
            Please note that you need to also to save the drawings database to persists the changes to disk.
            </summary>
            <param name="Message">The message to be saved with the commit.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.LoadAttributeFile(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.PlaceViews">
            <summary>
            Places views on the sheet.
            Computes the required size of the views to fit the parts, then places the views so that they fit on the sheet and do not overlap.
            Adjusts the sheet size if needed.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.Delete">
            <summary>
            Deletes the drawing. An active drawing cannot be deleted.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.CannotDeleteActiveDrawingException">Thrown if the drawing is active.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.GetPlotFileName(System.Boolean)">
            <summary>Get plot file name.</summary>
            <remarks>
              Note: The returned plot file name can contain invalid file name characters.
            </remarks>
            <param name="includeRevisionInfo">Whether to include revision info.</param>
            <returns>The plot file name or an empty string if an error occured.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Drawing.GetPlotFileNameExt(Tekla.Structures.Drawing.IncludeRevisionMarkEnum)">
            <summary>Get plot file name.</summary>
            <remarks>
              Note: The returned plot file name can contain invalid file name characters.
            </remarks>
            <param name="includeRevisionInfo">How or if to include revision info.</param>
            <returns>The plot file name or an empty string if an error occured.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingEnumerator">
            <summary>
            The DrawingEnumerator class provides the means to iterate through drawing instances. Drawing enumerators
            are generated by the drawing handler.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler DrawingHandler = new DrawingHandler();
            
                       // Loop through all available drawings and delete all GA drawings.
                       DrawingEnumerator AllDrawings = DrawingHandler.GetDrawings();
            
                       while(AllDrawings.MoveNext())
                       {
                           Drawing CurrentDrawing = AllDrawings.Current as GADrawing;
                           if(CurrentDrawing != null)
                           {
                               CurrentDrawing.Delete();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingEnumerator.Current">
            <summary>
            Gets the current drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingEnumerator.GetCurrent">
            <summary>
            Returns the current item as an object. Needed to make IEnumerator.Current work correctly.
            </summary>
            <returns>The current item as an object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingHandler">
             <summary>
             The DrawingHandler class initializes the interface from a .NET application to Tekla Structures. This object
             must be created before any actions can be performed on Tekla Structures drawings.
             When this object is created, it is possible to ask the current active
             drawing in Tekla Structures, get a list of drawings or create a new drawing.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Drawing;
             
             public class Example
             {
                    public void Example1()
                    {
                        // Open the interface, get the current drawing and loop through all the views in the drawing.
                        DrawingHandler DrawingHandler = new DrawingHandler();
             
                        if(DrawingHandler.GetConnectionStatus())
                        {
                            Drawing CurrentDrawing = DrawingHandler.GetActiveDrawing();
                            if(CurrentDrawing != null)
                            {
                                DrawingObjectEnumerator Enum = CurrentDrawing.GetSheet().GetViews();
             
                                while(Enum.MoveNext())
                                {
                                    Tekla.Structures.Drawing.View View = Enum.Current as Tekla.Structures.Drawing.View;
                                    // Perform actions for the view here.
                                }
                            }
                        }
                    }
             }
             </code>
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                        // Add some views.
                        DrawingHandler DrawingHandler = new DrawingHandler();
             
                        Drawing MyDrawing = DrawingHandler.GetActiveDrawing();
             
                        if(MyDrawing == null) // If the drawing editor is not open, create a new drawing with standard settings.
                        {
                            MyDrawing = new GADrawing();
                            MyDrawing.Insert();
                        }
             
                        DrawingHandler.SetActiveDrawing(MyDrawing, false);
             
                        if(MyDrawing != null)
                        {
                            Tekla.Structures.Drawing.View MyView = new Tekla.Structures.Drawing.View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(), new AABB(new Point(), new Point(10000, 10000, 10000)));
                            MyView.Insert();
             
                            MyView = new Tekla.Structures.Drawing.View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(), new AABB(new Point(), new Point(30000, 30000, 10000)));
                            MyView.Insert();
                        }
             
                        DrawingHandler.SaveActiveDrawing(); // Save is needed if the drawing is opened to the editor with SetActiveDrawing.
                    }
             }
            </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingHandler.QueryParameterClose">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.QueryParameterClose.QUERY_CLOSE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.QueryParameterClose.QUERY_SAVE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.QueryParameterClose.QUERY_SAVE_AND_CLOSE">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingHandler.MessageExecutionModeEnum">
            <summary>
            The message execution modes of Tekla Structures.
            </summary>
            <remarks>
            <para>The message execution mode of Tekla Structures controls whether
            messages are executed after each database operation or by an explicit
            call to execute messages.</para>
            <para>There may be some speed benefits if the BY_COMMIT mode is used when inserting
            a lot of objects. The messages are then executed once after the objects have been inserted.</para>
            </remarks>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.MessageExecutionModeEnum.INSTANT">
            <summary>
            Executes messages after each database operation. All objects
            appear instantly on the screen when using the INSTANT mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHandler.MessageExecutionModeEnum.BY_COMMIT">
            <summary>
            Executes messages only when Drawing.CommitChanges() is called.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.#ctor">
            <summary>
            Creates a new drawing handler instance, a "handle" to Tekla.Structures.Drawing.
            When a drawing handler object is created, it is possible to ask the current active drawing
            in Tekla Structures, get a list of drawings or create a new drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetActiveDrawingIdentifier">
            <summary>
            Gets the identifier for active drawing
            </summary>
            <returns>Active drawing identifier</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetActiveDrawingType">
            <summary>
            Gets the type of active drawing
            </summary>
            <returns>Active drawing type</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetDrawingType(Tekla.Structures.Identifier)">
            <summary>
            Gets the type of given drawing's id
            </summary>
            <returns>Active drawing type</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetConnectionStatus">
            <summary>
            Returns true if a proper connection to the Tekla Structures process has been established. A proper connection 
            to Tekla Stuctures in the drawing API needs Tekla Structures up and running and a model open. 
            Currently, there's no way to re-establish the connection.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.SetMessageExecutionStatus(Tekla.Structures.Drawing.DrawingHandler.MessageExecutionModeEnum)">
            <summary>
            Sets the message execution mode for the application.
            </summary>
            <param name="mode">The new mode.</param>
            <returns>The old message execution mode.</returns>
            <seealso cref="T:Tekla.Structures.Drawing.DrawingHandler.MessageExecutionModeEnum"/>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetMessageExecutionStatus">
            <summary>
            Gets the current message execution mode for the application.
            </summary>
            <returns>The current message execution mode.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetDrawings">
            <summary>
            Gets all the drawings from the database.
            </summary>
            <returns>All the drawings from the database.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetAnnotationDrawings">
            <summary>
            Gets all annotation drawings.
            </summary>
            <returns>All annotation drawings from the database.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetDrawingSelector">
            <summary>
            Gets a drawing selector.
            With a drawing selector the list of selected drawings can be gotten.
            </summary>
            <returns>The drawing selector.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetDrawingObjectSelector">
            <summary>
            Gets a drawing object selector.
            With a drawing object selector drawing objects can be selected and highlighted in the drawing editor. 
            A drawing object selector also provides a list of currently selected drawing objects.
            </summary>
            <returns>The drawing object selector for the current drawing. Null if no drawing is active.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetPicker">
            <summary>
            Gets a picker for picking points and objects in a drawing.
            </summary>
            <returns>A picker object if the drawing editor is open. Otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetActiveDrawing">
            <summary>
            Returns an instance of the active drawing that is currently open in Tekla Structures.
            </summary>
            <returns>The drawing that is open in Tekla Structures or null if no drawing is open.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.SetActiveDrawing(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Sets the active drawing that is currently open in Tekla Structures.
            </summary>
            <param name="drawing">The drawing to be set as the active drawing.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.SetActiveDrawing(Tekla.Structures.Drawing.Drawing,System.Boolean)">
            <summary>
            Sets the active drawing that is currently open in Tekla Structures.
            </summary>
            <param name="drawing">The drawing to be set as the active drawing.</param>
            <param name="showDrawing">Whether to open the drawing as visible or in the background (faster).</param>
            <exception cref="T:Tekla.Structures.Drawing.CannotPerformOperationDrawingNotUpToDateException">Thrown if the drawing is not up to date.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.SaveActiveDrawing">
            <summary>
            Saves the currently open drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.CloseActiveDrawing">
            <summary>
            Closes the drawing editor.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.CloseActiveDrawing(System.Boolean)">
            <summary>
            Closes the drawing editor.
            </summary>
            <param name="save">Whether the active drawing should be saved on close.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.PrintDrawing(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Drawing.PrintAttributes)">
            <summary>
            Prints the drawing using the given printer instance. 
            NOTE! The drawing cannot be active, otherwise printing fails.
            </summary>
            <param name="drawing">The drawing to be printed.</param>
            <param name="printAttributes">The print attributes for the print job.</param>
            <returns>True on success, false if printing fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.PrintDrawing(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Drawing.PrintAttributes,System.String)">
            <summary>
            Prints the drawing to file using the given printer instance.
            NOTE! The drawing cannot be active, otherwise printing fails.
            </summary>
            <param name="drawing">The drawing to be printed.</param>
            <param name="printAttributes">The print attributes for the print job.</param>
            <param name="fileName">The name of the output file.</param>
            <returns>True on success, false if printing fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.PrintDrawing(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Drawing.DPMPrinterAttributes)">
            <summary>
            Prints the drawing using the given printer attributes.
            </summary>
            <param name="drawing">The drawing to be printed.</param>
            <param name="printAttributes">The print attributes for the print job.</param>
            <exception cref="T:System.ArgumentException">Thrown if PDF printing selected, but no file name provided.</exception>
            <returns>True on success, false if printing fails.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.PrintDrawing(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Drawing.DPMPrinterAttributes,System.String)">
            <summary>
            Prints the drawing to file using the given printer attributes and name of the output file.
            The given output file overrides the printer attributes file settings.
            </summary>
            <param name="drawing">The drawing to be printed.</param>
            <param name="printAttributes">The print attributes for the print job.</param>
            <param name="outputFile">The print output file name.</param>
            <exception cref="T:System.ArgumentException">Thrown if PDF printing selected, but no file name provided.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if drawing or printerAttributes is null.</exception>
            <returns>True on success, false if printing fails.</returns>
            <remarks>If there is an active drawing visible in the drawing editor and it is a
            different drawing to the specified drawing, the active drawing will be closed.</remarks>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.PrintDrawings(System.Collections.Generic.List{Tekla.Structures.Drawing.Drawing},Tekla.Structures.Drawing.DPMPrinterAttributes)">
            <summary>
            Prints the list of drawings using the given printer attributes.
            </summary>
            <param name="drawings">The list of drawings to be printed.</param>
            <param name="printAttributes">The print attributes for the print job.</param>
            <exception cref="T:System.ArgumentException">Thrown if PDF printing selected, but no file name provided.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if drawings or printerAttributes is null.</exception>
            <returns>True on success, false if printing fails.</returns>
            <remarks>If there is an active drawing visible in the drawing editor and it is a
            different drawing to the specified drawings, the active drawing will be closed.</remarks>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.UpdateDrawing(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Updates the drawing.
            This is the same as pressing Update on the drawing list for a selected drawing.
            NOTE! The drawing cannot be active, otherwise the operation fails.
            NOTE! Numbering must be executed before this operation.
            </summary>
            <param name="drawing">The drawing to be updated.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.IssueDrawing(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Issues the drawing if the drawing is not issued or was previously issued but has been modified since.
            This is the same as pressing Issue on the drawing list for a selected drawing.
            </summary>
            <param name="drawing">The drawing to be issued.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.UnissueDrawing(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Unissues the drawing.
            This is the same as pressing Unissue on the drawing list for a selected drawing.
            </summary>
            <param name="drawing">The drawing to be unissued.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingHandler.GetModelObjectIdentifiers(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Gets model object identifiers of the drawing.
            </summary>
            <param name="drawing">The drawing where objects are fetched.</param>
            <returns>List of model object identifiers in the drawing.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingObject">
            <summary>
            The DrawingObject class is an abstract base class for all the objects in the drawing.
            All drawing objects have a database identifier and belong to some view.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.SelectCorrectInstance``1(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Selects the correct instance.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="id">The identifier.</param>
            <param name="drawingIdentifier">The drawing identifier.</param>
            <returns>An instance of type derived from <see cref="T:Tekla.Structures.Drawing.DrawingObject"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetCorrectInstance(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Gets the correct instance.
            </summary>
            <param name="id">The identifier.</param>
            <param name="drawingIdentifier">The drawing identifier.</param>
            <returns>An instance of <see cref="T:Tekla.Structures.Drawing.DrawingObject"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetDrawingObject(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Gets the drawing object.
            </summary>
            <param name="ID">The identifier.</param>
            <param name="DrawingIdentifier">The drawing identifier.</param>
            <returns>An instance of <see cref="T:Tekla.Structures.Drawing.DrawingObject"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetCorrectInstance(Tekla.Structures.Identifier,Tekla.Structures.Identifier,Tekla.Structures.Drawing.DrawingObject.ObjectTypes)">
            <summary>
            Gets the correct instance.
            </summary>
            <param name="id">The identifier.</param>
            <param name="drawingIdentifier">The drawing identifier.</param>
            <param name="Type">The type.</param>
            <returns>The correct instance of type <see cref="T:Tekla.Structures.Drawing.DrawingObject"/>.</returns>
            <exception cref="T:System.NotImplementedException">Report Templates have not been implemented yet.</exception>
            <exception cref="T:System.ApplicationException">Unsupported type! " + Type</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.SetView(Tekla.Structures.Drawing.ViewBase)">
            <summary>
            Set view to which the drawing object belongs
            </summary>
            <param name="view">The view.</param>
            <returns><c>True</c> if setting of view succeeds.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingObject.ObjectTypes">
            <summary>
            Type of the drawing object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetTypeOfObjectTypes">
            <summary>
            Gets the type of object types.
            </summary>
            <returns>Instance of <see cref="P:Tekla.Structures.Drawing.DrawingObject.Type"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetRelatedObjects">
            <summary>
            Gets the related objects of the current object.
            </summary>
            <returns>The related objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetRelatedObjects(System.Type[])">
            <summary>
            Gets the related objects of the current object that are of certain types.
            </summary>
            <param name="typeFilter">The types of the objects to get.</param>
            <returns>The related objects of the current object that are of certain types.</returns>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingObject._Attributes">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingObject.Attributes">
            <summary>
            Gets or sets the attributes of the current object.
            Only attributes of the same type as the object are allowed.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingObject.View">
            <summary>
            Gets or sets the view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DrawingObject.Type">
            <summary>
            Type of the object
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetView">
            <summary>
            Gets the view where the drawing object is.
            </summary>
            <returns>The view where the drawing object is.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetDrawing">
            <summary>
            Gets the drawing where the drawing object is.
            </summary>
            <returns>The drawing where the drawing object is.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.GetSheet(Tekla.Structures.Identifier)">
            <summary>
            Gets the sheet.
            </summary>
            <param name="DrawingIdentifier">The drawing identifier.</param>
            <returns>The sheet.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingObject.NoAttributes">
            <summary>
            The NoAttributes class defines attributes for objects that do not contain any attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.NoAttributes.InitializeDefaultAttributes">
            <summary>
            Initializes the default attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.NoAttributes.#ctor">
            <summary>
            Creates a new default no attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.NoAttributes.#ctor(System.String)">
            <summary>
            Creates a new no attributes instance. No attributes are loaded from the
            attribute file as it is not possible to load attributes for objects of
            this type.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.NoAttributes.LoadAttributes(System.String)">
            <summary>
            It is not possible to load attributes for objects of this type because
            the objects have no attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>False because it is not possible to load attributes.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.NoAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.DrawingObject"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.QueryUserPropertySet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.QueryUserPropertyGet(Tekla.Structures.DrawingInternal.dotGrUserProperty_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.ToString">
            <summary>
            Changes the string presentation of the drawing object.
            </summary>
            <returns>The name of the current drawing object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.DrawingObject.IsEqual(System.Object)">
            <summary>
            Compares the current object with the given object.
            Checks every field of both objects for equality.
            </summary>
            <param name="ObjectToCompare">An object of the same type to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes">
            <summary>
            The DimensionSetBaseAttributes class is the base class for all dimension set attributes.
            The class contains attributes that are common to all dimension sets.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Arrowhead">
            <summary>
            The arrowhead attributes of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Color">
            <summary>
            The color of the dimension line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.TransparentBackground">
            <summary>
            The dimension text background transparency. (transparent/opaque)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Format">
            <summary>
            The format attributes of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Placing">
            <summary>
            The placing attributes of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Text">
            <summary>
            The text attributes of the dimension.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.#ctor">
            <summary>
            Creates a new default dimension set base attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default dimension set base attributes instance that loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.#ctor(System.String)">
            <summary>
            Creates a new dimension set base attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new dimension set base attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
            <param name="SkipLoadingAttributes">Defines if attribute loading should be skipped.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions">
            <summary>
            The value precisions for the dimensions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.Whole">
            <summary>
            The value is rounded to the nearest whole (1).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerTwo">
            <summary>
            The value is rounded to the nearest half (1/2).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerThree">
            <summary>
            The value is rounded to the nearest third (1/3).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerFour">
            <summary>
            The value is rounded to the nearest fourth (1/4).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerEight">
            <summary>
            The value is rounded to the nearest eighth (1/8).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerSixteen">
            <summary>
            The value is rounded to the nearest sixteenth (1/16).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerThirtytwo">
            <summary>
            The value is rounded to the nearest thirtysecond (1/32).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerTen">
            <summary>
            The value is rounded to one decimal (1/10).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerHundred">
            <summary>
            The value is rounded to two decimals (1/100).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions.OnePerThousand">
            <summary>
            The value is rounded to three decimals (1/1000).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats">
            <summary>
            The dimension value formats.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.NoDecimals">
            <summary>
            The value is with no decimals.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.OneOptionalDecimal">
            <summary>
            The value is with one decimal if the value is not whole.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.OneDecimal">
            <summary>
            The value is with one decimal.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.TwoOptionalDecimals">
            <summary>
            The value is with two decimals if the value is not whole.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.TwoDecimals">
            <summary>
            The value is with two decimals.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.ThreeOptionalDecimals">
            <summary>
            The value is with three decimals if the value is not whole.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.ThreeDecimals">
            <summary>
            The value is with three decimals.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.RationalPart">
            <summary>
            The value is with a rational part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats.SuperscriptEnding">
            <summary>
            The value is with superscript ending.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits">
            <summary>
            The units usable with the dimensions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits.Automatic">
            <summary>
            The unit of the value is selected automatically.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits.Millimeter">
            <summary>
            The value is shown in millimeters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits.Centimeter">
            <summary>
            The value is shown in centimeters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits.Meter">
            <summary>
            The value is shown in meters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits.Inch">
            <summary>
            The value is shown in inches.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Placings">
            <summary>
            The placing types of the objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Placings.Free">
            <summary>
            The placing of the object is free.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.Placings.Fixed">
            <summary>
            The placing of the object is fixed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes">
            <summary>
            The frame types around the dimension values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes.None">
            <summary>
            No frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes.Rectangle">
            <summary>
            The frame is a rectangle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes.Underline">
            <summary>
            The frame is an underline.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes.RoundedRectangle">
            <summary>
            The frame is a rectangle with rounded ends.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes.SharpenedRectangle">
            <summary>
            The frame is a rectangle with sharpened ends.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextPlacings">
            <summary>
            The placing types of the dimension value text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextPlacings.AboveDimensionLine">
            <summary>
            The dimension value text is placed above the dimension line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextPlacings.OnDimensionLine">
            <summary>
            The dimension value text is placed on the dimension line.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombineFormats">
            <summary>
            The combined dimension formats.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombineFormats.Off">
            <summary>
            No combining.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombineFormats.NumberOfItemsTimesLength">
            <summary>
            The number of items times the dimension length. E.g. 3*60.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombineFormats.NumberOfItemsTimesLengthEqualsResult">
            <summary>
            The number of items times the dimension length equals the result. E.g. 3*60=180.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes">
            <summary>
            The dimension types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.Relative">
            <summary>
            The point to point dimensions. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.Absolute">
            <summary>
            The dimensions from a common starting point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.RelativeAndAbsolute">
            <summary>
            The combination of point to point and a common start point. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.USAbsolute">
            <summary>
            The dimensions from a common starting point, which includes a running 
            dimension mark (RD). 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.USAbsolute2">
            <summary>
            The dimensions from a common starting point, which includes a running 
            dimension mark (RD), but short dimensions are changed to point to 
            point dimensions. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.AbsoluteWithShortRelatives">
            <summary>
            The dimensions from a common starting point, but short 
            dimensions are changed to point to point dimensions. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.AbsoluteWithAllRelativesAbove">
            <summary>
            The combination of point to point and a common start point, but 
            the point to point dimensions are placed above the absolute. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTypes.Elevation">
            <summary>
            Creates an elevation dimension at a picked point.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExtensionLineTypes">
            <summary>
            The extension line types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExtensionLineTypes.No">
            <summary>
            The extension lines are visible.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExtensionLineTypes.Yes">
            <summary>
            The extension lines of a dimension are not visible.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExtensionLineTypes.NotOnGridlines">
            <summary>
            The extension lines are not visible when the lines are on a grid.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ShortDimensionTypes">
            <summary>
            The position of the short dimension value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ShortDimensionTypes.Inside">
            <summary>
            The dimension value is set between the dimension lines when the dimension is too short.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ShortDimensionTypes.Outside">
            <summary>
            The dimension value is moved outside of the dimension when the dimension is too short.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CurvedDimensionTypes">
            <summary>
            The type of the curved dimension.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CurvedDimensionTypes.Distance">
            <summary>
            The distance of the points is displayed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CurvedDimensionTypes.Angle">
            <summary>
            The angle is displayed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationDirections">
            <summary>
            The direction of the exaggeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationDirections.LeftDown">
            <summary>
            Left / Down.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationDirections.RightUp">
            <summary>
            Right / Up.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationDirections.Both">
            <summary>
            Both Left/Down and Right / Up.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationOrigins">
            <summary>
            The origin of the exaggeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationOrigins.NearDimensionLine">
            <summary>
            Start the exaggeration close to the dimension line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationOrigins.NearMeasuredObject">
            <summary>
            Start the exaggeration as soon as possible as seen from the measured part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes">
            <summary>
            The DimensionFormatAttributes class controls the precision, format and unit of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.Precision">
            <summary>
            The precision of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.Format">
            <summary>
            The format of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.Unit">
            <summary>
            Gets or sets the unit of the dimension. Changing this attribute
            does not have any effect if the dimension measures an angle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.UseDigitGrouping">
            <summary>
            Gets or sets a value indicating whether digit grouping should be used or not.
            </summary>
            <example>
            The following example shows how the property works:
            <list type="bullet">
            <item>true: 123 456.789</item>
            <item>false: 123456.789</item>
            </list>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.#ctor">
            <summary>
            Creates a new dimension format attributes instance. By default the format rounds the dimension value to 
            the nearest whole and shows it with no decimals. The unit is selected automatically.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.#ctor(Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValuePrecisions,Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueFormats,Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionValueUnits)">
            <summary>
            Creates a new dimension format attributes instance with the given parameters.
            </summary>
            <param name="precision">The precision of the dimension.</param>
            <param name="format">The format of the dimension.</param>
            <param name="unit">The unit of the dimension.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionFormatAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes">
            <summary>
            The DimensionPlacingAttributes class controls the placing of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.Placing">
            <summary>
            The placing type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.Direction">
            <summary>
            The placing direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.Distance">
            <summary>
            The placing distance attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.#ctor">
            <summary>
            Creates a new dimension placing attributes instance. The placing is set to the free placing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.#ctor(Tekla.Structures.Drawing.DimensionSetBaseAttributes.Placings,Tekla.Structures.Drawing.PlacingDirectionAttributes,Tekla.Structures.Drawing.PlacingDistanceAttributes)">
            <summary>
            Creates a new dimension placing attributes instance with the given parameters.
            </summary>
            <param name="placing">The placing type of the dimension.</param>
            <param name="direction">The placing direction attributes of the dimension.</param>
            <param name="distance">The placing distance attributes of the dimension.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionPlacingAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes">
            <summary>
            The DimensionTextAttributes class controls the dimension value representation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.Font">
            <summary>
            The font attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.Frame">
            <summary>
            The frame type of the dimension value text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.TextPlacing">
            <summary>
            The place of the dimension value text.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.#ctor">
            <summary>
            Creates a new dimension text attributes instance. By default the default font is used, no frame is drawn
            and the value text is above the dimension line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.#ctor(Tekla.Structures.Drawing.FontAttributes,Tekla.Structures.Drawing.DimensionSetBaseAttributes.FrameTypes,Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextPlacings)">
            <summary>
            Creates a new dimension text attributes instance with the given parameters.
            </summary>
            <param name="font">The font attributes of the dimension value text.</param>
            <param name="frame">The frame type of the dimension value text.</param>
            <param name="textPlacing">The place of the dimension value text.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionTextAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes">
            <summary>
            The CombinedDimensionAttributes class handles attributes related to 
            the combination of identical parts of dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes.MinimumNumberToCombine">
            <summary>
            The minimum number of dimensions to be combined.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes.Format">
            <summary>
            The combined dimension format.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes.#ctor">
            <summary>
            Creates a new combined dimension attributes instance. 
            The defaults combine a minimum of three identical dimensions to be
            shown as the number of items times the length of the dimension.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes.#ctor(System.Int32,Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombineFormats)">
            <summary>
            Creates a new combined dimension attributes instance with the given parameters.
            </summary>
            <param name="minimumNumberToCombine">The minimum number of dimensions to be combined.</param>
            <param name="format">The format of the combined dimensions.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.CombinedDimensionAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes">
            <summary>
            The DimensionExaggerationAttributes class handles attributes related to 
            the exaggeration of dimension lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationEnabled">
            <summary>
            Exaggeration is enabled if the value is true.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationDirection">
            <summary>
            The ExaggerationDirection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationOrigin">
            <summary>
            The ExaggerationOrigin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationWidth">
            <summary>
            The ExaggerationWidth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationPosition">
            <summary>
            The ExaggerationPosition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.ExaggerationHeight">
            <summary>
            The ExaggerationHeight.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.#ctor">
            <summary>
            Creates a new dimension exaggeration attributes instance. 
            The default is to have exaggeration disabled.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.#ctor(System.Boolean,Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationDirections,Tekla.Structures.Drawing.DimensionSetBaseAttributes.ExaggerationOrigins,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new dimension exaggeration attributes instance with the given parameters.
            </summary>
            <param name="ExaggerationEnabled">Exaggeration is enabled if the value is true.</param>
            <param name="ExaggerationDirection"></param>
            <param name="ExaggerationOrigin"></param>
            <param name="ExaggerationWidth"></param>
            <param name="ExaggerationPosition"></param>
            <param name="ExaggerationHeight"></param>
        </member>
        <member name="M:Tekla.Structures.Drawing.DimensionSetBaseAttributes.DimensionExaggerationAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StraightDimension">
            <summary>
            The StraightDimension class defines straight dimensions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.DimensionSetAttributes">
            <summary>
            Gets or sets all attributes of the dimension, that are actually the same as the dimension sets.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.UnFormattedMark">
            <summary>
            Gets or sets the dimension value string
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.PreferredStartPointRuleId">
            <summary>
            Gets or sets the relation rule to use when updating this dimension start point
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.PreferredEndPointRuleId">
            <summary>
            Gets or sets the relation rule to use when updating this dimension end point
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.PreferredZeroPointRuleId">
            <summary>
            Gets or sets the relation rule to use when updating this dimension zero point (direction set origin)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StartPoint">
            <summary>
            Gets or sets the start point of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.EndPoint">
            <summary>
            Gets or sets the end point of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.Value">
            <summary>
            Gets the content of the dimension mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.Attributes">
            <summary>
            Gets or sets the dimension's attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.Distance">
            <summary>
            Gets or sets the distance of the dimension line from the start point of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.UpDirection">
            <summary>
            Gets or sets the direction from the dimension points to the dimension line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.GetDimensionSet">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.GetDimensionSet(System.Boolean)">
            <summary>
            Gets the dimension set the current dimension belongs to.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>The dimension set the current dimension belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.StraightDimension"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.StraightDimension"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.StraightDimension"/> class using "standard" attributes.
            </summary>
            <param name="targetView">The target view of the dimension.</param>
            <param name="startPoint">The start point of the dimension.</param>
            <param name="endPoint">The end point of the dimension.</param>
            <param name="upDirection">The up direction.</param>
            <param name="distance">The height of the dimension.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,System.Double,Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.StraightDimension"/> class.
            </summary>
            <param name="targetView">The target view of the dimension.</param>
            <param name="startPoint">The start point of the dimension.</param>
            <param name="endPoint">The end point of the dimension.</param>
            <param name="upDirection">The up direction.</param>
            <param name="distance">The height of the dimension.</param>
            <param name="attributes">The dimension attributes.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="QueryType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.Select">
            <summary>
            Selects the straight dimension from the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.Insert">
            <summary>
            Inserts the straight dimension to the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.Delete">
            <summary>
            Deletes the straight dimension from the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.Modify">
            <summary>
            Modifies the existing straight dimension in the database.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes">
            <summary>
            The StraightDimensionAttributes class contains the attributes of the straight dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.MiddleLowerTag">
            <summary>
            The dimension tag placed under the dimension value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.DimensionValuePrefix">
            <summary>
            The prefix for the dimension's value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.DimensionValuePostfix">
            <summary>
            The postfix for the dimension's value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.LeftUpperTag">
            <summary>
            The left upper dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.LeftMiddleTag">
            <summary>
            The left middle dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.RightUpperTag">
            <summary>
            The right upper dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.RightMiddleTag">
            <summary>
            The right middle dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.LeftLowerTag">
            <summary>
            The left lower dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.RightLowerTag">
            <summary>
            The right lower dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.Exaggeration">
            <summary>
            The exaggeration attributes of the dimension.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.LoadAttributes(System.String)">
            <summary>
            The attributes can't be loaded.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimension.StraightDimensionAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StraightDimensionSet">
            <summary>
            The StraightDimensionSet class defines a straight dimension set.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.Attributes">
            <summary>
            The straight dimension set attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.DimensionPoints">
            <summary>
            The list of the dimension points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.Distance">
            <summary>
            The distance from the first dimension point to the dimension line.
            The distance is measured in paper millimeters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.UpDirection">
            <summary>
            The direction from the dimension points to the dimension line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.LeftTagLineOffset">
            <summary>
            The offset of the left tag line.
            The offset is measured in paper millimeters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.RightTagLineOffset">
            <summary>
            The offset of the right tag line.
            The offset is measured in paper millimeters.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.GetAllExcludePartsAccordingToFilter">
            <summary>
            Retrieves all the possible valid filters for ExcludePartsAccordingToFilter.
            </summary>
            <returns>A list of string that correspond to the filters available.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.Select">
            <summary>
            Selects the straight dimension set from the database.
            </summary>
            <returns>True if the selection succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.Insert">
            <summary>
            Dimension sets cannot be inserted into the database.
            </summary>
            <returns>A <see cref="T:System.NotImplementedException"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.InternalInsert">
            <summary>
            Dimension sets can only be Inserted Internally.
            </summary>
            <returns>True if Insert succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.Delete">
            <summary>
            Deletes the dimension set and its child dimensions from the database.
            </summary>
            <returns>True if the deletion succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.Modify">
            <summary>
            Modifies the existing dimension set in the database.
            </summary>
            <returns>True if the updating succeeds.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes">
            <summary>
            The StraightDimensionSetAttributes class contains the attributes for managing
            all the attributes of the straight dimension.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       StraightDimensionSet.StraightDimensionSetAttributes attributes =
                           new StraightDimensionSet.StraightDimensionSetAttributes(null, "MyAttributes");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.CombinedDimension">
            <summary>
            Combines the attributes of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.DimensionType">
            <summary>
            The dimension type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.ExtensionLine">
            <summary>
            The extension line presentation of the dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.ShortDimension">
            <summary>
            How short dimensions are shown.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.UpdateGrouping">
            <summary>
            Indicates whether dimension grouping update is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTag">
            <summary>
            Gets or sets whether the part count is included in at least one of the tag position, or set part count flag for all tag positions.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagA">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag A.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagB">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag B.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagC">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag C.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagD">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag D.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagE">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag E.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagF">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag F.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IncludePartCountInTagG">
            <summary>
            Gets or sets a value indicating whether the part count is included in the tag G.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.LeftUpperTag">
            <summary>
            The left upper dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.LeftMiddleTag">
            <summary>
            The left middle dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.RightUpperTag">
            <summary>
            The right upper dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.RightMiddleTag">
            <summary>
            The right middle dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.LeftLowerTag">
            <summary>
            The left lower dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.RightLowerTag">
            <summary>
            The right lower dimension tag.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.MiddleLowerTag">
            <summary>
            The middle lower dimension tag. Internal for API compatibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.DimensionValuePostfix">
            <summary>
            The value postfix. Internal for API compatibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.DimensionValuePrefix">
            <summary>
            The value prefix. Internal for API compatibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.ExcludePartsAccordingToFilter">
            <summary>
            Sets the filter to use for excluding parts from the tags.
            You may query the possible filters using StraightDimensionSet.GetAllExcludePartsAccordingToFilter()
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.Exaggeration">
            <summary>
            The exaggeration attributes of the dimension.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor">
            <summary>
            Creates a default straight dimension set attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor(System.String)">
            <summary>
            Creates a straight dimension set attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor(Tekla.Structures.Drawing.ModelObject)">
            <summary>
            Creates a default straight dimension set attributes instance that loads standard attributes.
            </summary>
            <param name="modelObject">The model object that the dimension set will be associated with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor(Tekla.Structures.Drawing.ModelObject,System.Boolean)">
            <summary>
            Creates a default straight dimension set attributes instance that loads standard attributes.
            </summary>
            <param name="modelObject">The model object that the dimension set will be associated with.</param>
            <param name="SkipLoadingAttributes">Defines if attribute loading should be skipped.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor(Tekla.Structures.Drawing.ModelObject,System.String)">
            <summary>
            Creates a straight dimension set attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
            <param name="modelObject">The model object that the dimension set will be associated with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.#ctor(Tekla.Structures.Drawing.ModelObject,System.String,System.Boolean)">
            <summary>
            Creates a straight dimension set attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
            <param name="modelObject">The model object that the dimension set will be associated with.</param>
            <param name="SkipLoadingAttributes">Defines if attribute loading should be skipped.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFilename">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StraightDimensionSet.StraightDimensionSetAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Arc">
             <summary>
             The Arc class defines an arc that is a two-point line with an optional curve radius.
             It can be created using either two points and a radius or three points.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public void Example1()
                    {
                        DrawingHandler MyDrawingHandler = new DrawingHandler();
                        if(MyDrawingHandler.GetConnectionStatus())
                        {
                            Arc MyArc;
                            DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                            while(views.MoveNext())
                            {
                                MyArc = new Arc(views.Current as ViewBase, new Point(10, 10), new Point(200, 200), 300);
                                MyArc.Insert();
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Arc.StartPoint">
            <summary>
            The start point of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Arc.EndPoint">
            <summary>
            The end point of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Arc.Radius">
            <summary>
            The radius of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Arc.Attributes">
            <summary>
            The attributes of the arc.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Arc.ArcAttributes">
            <summary>
            The ArcAttributes class is the attributes class for the arc.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.ArcAttributes.#ctor">
            <summary>
            Creates a new default arc attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.ArcAttributes.#ctor(System.String)">
            <summary>
            Creates a new arc attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.ArcAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.ArcAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.Arc.ArcAttributes)">
            <summary>
            Creates a new arc instance with the given two points, radius and specified attributes.
            </summary>
            <param name="inView">The view to be used.</param>
            <param name="inPoint1">The start point to be used.</param>
            <param name="inPoint2">The end point to be used.</param>
            <param name="inRadius">The radius to be used.</param>
            <param name="inAttributes">The arc attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Arc.ArcAttributes)">
            <summary>
            Creates a new arc instance with the given three points and specified attributes.
            </summary>
            <param name="inView">The view to be used.</param>
            <param name="StartPoint">The start point to be used.</param>
            <param name="EndPoint">The end point to be used.</param>
            <param name="CenterPoint">The center point to be used.</param>
            <param name="inAttributes">The arc attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new arc instance with standard attributes and the given two points and radius.
            </summary>
            <param name="inView">The view to be used.</param>
            <param name="inPoint1">The start point to be used.</param>
            <param name="inPoint2">The end point to be used.</param>
            <param name="inRadius">The radius to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new arc instance with standard attributes and the given three points.
            </summary>
            <param name="inView">The view to be used.</param>
            <param name="inPoint1">The start point to be used.</param>
            <param name="inPoint2">The end point to be used.</param>
            <param name="inPoint3">The center point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Arc.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Circle">
            <summary>
            The Circle class defines the graphical object circle. A circle can also be hatched.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Circle MyCircle;
                           DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(views.MoveNext())
                           {
                               MyCircle = new Circle(views.Current as ViewBase, new Point(10, 10), 300);
                               MyCircle.Insert();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Circle.CenterPoint">
            <summary>
            The center point of the circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Circle.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Circle.Attributes">
            <summary>
            The attributes of the circle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.Circle.CircleAttributes)">
            <summary>
            Creates a new circle instance with a center point and a radius using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="centerPoint">The center point to be used.</param>
            <param name="radius">The radius to be used.</param>
            <param name="attributes">The circle attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new circle instance with a center point and a radius using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="centerPoint">The center point to be used.</param>
            <param name="radius">The radius to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Circle.CircleAttributes">
            <summary>
            The CircleAttributes class is the attributes class of the circle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.CircleAttributes.#ctor">
            <summary>
            Creates a new default circle attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.CircleAttributes.#ctor(System.String)">
            <summary>
            Creates a new circle attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.CircleAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Circle.CircleAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ClosedGraphicObject">
            <summary>
            The ClosedGraphicObject class is an abstract base class for all closed graphic objects
            (the circle, the cloud, the polygon and the rectangle).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes">
            <summary>
            The ClosedGraphicObjectAttributes class is the attributes class for the closed graphic object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes.Hatch">
            <summary>
            The hatch attributes of the closed graphic object (the closed graphic object is hatchable).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes.BehindModelObjects">
            <summary>
            Gets or sets whether the closed graphic object is drawn behind model objects
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes.#ctor">
            <summary>
            Creates a new closed graphic object attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes.#ctor(System.String)">
            <summary>
            Creates a new closed graphic object attributes instance using the given attribute file.
            </summary>
            <param name="AttributeFile">The attribute file to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ClosedGraphicObject.ClosedGraphicObjectAttributes.LoadAttributes(System.String,Tekla.Structures.Drawing.DrawingObject.ObjectTypes)">
            <summary>
            Loads attributes from attribute file for the specified Type of object.
            </summary>
            <param name="AttributeFile">Attribute filename.</param>
            <param name="ObjectType">The type of object to load attributes for.</param>
            <returns>Returns true if attributes are loaded correctly. Returns false if attribute file loading failed.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Cloud">
            <summary>
            The Cloud class defines a cloud that is a polygon with a specific size set for the bulges.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Cloud MyCloud;
                           PointList PolygonPoints = new PointList();
                           PolygonPoints.Add(new Point(10,10));
                           PolygonPoints.Add(new Point(50,10));
                           PolygonPoints.Add(new Point(50,50));
                           PolygonPoints.Add(new Point(10,50));
                           DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(views.MoveNext())
                           {
                               MyCloud = new Cloud(views.Current as ViewBase, PolygonPoints);
                               MyCloud.Insert();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Cloud.Points">
            <summary>
            The list of points for the cloud.
            The points you insert will specify the corner points of the cloud.
            After you insert the object, you will get every cloud point back.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Cloud.Bulge">
            <summary>
            The bulge (curve) to use for the cloud (a bulge is the ratio between the height and width of an object).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Cloud.Attributes">
            <summary>
            The attributes for the cloud.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Cloud.CloudAttributes">
            <summary>
            The CloudAttributes class is the attributes class for the cloud.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.CloudAttributes.#ctor">
            <summary>
            Creates a new default cloud attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.CloudAttributes.#ctor(System.String)">
            <summary>
            Creates a new cloud attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.CloudAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.CloudAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Drawing.Cloud.CloudAttributes)">
            <summary>
            Creates a new cloud instance with a point list using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
            <param name="attributes">The cloud attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a new cloud instance with a point list using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Cloud.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GraphicObject">
            <summary>
            The GraphicObject class is the abstract base class for all graphic objects
            (the arc, the circle, the cloud, the line, the polygon, the polyline and the rectangle).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GraphicObject.#ctor">
            <summary>
            Creates a new graphic object instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes">
            <summary>
            The GraphicObjectAttributes class is the attributes class of the graphic object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes.Line">
            <summary>
            The line attributes of the graphic object. A graphic object always consists of lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes.CoordinateSystem">
            <summary>
            TODO_DOT Is this CoordinateSystem required or not???
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes.#ctor">
            <summary>
            Creates a new graphic object attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GraphicObject.GraphicObjectAttributes.#ctor(System.String)">
            <summary>
            Creates a new graphic object attributes instance using the given attribute file's filename.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="P:Tekla.Structures.Drawing.GraphicObject.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Line">
            <summary>
            The Line class defines a line that is a two-point line with an optional bulge (curve).
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Tekla.Structures.Drawing.Line MyLine;
                           DrawingObjectEnumerator myviews = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(myviews.MoveNext())
                           {
                               MyLine = new Tekla.Structures.Drawing.Line(myviews.Current as ViewBase,
                                   new Point(10, 10), new Point(200, 200), 0.5);
                               MyLine.Insert();
                               MyLine.Bulge = 0.0;
                               MyLine.Modify();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Line.StartPoint">
            <summary>
            The start point of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Line.EndPoint">
            <summary>
            The end point of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Line.Bulge">
            <summary>
            The bulge (curve) to use for the line (a bulge is the ratio between the height and width of an object).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Line.Attributes">
            <summary>
            The attributes for the line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.Line.LineAttributes)">
            <summary>
            Creates a new line instance with two points and a bulge using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
            <param name="bulge">The bulge to be used.</param>
            <param name="attributes">The line attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Line.LineAttributes)">
            <summary>
            Creates a new line instance with two points and no bulge (straight line) using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
            <param name="inAttributes">The line attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new line instance with two points and a bulge using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
            <param name="bulge">The bulge to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new line instance with two points and no bulge (straight line) using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Line.LineAttributes">
            <summary>
            The LineAttributes class is the attributes class of the line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.LineAttributes.#ctor">
            <summary>
            Creates a new default line attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.LineAttributes.#ctor(System.String)">
            <summary>
            Creates a new line attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.LineAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Line.LineAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.OpenGraphicObject">
            <summary>
            The OpenGraphicObject class is an abstract base class for all open graphic objects
            (the arc, the line and the polyline).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.OpenGraphicObject.#ctor">
            <summary>
            Base constructor.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes">
            <summary>
            The OpenGraphicObjectAttributes class is the attributes class of the open graphic object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes.Arrowhead">
            <summary>
            The arrowhead attributes of the open graphic object. The end points of an open graphic object
            can contain arrowheads.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes.#ctor">
            <summary>
            Base constructor.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes.#ctor(System.String)">
            <summary>
            Base constructor.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.OpenGraphicObject.OpenGraphicObjectAttributes.LoadAttributes(System.String,Tekla.Structures.Drawing.DrawingObject.ObjectTypes)">
            <summary>
            Loads attributes from attribute file for the specified Type of object.
            </summary>
            <param name="AttributeFile">Attribute filename.</param>
            <param name="ObjectType">The type of object to load attributes for.</param>
            <returns>Returns true if attributes are loaded correctly. Returns false if attribute file loading failed.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Polygon">
            <summary>
            The Polygon class defines a polygon that is a multipoint line which is connected. It can also have a bulge (curved lines).
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Polygon MyPolygon;
                           PointList PolygonPoints = new PointList();
                           PolygonPoints.Add(new Point(10,10));
                           PolygonPoints.Add(new Point(50,10));
                           PolygonPoints.Add(new Point(50,50));
                           PolygonPoints.Add(new Point(10,50));
                           DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(views.MoveNext())
                           {
                               MyPolygon = new Polygon(views.Current as ViewBase, PolygonPoints);
                               MyPolygon.Insert();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polygon.Points">
            <summary>
            The list of points for the polygon.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polygon.Bulges">
            <summary>
            The list of individual bulges for the polygon.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polygon.Bulge">
            <summary>
            The bulge (curve) to use for the polygon (a bulge is the ratio between the height and width of an object).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polygon.Attributes">
            <summary>
            The attributes for the polygon.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Drawing.Polygon.PolygonAttributes)">
            <summary>
            Creates a new polygon instance with the point list using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
            <param name="attributes">The polygon attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a new polygon instance with the point list using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Polygon.PolygonAttributes">
            <summary>
            The PolygonAttributes class is the attributes class of the polygon.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.PolygonAttributes.#ctor">
            <summary>
            Creates a new default polygon attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.PolygonAttributes.#ctor(System.String)">
            <summary>
            Creates a new polygon attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.PolygonAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polygon.PolygonAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Polyline">
            <summary>
            The Polyline class defines a polyline that is a multipoint line. It can also have a bulge (curved lines).
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Polyline MyPolyline;
                           PointList PolygonPoints = new PointList();
                           PolygonPoints.Add(new Point(10,10));
                           PolygonPoints.Add(new Point(50,10));
                           PolygonPoints.Add(new Point(50,50));
                           PolygonPoints.Add(new Point(10,50));
                           DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(views.MoveNext())
                           {
                               MyPolyline = new Polyline(views.Current as ViewBase, PolygonPoints);
                               MyPolyline.Insert();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polyline.Points">
            <summary>
            The list of points for the polyline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polyline.Bulges">
            <summary>
            The list of individual bulges for the polygon.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polyline.Bulge">
            <summary>
            The bulge (curve) to use for the polyline (a bulge is the ratio between the height and width of an object).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Polyline.Attributes">
            <summary>
            The attributes for the polyline.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList,Tekla.Structures.Drawing.Polyline.PolylineAttributes)">
            <summary>
            Creates a new polyline instance with the point list using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
            <param name="attributes">The polyline attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a new polyline instance with the point list using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="pointList">The point list to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Polyline.PolylineAttributes">
            <summary>
            The PolylineAttributes class is the attributes class of the polyline.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.PolylineAttributes.#ctor">
            <summary>
            Creates a new default polyline attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.PolylineAttributes.#ctor(System.String)">
            <summary>
            Creates a new polyline attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.PolylineAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Polyline.PolylineAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Rectangle">
            <summary>
            The Rectangle class defines a rectangle that is a box made of four lines with orthogonal angles.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Rectangle MyRectangle;
                           DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                           while(views.MoveNext())
                           {
                               MyRectangle = new Rectangle(views.Current as ViewBase, new Point(10,10), new Point(300,300));
                               MyRectangle.Insert();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.StartPoint">
            <summary>
            The start point of the rectangle. Changing
            this will move the rectangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.EndPoint">
            <summary>
            The end point of the rectangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.Width">
            <summary>
            The width of the rectangle.
            Changing the width changes the end point with the width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.Height">
            <summary>
            The height of the rectangle.
            Changing the height changes the end point with the height.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.Angle">
            <summary>
            The angle of the rectangle. The rectangle rotates around its start point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.Attributes">
            <summary>
            The attributes of the rectangle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.Rectangle.RectangleAttributes)">
            <summary>
            Creates a new rectangle instance with two points using the given attributes.
            Please note that creating a rectangle using two points will re-calculate 
            the start point to correspond with positive widths and heights.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
            <param name="attributes">The rectangle attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new rectangle instance with two points using standard attributes.
            Please note that creating a rectangle using two points will re-calculate 
            the start point to correspond with positive widths and heights.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="endPoint">The end point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,Tekla.Structures.Drawing.Rectangle.RectangleAttributes)">
            <summary>
            Creates a new rectangle instance with the start point and the defined width and height using the given attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="width">The width to be used.</param>
            <param name="height">The height to be used.</param>
            <param name="attributes">The rectangle attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.Double,System.Double)">
            <summary>
            Creates a new rectangle instance with the start point and the defined width and height using standard attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="startPoint">The start point to be used.</param>
            <param name="width">The width to be used.</param>
            <param name="height">The height to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Rectangle.RectangleAttributes">
            <summary>
            The RectangleAttributes class is the attributes class of the rectangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Rectangle.RectangleAttributes.Bulge">
            <summary>
            The bulge value for the rectangle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.RectangleAttributes.#ctor">
            <summary>
            Creates a new default rectangle attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.RectangleAttributes.#ctor(System.String)">
            <summary>
            Creates a new rectangle attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.RectangleAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Rectangle.RectangleAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkBase">
             <summary>
             The MarkBase class contains general mark information and can be
             selected and modified with the general attributes.
             </summary>
             <example>
             The following example enumerates through all marks in all views and changes
             their frame types to sharpened and their frame colors to red.
             <code>
             using Tekla.Structures.Drawing;
            
             public class Example
             {
                    public void Example1()
                    {
                        DrawingHandler MyDrawingHandler = new DrawingHandler();
                        if(MyDrawingHandler.GetConnectionStatus())
                        {
                            MarkBase MyMarkBase;
                            DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                            while(views.MoveNext())
                            {
                                DrawingObjectEnumerator allObjects = (views.Current as ViewBase).GetAllObjects();
                                while(allObjects.MoveNext())
                                {
                                    if(allObjects.Current is MarkBase)
                                    {
                                        MyMarkBase = allObjects.Current as MarkBase;
                                        MyMarkBase.Attributes.Frame.Color = DrawingColors.Red;
                                        MyMarkBase.Attributes.Frame.Type = FrameTypes.Sharpened;
                                        MyMarkBase.Modify();
                                    }
                                }
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.Attributes">
            <summary>
            Gets or sets the mark base attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.InsertionPoint">
            <summary>
            The insertion point of the mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.TextWidth">
            <summary>
            The width of the text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.TextHeight">
            <summary>
            The height of the text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.Placing">
            <summary>
            The current placing of the object.
            See the placing types for different placing options.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.IsAssociativeNote">
            <summary>
            Gets a value indicating whether the mark is an associative note.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.GetAxisAlignedBoundingBox">
            <summary>
            Returns the axis aligned bounding box of the text (rectangle format).
            </summary>
            <returns>The bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.GetObjectAlignedBoundingBox">
            <summary>
            Returns the object aligned bounding box of the text (rectangle format).
            </summary>
            <returns>The bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes">
            <summary>
            The MarkBaseAttributes class is the attributes class for the mark base.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TextAlignOptions">
            <summary>
            Enumeration of the possible text alignment values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TextAlignOptions.Left">
            <summary>
            Text is left-aligned.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TextAlignOptions.Center">
            <summary>
            Text is center-aligned.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TextAlignOptions.Right">
            <summary>
            Text is right-aligned.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.Angle">
            <summary>
            The actual angle of the mark, in degrees. Can differ from the rotation angle
            set by the user for marks, e.g. 45-degree column marks in GA drawings or
            when placing mark along part edges.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.RotationAngle">
            <summary>
            The mark rotation angle set by the user. Unit is degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TransparentBackground">
            <summary>
            The mark text background transparency. (transparent/opaque)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.TextAlignment">
            <summary>
            The mark text alignment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.Frame">
            <summary>
            The frame attributes of the mark's labels.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.ArrowHead">
            <summary>
            The arrowhead of the leader line(s).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.PreferredPlacing">
            <summary>
            The type of placing the object should use.
            See the preferred placing types for different types of placing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.PlacingAttributes">
            <summary>
            The placing attributes that the object should use.
            Using these you can specify whether the object is automatically arranged in the drawing or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.#ctor">
            <summary>
            Creates a new default mark base attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.#ctor(System.String)">
            <summary>
            Creates a new mark base attributes instance with the given attributes file's filename.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.MarkBaseAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new mark base attributes instance without loading attributes from file.
            </summary>
            <param name="DoNotLoadAttributes">If it set to true attributes won't be lodaded.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point)">
            <summary>
            MarkBase constructor without a leaderline
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.LeaderLine)">
            <summary>
            Create a mark instance with a leader line to mark
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.GetObjects">
            <summary>
            Gets the children objects of the current object.
            </summary>
            <returns>The children objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MarkBase.GetObjects(System.Type[])">
            <summary>
            Gets the children objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children objects of the current object that are of certain types.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.MarkBase.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Text">
            <summary>
            The Text class defines a drawing object that can hold a text string and is shown in a drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.FrameWidth">
            <summary>
            The width of the text frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.FrameHeight">
            <summary>
            The height of the text frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.InsertionPoint">
            <summary>
            The insertion point of the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextString">
            <summary>
            The contents of the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.Attributes">
            <summary>
            The attributes for the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.Placing">
            <summary>
            The current placing of the object.
            See the placing types for different placing options.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.GetAxisAlignedBoundingBox">
            <summary>
            Returns the axis aligned bounding box of the text (rectangle format).
            </summary>
            <returns>The axis aligned bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.GetObjectAlignedBoundingBox">
            <summary>
            Returns the object aligned bounding box of the text (rectangle format).
            </summary>
            <returns>The object aligned bounding box of the text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Text.TextAttributes">
            <summary>
            The TextAttributes class is the attributes class for the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.Font">
            <summary>
            The text object's font settings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.Alignment">
            <summary>
            The text object's alignment (left, center, right).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.Angle">
            <summary>
            The angle of the text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.Frame">
            <summary>
            The frame for the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.ArrowHead">
            <summary>
            The arrowhead of the leader line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.PreferredPlacing">
            <summary>
            The type of placing the object should use.
            See the preferred placing types for different types of placing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.PlacingAttributes">
            <summary>
            The placing attributes that the object should use.
            Using these you can specify whether the object is automatically arranged in the drawing or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.UseWordWrapping">
            <summary>
            Gets or sets a value indicating whether to [use word wrapping].
            </summary>
            <value>
              <c>true</c> if [use word wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.RulerWidth">
            <summary>
            Gets or sets the width in paper coordinates of the ruler to be used in word wrapping.
            </summary>
            <value>
            The width of the ruler.
            </value>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.TransparentBackground">
            <summary>
            Gets or sets a value indicating whether the background transparency is enabled for texts.
            </summary>
            <value>
            The text background transparency. (transparent/opaque)
            </value>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.TextAttributes.#ctor">
            <summary>
            Creates a new default text attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.TextAttributes.#ctor(System.String)">
            <summary>
            Creates a new text attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The attributes file's filename.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.TextAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.TextAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.#ctor">
            <summary>
            Create an instance of the object with empty content.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String)">
            <summary>
            Creates a new text instance with the given text string.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="text">The text string to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.PlacingBase)">
            <summary>
            Creates a new text instance with the given text string using a specific placing type.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="text">The text string to be used.</param>
            <param name="Placing">The placing type to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.Text.TextAttributes)">
            <summary>
            Creates a new text instance with the given text string and text attributes.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="Text">The text string to be used.</param>
            <param name="inAttributes">The text attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Drawing.PlacingBase,Tekla.Structures.Drawing.Text.TextAttributes)">
            <summary>
            Creates a new text instance with the given text string and text attributes
            using a specific placing type.
            </summary>
            <param name="view">The view to be used.</param>
            <param name="insertionPoint">The insertion point to be used.</param>
            <param name="Text">The text string to be used.</param>
            <param name="Placing">The placing type to be used.</param>
            <param name="inAttributes">The text attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.Delete">
            <summary>
            Deletes the text from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.Modify">
            <summary>
            Modifies the text in the current drawing database.
            </summary>
            <exception cref="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">Thrown if Attributes contains values that are not supported by the object.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.Insert">
            <summary>
            Inserts the text into the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.Select">
            <summary>
            Selects the text from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.GetObjects">
            <summary>
            Gets the children objects of the current object.
            </summary>
            <returns>The children objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Text.GetObjects(System.Type[])">
            <summary>
            Gets the children objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children objects of the current object that are of certain types.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Text.TextDrawMode">
            <summary>
            Setting to draw on a plane or follow camera.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.CastUnitDrawing">
            <summary>
            The CastUnitDrawing class is for handling cast unit drawings.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType">
            <summary>
            Defines the Cast Unit Drawing Creation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType.CastUnitDrawingByPosition">
            <summary>
            Creating the Cast Unit drawing by Position means we follow the position of the cast unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType.CastUnitDrawingById">
            <summary>
            Creating the Cast Unit drawing by Id means we follow the id of the cast unit.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CastUnitDrawing.CastUnitIdentifier">
            <summary>
            The identifier of the model object cast unit.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CastUnitDrawing.SheetNumber">
            <summary>
            The sheet number of the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.CastUnitDrawing.CastUnitById">
            <summary>
            Cast unit definition method.
            True means the cast unit definition method is by cast unit id.
            False means the cast unit definition method is by cast unit position.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a new cast unit drawing with standard attributes for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,System.String)">
            <summary>
            Instantiates a new cast unit drawing with given attributes for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType)">
            <summary>
            Instantiates a new cast unit drawing with standard attributes for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="castUnitDrawingCreationType">Specifies the cast unit drawing creation type (by cast unit id or by cast unit position).</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType,System.String)">
            <summary>
            Instantiates a new cast unit drawing with given attributes for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="castUnitDrawingCreationType">Specifies the cast unit drawing creation type (by cast unit id or by cast unit position).</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,System.Int32)">
            <summary>
            Instantiates a new cast unit drawing with standard attributes and with a specified sheet number for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,System.Int32,System.String)">
            <summary>
            Instantiates a new cast unit drawing with given attributes and with a specified sheet number for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType,System.Int32)">
            <summary>
            Instantiates a new cast unit drawing by id with standard attributes and with a specified sheet number for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="castUnitDrawingCreationType">Specifies the cast unit drawing creation type (by cast unit id or by cast unit position).</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Drawing.CastUnitDrawing.CastUnitDrawingCreationType,System.Int32,System.String)">
            <summary>
            Instantiates a new cast unit drawing by id with given attributes and with a specified sheet number for a given cast unit.
            </summary>
            <param name="castUnitIdentifier">The identifier of the model object cast unit.</param>
            <param name="castUnitDrawingCreationType">Specifies the cast unit drawing creation type (by cast unit id or by cast unit position).</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.Modify">
            <summary>
            Updates the drawing object in the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.Insert">
            <summary>
            Inserts a new cast unit drawing. Views are added according to the View Creation rules of the standard file.
            A drawing can be inserted only when there is no active drawing.
            </summary>
            <returns>True on success.</returns>
            <exception cref="T:Tekla.Structures.Drawing.CannotInsertDrawingException">Thrown if inserting a drawing when another drawing is active.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.CastUnitDrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.MultiDrawing">
            <summary>
            The MultiDrawing class is for handling multidrawings.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.MultiDrawing.Modify">
            <summary>
            Applies the changes made to the drawing attributes.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.DrawingHandler"/>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MultiDrawing.Insert">
            <summary>
            Not supported.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.MultiDrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Frame">
            <summary>
            The Frame class defines a frame that can be given to objects, including texts.
            A frame is a box around the object. You can specify the color and shape of the box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.Width">
            <summary>
            The width of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.Height">
            <summary>
            The height of the frame
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.Angle">
            <summary>
            The angle of the frame (compared to X-axis)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.InsertionPoint">
            <summary>
            The InsertionPoint of the frame (CenterPoint)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.Type">
            <summary>
            The frame's type (square, round, dashed...).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Frame.Color">
            <summary>
            The frame's color.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.GetAxisAlignedBoundingBox">
            <summary>
            Returns the bounding box of the frame in the global axis coordinate system.
            </summary>
            <returns>The bounding box of the frame in the global axis coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.GetObjectAlignedBoundingBox">
            <summary>
            Returns the bounding box of the frame in the local coordinate system.
            </summary>
            <returns>The bounding box of the frame in the local coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.Initialize">
            <summary>
            Initializes the standard values for Frame
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.#ctor(Tekla.Structures.Drawing.FrameTypes,Tekla.Structures.Drawing.DrawingColors)">
            <summary>
            Creates a new frame instance with the specified frame type and color.
            </summary>
            <param name="FrameType">The frame type to be used.</param>
            <param name="FrameColor">The frame color to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Frame.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GADrawing">
            <summary>
            The GADrawing class is for handling general arrangement drawings in Tekla Structures. 
            </summary>
            <example>
            Creates an empty GA drawing based on standard attributes and opens it:
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler drawingHandler = new DrawingHandler();
                       Drawing gaDrawing = new GADrawing();
                       gaDrawing.Insert();
                       drawingHandler.SetActiveDrawing(gaDrawing);
                   }
            }
            </code>
            The following example shows how to insert an A3-sized GA drawing:
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       Size A3 = new Size(410.0, 287.0);
                       Drawing newDrawing = new GADrawing("standard", A3);
                       newDrawing.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.#ctor">
            <summary>
            Instantiates a new GA drawing using standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.#ctor(System.Boolean)">
            <summary>
            Instantiates new GADrawing.
            </summary>
            <param name="LoadAttributefile">used internally for selection for performance reasons</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new GA drawing with the given name and attribute file.
            </summary>
            <param name="Name">The name of the GA drawing.</param>
            <param name="AttributeFile">The name of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.#ctor(System.String)">
            <summary>
            Instantiates a new GA drawing with the given attributes.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.#ctor(System.String,Tekla.Structures.Drawing.Size)">
            <summary>
            Instantiates a new GA drawing with attributes. Loads the specified attribute
            file and overrides with the given layout attributes.
            </summary>
            <param name="AttributeFile">The name of the attribute file to use.</param>
            <param name="SheetSize">The sheet size of the new GA drawing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.Modify">
            <summary>
            Applies the changes made to the drawing attributes.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.DrawingHandler"/>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GADrawing.Insert">
            <summary>
            Inserts an empty general arrangement drawing. Views must be added separately.
            A drawing can be inserted only when there is no active drawing.
            </summary>
            <returns>True on success.</returns>
            <exception cref="T:Tekla.Structures.Drawing.CannotInsertDrawingException">Thrown if inserting a drawing when another drawing is active.</exception>
        </member>
        <member name="T:Tekla.Structures.Drawing.AttributesBase">
            <summary>
            The AttributesBase class is the class that all the main attributes that can load attribute files inherit from.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.#ctor">
            <summary>
            A constructor for creating new Attributes using the "standard" attribute file.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.#ctor(System.Boolean)">
            <summary>
            A constructor for creating new Attributes using the "standard" attribute file.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.#ctor(System.String)">
            <summary>
            Constructor to create new Attributes using specified attributes file.
            </summary>
            <param name="AttributeFile">Please enter only the filename not the extension</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to create new Attributes using specified attributes file.
            </summary>
            <param name="AttributeFile">Please enter only the filename not the extension</param>
            <param name="DoNotLoadAttributes">Instructs constructor to not automatically load the attributes, this is a special case and LoadAttributes HAS TO BE CALLED shortly after.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.AttributesBase.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the specified file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file. Use only the filename, not the extension.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingColors">
            <summary>
            The colors used in Tekla.Structures.Drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Invisible">
            <summary>
            The light gray color: the "invisible color". Light gray is visible
            only on the screen and not in printed or exported drawings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine1">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine2">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine3">
            <summary>
            The dark blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine4">
            <summary>
            The forest green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine5">
            <summary>
            The orange color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.NewLine6">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Green">
            <summary>
            The bright green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Cyan">
            <summary>
            The turquoise color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Yellow">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Magenta">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Gray30">
            <summary>
            The Gray30 rgb(0.3, 0.3, 0.3) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Gray50">
            <summary>
            The Gray50 rgb(0.5, 0.5, 0.5) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Gray70">
            <summary>
            The Gray70 rgb(0.7, 0.7, 0.7) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingColors.Gray90">
            <summary>
            The Gray90 rgb(0.9, 0.9, 0.9) color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.DrawingHatchColors">
            <summary>
            The hatch colors used in Tekla.Structures.Drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Invisible">
            <summary>
            The light gray color: the "invisible color". Light gray is visible
            only on the screen and not in printed or exported drawings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine1">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine2">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine3">
            <summary>
            The dark blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine4">
            <summary>
            The forest green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine5">
            <summary>
            The orange color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.NewLine6">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Green">
            <summary>
            The bright green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Cyan">
            <summary>
            The turquoise color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Yellow">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Magenta">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Special">
            <summary>
            The special color. Defined with advanced options XS_HATCH_SPECIAL_COLOR_R,
            XS_HATCH_SPECIAL_COLOR_G and XS_HATCH_SPECIAL_COLOR_B
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Gray30">
            <summary>
            The Gray30 rgb(0.3, 0.3, 0.3) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Gray50">
            <summary>
            The Gray50 rgb(0.5, 0.5, 0.5) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Gray70">
            <summary>
            The Gray70 rgb(0.7, 0.7, 0.7) color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.DrawingHatchColors.Gray90">
            <summary>
            The Gray90 rgb(0.9, 0.9, 0.9) color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.TextAlignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TextAlignment.Left">
            <summary>
            The left aligned text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TextAlignment.Center">
            <summary>
            The center aligned text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TextAlignment.Right">
            <summary>
            The right aligned text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.TextAlignment.LeaderLine">
            <summary>
            The text is aligned to leader line direction
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.FrameTypes">
            <summary>
            The available frame styles around the object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.None">
            <summary>
            No frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Rectangular">
            <summary>
            The rectangular frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Line">
            <summary>
            A line under the object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Round">
            <summary>
            The frame with rounded ends.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Circle">
            <summary>
            The circular frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Diamond">
            <summary>
            The frame looking like a diamond.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Hexagon">
            <summary>
            The hexagonally shaped frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Triangle">
            <summary>
            The triangular frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.FrameTypes.Sharpened">
            <summary>
            The frame with sharpened ends.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ScalingOptions">
            <summary>
            The options for controlling the scaling of the objects in the drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ScalingOptions.NoScaling">
            <summary>Does not scale the object.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ScalingOptions.ScaleToFit">
            <summary>Scales the object to fit in the frame in the Y direction.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.EmbeddedObjectScalingOptions">
            <summary>
            The options for controlling the scaling of the objects in the drawing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectScalingOptions.ScaleX">
            <summary>Scales the object in the X direction.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectScalingOptions.ScaleXY">
            <summary>Scales the object in the X and Y directions.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectScalingOptions.ScaleToFit">
            <summary>Scales the object to fit in the frame in the Y direction.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.EmbeddedObjectScalingOptions.ScaleBestFit">
            <summary>The object is scaled inside the frame,
            still maintaining its original aspect ratio.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events">
            <summary>
            The Events class allows the user to register event listeners for drawing events.
            </summary>
            <remarks>
            Asynchronous event handling
            <para>Registered event handlers are called asynchronously so that many handlers may be running
            simultaneously. Event handlers are not guaranteed to be run in the same thread where they were registered.
            The asynchronous nature of the events requires the use of synchronization constructs on objects
            and data structures that are not defined to be thread safe.</para>
            <para>
            <list type="bullet">
            <item>Microsoft's documentation about the lock statement: http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx</item>
            <item>Microsoft's documentation about delegates: http://msdn.microsoft.com/en-us/library/900fyy8e.aspx</item>
            <item>Microsoft's documentation about managed threading: http://msdn.microsoft.com/en-us/library/1c9txz50.aspx</item>
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to make sure that only one selection event handler is running at a time.
            <code>
            using Tekla.Structures.Drawing;
            
               public class Example
               {
                   private Events _events = new Events();
                   private object _statusChangedEventHandlerLock = new object();
                   
                   public void RegisterEventHandler()
                   {
                       _events.DrawingStatusChanged += Events_DrawingStatusChangedEvent;
                       _events.Register();
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       _events.UnRegister();
                   }
                   
                   void Events_DrawingStatusChangedEvent()
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock(_statusChangedEventHandlerLock)
                       {
                           System.Console.WriteLine("Selection changed event received.");
                       }
                   }
               }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events.DrawingUpdateTypeEnum">
            <summary>
            The types of drawing update event.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Events.DrawingUpdateTypeEnum.INSERTED">
            <summary>
            Drawing created
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Events.DrawingUpdateTypeEnum.MODIFIED">
            <summary>
            Drawing modified
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Events.DrawingUpdateTypeEnum.DELETED">
            <summary>
            Drawing deleted
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events.DrawingInsertedDelegate">
            <summary>
            The delegate to use for drawing insertion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events.DrawingDeletedDelegate">
            <summary>
            The delegate to use for drawing deletion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events.DrawingStatusChangedDelegate">
            <summary>
            The delegate to use for drawing status change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Events.DrawingUpdatedDelegate">
            <summary>
            The delegate to use for drawing updated (insertion, deletion or modification).
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.Events.DrawingInserted">
            <summary>
            The DrawingInserted event is raised when a drawing has been inserted.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.Events.DrawingDeleted">
            <summary>
            The DrawingDeleted event is raised when a drawing has been deleted.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.Events.DrawingStatusChanged">
            <summary>
            The DrawingStatusChanged event is raised when the drawing status has changed.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.Events.DrawingChanged">
            <summary>
            The DrawingChanged event is raised when the drawing has been changed and the database is committed.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.Events.DrawingUpdated">
            <summary>
            The DrawingUpdated event is raised when the drawing has been inserted, deleted or modified, and the database is committed.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Events.HasDrawingUpdatedListeners">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.OnDrawingInserted(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.OnDrawingDeleted(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.OnDrawingStatusChanged(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.OnDrawingChanged(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.OnDrawingUpdated(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.#ctor">
            <summary>
            Constructs a new instance of Events.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.Register">
            <summary>
            Registers the instance to listen to the specified events.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if attempting registration when already registered.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.Events.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.IHideable">
            <summary>
            The IHideable interface is used for each object that can be hidden in the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.IHideable.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.IIsEqual">
            <summary>
            The IIsEqual interface is for comparing objects using the function IsEqual().
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IIsEqual.IsEqual(System.Object)">
            <summary>
            Compares the current object with the given object.
            Checks every field of both objects for equality.
            </summary>
            <param name="ObjectToCompare">An object of the same type to be used for comparing.</param>
            <returns>True if all the field values of both objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IPlacing">
            <summary>
            The IPlacing interface is for objects that can have different placings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.IPlacing.Placing">
            <summary>
            The current placing of the object.
            See <see cref="T:Tekla.Structures.Drawing.PlacingTypes"/> for different placing options.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.IPreferredPlacing">
            <summary>
            The IPreferredPlacing interface is for objects that can have different preferred placing types.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.IPreferredPlacing.PreferredPlacing">
            <summary>
            The type of placing the object should use.
            See <see cref="T:Tekla.Structures.Drawing.PreferredPlacingTypes"/> for different types of placing.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.IRelatedObjects">
            <summary>
            The IRelatedObjects interface is implemented by objects that have related objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IRelatedObjects.GetRelatedObjects">
            <summary>
            Gets the related objects of the current object.
            </summary>
            <returns>The related objects of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IRelatedObjects.GetRelatedObjects(System.Type[])">
            <summary>
            Gets the related objects of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The related objects of the current object that are of certain types.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IResizeable">
            <summary>
            The IResizeable interface is implemented by objects that can be resized.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.Size"/>
            <seealso cref="T:Tekla.Structures.Drawing.IMovableRelative"/>
        </member>
        <member name="M:Tekla.Structures.Drawing.IResizeable.Resize(Tekla.Structures.Drawing.Size)">
            <summary>
            Resizes the object to the specified size, overriding possible
            scaling settings.
            </summary>
            <param name="size">The new size.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PourObject">
            <summary>
            The PourObject class contains methods related to pours.
            A pour is a drawing object derived from a model object.
            It represents a drawing pour that has a reference to the
            actual pour in the model database.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.Attributes">
            <summary>
            The attributes of the pour.
            For more information see <see cref="T:Tekla.Structures.Drawing.PourObject.PourAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PourObject.PourAttributes">
            <summary>
            The PourAttributes class is the attributes class for the pour.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.DrawHiddenLines">
            <summary>
            True if hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.DrawOwnHiddenLines">
            <summary>
            True if own hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.DrawChamfers">
            <summary>
            True if chamfers are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.VisibleLines">
            <summary>
            The line type of visible lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.HiddenLines">
            <summary>
            The line type of hidden lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.FaceHatch">
            <summary>
            The hatch type of the face hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourObject.PourAttributes.SectionFaceHatch">
            <summary>
            The hatch type of the section face hatch.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.PourAttributes.#ctor">
            <summary>
            Creates a new default pour attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.PourAttributes.#ctor(System.String)">
            <summary>
            Creates a new pour attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.PourAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.PourAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.#ctor">
            <summary>
            Create instance of Pour
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourObject.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PourBreak">
            <summary>
            The PourBreak class contains methods related to pour breaks.
            A pour break is a drawing object derived from a model object.
            It represents a drawing pour break that has a reference to the
            actual pour break in the model database.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                public void Example1()
                {
                    Drawing MyDrawing = new GADrawing();
                    View curview = new View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(),
                                                new AABB(new Point(), new Point(30000, 30000, 10000)));
                    PourBreak curBreak;
            
                    DrawingObjectEnumerator allObjects = curview.GetAllObjects();
                    while(allObjects.MoveNext())
                    {
                        if(allObjects.Current is PourBreak)
                        {
                            curBreak = allObjects.Current as PourBreak;
                            pourBreak.Attributes.VisibleLines = new LineTypeAttributes(LineTypes.DashDoubleDot,
                                                                                       DrawingColors.Blue);
                            curBreak.Modify(); /* Apply changes */
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourBreak.Attributes">
            <summary>
            The attributes of the pour break.
            For more information see <see cref="T:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes">
            <summary>
            The PourBreakAttributes class is the attributes class for the pour break.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.VisibleLines">
            <summary>
            The visible line type of the pour break.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.HiddenLines">
            <summary>
            The hidden line type of the pour break.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.DrawHiddenLines">
            <summary>
            Indicates whether hidden lines are used to draw the pour break or not.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.#ctor">
            <summary>
            Creates a new default pour break attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.#ctor(System.String)">
            <summary>
            Creates a new pour break attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.PourBreakAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.#ctor">
            <summary>
            Create instance of pour break
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.Delete">
            <summary>
            Deletes the drawing pour break from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.Modify">
            <summary>
            Modifies the drawing pour break.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PourBreak.Select">
            <summary>
            Selects the drawing pour break from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReferenceModel">
            <summary>
            The ReferenceModel class represents a reference model object in a drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReferenceModel.Attributes">
            <summary>
            Gets or sets the reference model object attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.#ctor">
            <summary>
            Create instance of ReferenceModel
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.Insert">
            <summary>
            Reference model objects cannot be inserted.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.Select">
            <summary>
            Selects the reference model object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.Modify">
            <summary>
            Modifies the reference model object.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.Delete">
            <summary>
            Reference model objects cannot be deleted.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes">
            <summary>
            The ReferenceModelAttributes class contains attributes for reference model objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.ReferenceModel"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.Line">
            <summary>
            Gets or sets the line type.
            </summary>
            <seealso cref="T:Tekla.Structures.Drawing.LineTypeAttributes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.LineType">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.Color">
            <obsolete>Deprecated, use Line instead</obsolete>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.#ctor">
            <summary>
            Creates a new default reference model attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the specified attribute file.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReferenceModel.ReferenceModelAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementSetGroup">
            <summary>
            The ReinforcementSetGroup class defines a reinforcement set group in the drawing.
            A model rebar set generates one or more groups of rebars for drawing purposes and each group is
            represented in a drawing as a reinforcement set group.
            ModelIdentifier is always zero for the ReinforcementSetGroup.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSetGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.ReinforcementSetGroup"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSetGroup.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.ReinforcementSetGroup"/> class with SkipLoadingAttributes flag
            </summary>
            <param name="SkipLoadingAttributes">
            The skip loading attributes, if set to true, attributes not loaded.
            </param>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementSetGroup.Attributes">
            <summary>
            Gets or sets the attributes of the reinforcement.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementSetGroup.ReinforcementCustomPosition">
            <summary>
            Gets or sets the location of the reinforcement bar when using ReinforcementVisibility == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the reinforcement's start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSetGroup.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSetGroup.GetModelIdentifiers">
            <summary>
            Gets the model identifiers of the single rebars in this reinforcement set group.
            </summary>
            <returns>A list of model identifiers.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSetGroup.Initialize(System.Boolean)">
            <summary>
            The Initialize
            </summary>
            <param name="SkipLoadingAttributes"> The SkipLoadingAttributes boolean </param>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementSingle">
            <summary>
            The ReinforcementSingle class defines a single (as in not part of a group) reinforcement bar in the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementSingle.Attributes">
            <summary>
            The attributes of the reinforcement.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementSingle.ReinforcementCustomPosition">
            <summary>
            Defines the location of the reinforcement bar when using ReinforcementVisibility == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the reinforcement's start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSingle.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSingle.#ctor">
            <summary>
            Create instance of Reinforcement
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementSingle.#ctor(System.Boolean)">
            <summary>
            Create instance of Reinforcement
            <param name="SkipAttributes">Defines if attribute loading happens or not.</param>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementGroup">
            <summary>
            The ReinforcementGroup class defines a reinforcement group in the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementGroup.Attributes">
            <summary>
            The attributes of the reinforcement.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementGroup.ReinforcementCustomPosition">
            <summary>
            Defines the location of the reinforcement bar when using ReinforcementVisibility == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the reinforcement's start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementGroup.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementGroup.#ctor">
            <summary>
            Create instance of ReinforcementGroup
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementGroup.#ctor(System.Boolean)">
            <summary>
            Create instance of ReinforcementGroup
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementMesh">
            <summary>
            The ReinforcementMesh class defines a reinforcement mesh in the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementMesh.Attributes">
            <summary>
            The attributes of the reinforcement.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementMesh.ReinforcementCustomPositionLongitudinal">
            <summary>
            Defines the location of the longitudinal wire when using ReinforcementVisibility == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the reinforcement's start point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementMesh.ReinforcementCustomPositionCrossing">
            <summary>
            Defines the location of the crossing bar when using MeshReinforcementVisibilityCrossing == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the mesh's start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementMesh.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementMesh.#ctor">
            <summary>
            Create instance of ReinforcementMesh
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementMesh.#ctor(System.Boolean)">
            <summary>
            Create instance of ReinforcementMesh
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementStrand">
            <summary>
            The ReinforcementStrand class defines a reinforcement mesh in the drawing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementStrand.Attributes">
            <summary>
            The attributes of the reinforcement.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementStrand.ReinforcementCustomPosition">
            <summary>
            Defines the location of the reinforcement bar when using ReinforcementVisibility == ReinforcementVisibilityTypes.Customized.
            This location is a value between 0.0 and 1.0 and it defines the proportion from the reinforcement's start point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementStrand.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementStrand.#ctor">
            <summary>
            Create instance of ReinforcementStrand
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementStrand.#ctor(System.Boolean)">
            <summary>
            Create instance of ReinforcementStrand
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Size">
            <summary>
            The Size class contains the width and height properties.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Size.Width">
            <summary>
            Gets or sets the width value of the size instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Size.Height">
            <summary>
            Gets or sets the height value of the size instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Size.#ctor">
            <summary>
            Creates a new size instance with zero width and height.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Size.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new size instance with the specified width and height.
            </summary>
            <param name="Width">The width to be used.</param>
            <param name="Height">The height to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Size.ToString">
            <summary>
            Returns a string that represents this instance (in fractional inches if advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES set to true).
            </summary>
            <returns> A string that represents this instance using default separator character "x".</returns>
            <example>
            This example shows how to convert a <see cref="T:Tekla.Structures.Drawing.Size"/> instance into a string representation.
            The result is affected by the value of the advanced option: XS_USE_ONLY_INCHES_IN_SHEET_SIZES.
            In order for this advanced option to work, set the advanced options XS_IMPERIAL and XS_IMPERIAL_INPUT to TRUE.
            If the advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES is set to TRUE the result would display as: 17"x10"1/2
            but if set to FALSE it would display as: 431.8x266.7
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       // For this demonstration, we'll format 431.8x266.7 millimeters.
                       Size size = new Size(431.8, 266.7);
            
                       string formattedString = size.ToString();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.Size.ToString(System.String)">
            <summary>
            Returns a string that represents this instance (in fractional inches if advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES set to true).
            </summary>
            <param name="separator">The separator characters(s).</param>
            <returns> A string that represents this instance using the specified separator character(s).</returns>
            <example>
            This example shows how to convert a <see cref="T:Tekla.Structures.Drawing.Size"/> instance into a string representation using
            a specific separator parameter.
            The result is affected by the value of the advanced option: XS_USE_ONLY_INCHES_IN_SHEET_SIZES.
            In order for this advanced option to work, set the advanced options XS_IMPERIAL and XS_IMPERIAL_INPUT to TRUE.
            If the advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES is set to TRUE the result would display as: 17" by 10"1/2
            but if set to FALSE it would display as: 431.8 by 266.7
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       // For this demonstration, we'll format 431.8x266.7 millimeters.
                       Size size = new Size(431.8, 266.7);
            
                       string formattedString = size.ToString(" by ");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.Size.ToString(System.IFormatProvider,System.String)">
            <summary>
            Returns a string that represents this instance (in fractional inches if advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES set to true).
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="separator">The optional separator characters(s) - defaults to "x".</param>
            <returns>
            A string that represents this instance.
            </returns>
            <example>
            This example shows how to convert a <see cref="T:Tekla.Structures.Drawing.Size"/> instance into a string representation using
            a format provider and optionally a specific separator parameter.
            The result is affected by the value of the advanced option: XS_USE_ONLY_INCHES_IN_SHEET_SIZES.
            In order for this advanced option to work, set the advanced options XS_IMPERIAL and XS_IMPERIAL_INPUT to TRUE.
            If the advanced option XS_USE_ONLY_INCHES_IN_SHEET_SIZES is set to TRUE the result would display as: 17" * 10"1/2
            but if set to FALSE it would display as: 431,8 * 266,7
            If not specified, the separator defaults to: x (lower case).
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       // For this demonstration, we'll format 431.8x266.7 millimeters.
                       Size size = new Size(431.8, 266.7);
            
                       var germanCulture = System.Globalization.CultureInfo.CreateSpecificCulture("de-DE");
                       string formattedString = size.ToString(germanCulture, " * ");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.RectangleBoundingBox">
            <summary>
            The RectangleBoundingBox class represents a bounding box for an object,
            i.e. the surrounding box of the object. The bounding box contains the
            calculated corner points of the box. The rectangle bounding box is
            inherited from the axis-aligned bounding box. The AABB also contains methods
            for getting the center point of the box.
            </summary>
            <example>
            The following example is about how to draw a polygon around an object's bounding box:
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   static bool DrawBB(ViewBase DrawView, RectangleBoundingBox boundingBox, DrawingColors Color)
                   {
                       PointList points = new PointList();
                       points.Add(boundingBox.LowerLeft);
                       points.Add(boundingBox.UpperLeft);
                       points.Add(boundingBox.UpperRight);
                       points.Add(boundingBox.LowerRight);
                       Polygon MyPolygon = new Polygon(DrawView, points);
                       MyPolygon.Attributes.Line.Color = Color;
                       MyPolygon.Insert();
            
                       return true;
                   }
            }
            </code> 
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.UpperLeft">
            <summary>
            The upper left corner point of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.UpperRight">
            <summary>
            The upper right corner point of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.LowerLeft">
            <summary>
            The lower left corner point of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.LowerRight">
            <summary>
            The lower right corner point of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.Width">
            <summary>
            The width of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.Height">
            <summary>
            The height of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RectangleBoundingBox.AngleToAxis">
            <summary>
            The angle of the bounding box in relation to the axis (the coordinate system's X-plane).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.RectangleBoundingBox.CreateRectangleBoundingBox(Tekla.Structures.Geometry3d.Point,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new RectangleBoundingBox with the given values.
            </summary>
            <param name="CenterPoint">The center point of the bounding box.</param>
            <param name="Width">The width of the bounding box.</param>
            <param name="Height">The height of the bounding box.</param>
            <param name="AngleToAxis">The angle of the box (compared to the X-axis).</param>
            <returns>The created rectangle bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RectangleBoundingBox.ToString">
            <summary>
            Returns the rectangle bounding box values as a string.
            </summary>
            <returns>The rectangle bounding box values as a string.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RectangleBoundingBox.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events">
            <summary>
            The Events class allows the user to register event listeners for drawing user interface events.
            </summary>
            <remarks>
            Asynchronous event handling
            <para>Registered event handlers are called asynchronously so that many handlers may be running
            simultaneously. Event handlers are not guaranteed to be run in the same thread where they were registered.
            The asynchronous nature of the events requires the use of synchronization constructs on objects
            and data structures that are not defined to be thread safe.</para>
            <para>
            <list type="bullet">
            <item>Microsoft's documentation about the lock statement: http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx</item>
            <item>Microsoft's documentation about delegates: http://msdn.microsoft.com/en-us/library/900fyy8e.aspx</item>
            <item>Microsoft's documentation about managed threading: http://msdn.microsoft.com/en-us/library/1c9txz50.aspx</item>
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to make sure that only one selection event handler is running at a time.
            <code>
               using Tekla.Structures.Drawing;
               using Tekla.Structures.Drawing.UI;
               
               public class Example
               {
                   private Tekla.Structures.Drawing.UI.Events _events = new Tekla.Structures.Drawing.UI.Events();
                   private object _selectionEventHandlerLock = new object();
                   
                   public void RegisterEventHandler()
                   {
                       _events.SelectionChange += Events_SelectionChangeEvent;
                       _events.Register();
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       _events.UnRegister();
                   }
                   
                   void Events_SelectionChangeEvent()
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock(_selectionEventHandlerLock)
                       {
                           System.Console.WriteLine("Selection changed event received.");
                       }
                   }
               }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.SelectionChangeDelegate">
            <summary>
            The delegate to use for selection change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.DrawingEditorOpenedDelegate">
            <summary>
            The delegate to use for drawing editor opening.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.DrawingEditorClosedDelegate">
            <summary>
            The delegate to use for drawing editor closing.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.DrawingLoadedDelegate">
            <summary>
            The delegate to use for drawing loading.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.DrawingListSelectionChangedDelegate">
            <summary>
            The delegate to use for drawing list selection change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.InterruptedDelegate">
            <summary>
            The delegate to use for interrupted event
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutEditingModeEnteredDelegate">
            <summary>
            The delegate to use for entering layout edit mode.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutEditingModeExitedDelegate">
            <summary>
            The delegate to use for exiting layout edit mode.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutTableDeletedDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutTableInsertedDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutTableModifiedDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutTableLayoutModifiedDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Events.LayoutOptionModifiedDelegate">
            <exclude/>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.SelectionChange">
            <summary>
            The SelectionChange event is raised when the selection is changed in a Tekla Structures drawing.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.DrawingEditorOpened">
            <summary>
            The DrawingEditorOpened event is raised when the drawing editor is opened.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.DrawingEditorClosed">
            <summary>
            The DrawingEditorClosed event is raised when the drawing editor is closed.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.DrawingLoaded">
            <summary>
            The DrawingLoaded event is raised when a new drawing is opened in the drawing editor.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.DrawingListSelectionChanged">
            <summary>
            The DrawingListSelectionChanged event is raised when selection on the drawing list has changed.
            </summary>
            <remarks>
            This event is also raised if a file is selected or deselected in Document Manager,
            but no information about the selected file(s) is available.
            </remarks>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.Interrupted">
            <summary>
            Occurs when user interrupts.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutEditingModeEntered">
            <summary>
            The LayoutEditingModeEntered event is raised when layout editing mode is started.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutEditingModeExited">
            <summary>
            The LayoutEditingModeEntered event is raised when layout editing mode is finished.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutTableInserted">
            <summary>
            The event is raised when table is inserted
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutTableModified">
            <summary>
            The event is never raised 
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutTableDeleted">
            <summary>
            The event is raised when table is deleted
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutTableLayoutModified">
            <summary>
            The event is raised when tablelayout is modified
            </summary>
        </member>
        <member name="E:Tekla.Structures.Drawing.UI.Events.LayoutOptionModified">
            <summary>
            The event is raised when layout option is modified
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnSelectionChange(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnDrawingEditorOpen(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnDrawingEditorClose(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnDrawingLoaded(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnDrawingListSelectionChanged(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutEditingModeEntered(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutEditingModeExited(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutTableDeleted(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutTableInserted(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutTableModified(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutTableLayoutModified(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnLayoutOptionModified(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.OnInterrupted">
            <summary>
            Called when uesr interrupts.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.#ctor">
            <summary>
            Constructs a new instance of Events.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.Register">
            <summary>
            Registers the instance to listen to the specified events.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if attempting registration when already registered.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Events.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.DrawingObjectSelector">
            <summary>
            The DrawingObjectSelector class is used to select drawing objects in the drawing.
            The class contains methods for selecting/unselecting single objects or
            a list of objects. Currently, these selections both select the objects from the
            database and highlight them visually.
            </summary>
            <example>
            In the following example, the lines in the drawing are selected first. The selection
            is then extended with circles and finally all the selected objects in the drawing are
            gotten.
            <code>
            using Tekla.Structures.Drawing;
            using System;
            using System.Collections;
            
            public class Example
            {
                   Drawing MyCurrentDrawing = new GADrawing();
                   DrawingHandler drawingHandler = new DrawingHandler();
            
                   ArrayList GetDrawingObjectsByType(Type objectType)
                   {
                       ArrayList ObjectsToBeSelected = new ArrayList();
            
                       foreach(DrawingObject drawingObject in MyCurrentDrawing.GetSheet().GetAllObjects())
                       {
                           if(drawingObject.GetType() == objectType)
                           {
                               ObjectsToBeSelected.Add(drawingObject);
                           }
                       }
            
                       return ObjectsToBeSelected;
                   }
            
                   public void Example1()
                   {
                       ArrayList MyLines = GetDrawingObjectsByType(typeof(Line));
                       if(MyLines.Count > 0)
                       {
                           drawingHandler.GetDrawingObjectSelector().SelectObjects(MyLines, false);
                       }
                   }
            
                   public void Example2()
                   {
                       ArrayList MyCircles = GetDrawingObjectsByType(typeof(Circle));
                       if(MyCircles.Count > 0)
                       {
                           drawingHandler.GetDrawingObjectSelector().SelectObjects(MyCircles, true);
                       }
                   }
            
                   public void Example3()
                   {
                       foreach(DrawingObject drawingObject in drawingHandler.GetDrawingObjectSelector().GetSelected())
                       {
                           if(drawingObject is Line)
                           {
                               Line line = drawingObject as Line;
                               // Do something with the line.
                           }
                           else if(drawingObject is Circle)
                           {
                               // Do something with the circle.
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes">
            <summary>
            Types of selector. Who else besides sonar needs such ducumentation!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.NewSelection">
            <summary>
            NewSelection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.ExtendSelection">
            <summary>
            ExtendSelection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.ReduceSelection">
            <summary>
            ReduceSelection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.UnselectAll">
            <summary>
            UnselectAll
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.NewSelectionExtraHighLight">
            <summary>
            NewSelectionExtraHighLight
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectorTypes.ExtendSelectionExtraHighLight">
            <summary>
            ExtendSelectionExtraHighLight
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectObject(Tekla.Structures.Drawing.DrawingObject)">
            <summary>
            Selects a single object in the drawing. 
            </summary>
            <param name="DrawingObject">The object to select.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectObjects(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Selects the specified drawing objects in the drawing.
            </summary>
            <param name="DrawingObjects">The drawing objects to be selected.</param>
            <param name="ExtendSelection">Defines whether the selector keeps the currently selected objects selected or not.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.UnselectObject(Tekla.Structures.Drawing.DrawingObject)">
            <summary>
            Unselects a drawing object.
            </summary>
            <param name="DrawingObject">The drawing object to be unselected.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.UnselectObjects(System.Collections.ArrayList)">
            <summary>
            Unselects the specified drawing objects keeping the other objects still selected.
            </summary>
            <param name="DrawingObjects">The drawing objects to be unselected.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.UnselectAllObjects">
            <summary>
            Unselects all the selected objects.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.GetSelected">
            <summary>
            Gets the selected objects in the drawing.
            </summary>
            <returns>A drawing object enumerator of the selected objects in the drawing.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectObjects(System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Selects the specified drawing objects in the drawing.
            </summary>
            <param name="DrawingObjects">The drawing objects to be selected.</param>
            <param name="ExtendSelection">Defines whether the selector keeps the currently selected objects selected or not.</param>
            <param name="SuppressCallbacks">if set to <c>true</c>, suppress callbacks.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.GetSelectedAnnotation">
            <summary>
            Gets the selected objects in the drawing.
            </summary>
            <returns>A drawing object enumerator of the selected objects in the drawing.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingObjectSelector.SelectObjectsWithHighLight(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Selects the specified drawing objects in the drawing and highlights them strongly
            </summary>
            <param name="DrawingObjects">The drawing objects to be selected.</param>
            <param name="ExtendSelection">Defines whether the selector keeps the currently selected objects selected or not.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.DrawingSelector">
            <summary>
            The DrawingSelector class provides functionality for accessing the drawing list dialog.
            </summary>
            <example>
            The following example deletes the selected drawings:
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           DrawingEnumerator SelectedDrawings = MyDrawingHandler.GetDrawingSelector().GetSelected();
                           while(SelectedDrawings.MoveNext())
                           {
                               SelectedDrawings.Current.Delete();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.DrawingSelector.GetSelected">
            <summary>
            Gets the drawings that are currently selected in the drawing list dialog.
            </summary>
            <returns>The drawings that are currently selected in the drawing list dialog.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.UI.Picker">
            <summary>
            The Picker class is used to pick points and objects in the drawing.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Drawing.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void PickPointExample()
                   {
                       var drawingHandler = new DrawingHandler();
            
                       Picker picker = drawingHandler.GetPicker();
                       
                       try
                       {
                           var pick = picker.PickPoint("Pick_point");
                           var point = pick.Item1;
                           var view = pick.Item2;
                           // Do something with the picked point and view.
                       }
                       catch(PickerInterruptedException)
                       {
                           // No pick happened
                       }
                   }
            }
            </code>
            </example>
            <remarks>
            Prompts
            <para>
            Tekla Structures prefixes the given prompt with "prompt_" and
            looks for a translation in the <c>prompts.ail</c> file. If the translation
            (e.g. "prompt_Pick_first_position") is not found in the <c>prompts.ail</c>
            file, the prompt string is displayed as such. This feature can be used to
            give already translated strings to the picker.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Drawing.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler drawingHandler = new DrawingHandler();
                       Picker picker = drawingHandler.GetPicker();
                       Point point = null;
                       ViewBase view = null;
            
                       string prompt = "Picke zwei Punkte um die Richtung vorzugeben";
                       picker.PickPoint(prompt, out point, out view);
                   }
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.#ctor(Tekla.Structures.Drawing.Drawing)">
            <summary>
            Initializes drawing editor picker.
            </summary>
            <param name="drawing">Target drawing editor.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.IsInteractive">
            <summary>
            Indicates whether the picker is interactive and currently allowed to access the UI or not. 
            If not, then the plug-in should avoid making dialog calls or message boxes.
            </summary>
            <returns>True if the picker is interactive.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoint(System.String,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests the user to pick one point.
            </summary>
            <param name="prompt">The prompt shown in the status bar.
            See the class remarks for more information about prompts.</param>
            <param name="pickedPoint">The picked point in the view coordinates.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoint(System.String)">
            <summary>
            Requests the user to pick one point.
            Returns the picked point in the view coordinates and the view in which the pick occurred.
            </summary>
            <param name="prompt">The prompt shown in the status bar.
            See the class remarks for more information about prompts.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickTwoPoints(System.String,System.String,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests a pick of two points from the user.
            </summary>
            <param name="firstPrompt">The prompt shown in the status bar before the first pick.
            See the class remarks for more information about prompts.</param>
            <param name="secondPrompt">The prompt shown in the status bar before the second pick.
            See the class remarks for more information about prompts.</param>
            <param name="firstPickedPoint">The first picked point in the view coordinates.</param>
            <param name="secondPickedPoint">The second picked point in the view coordinates.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickThreePoints(System.String,System.String,System.String,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests a pick of three points from the user.
            </summary>
            <param name="firstPrompt">The prompt shown in the status bar before the first pick.
            See the class remarks for more information about prompts.</param>
            <param name="secondPrompt">The prompt shown in the status bar before the second pick.
            See the class remarks for more information about prompts.</param>
            <param name="thirdPrompt">The prompt shown in the status bar before the third pick.
            See the class remarks for more information about prompts.</param>
            <param name="firstPickedPoint">The first picked point in the view coordinates.</param>
            <param name="secondPickedPoint">The second picked point in the view coordinates.</param>
            <param name="thirdPickedPoint">The third picked point in the view coordinates.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoints(System.Int32,Tekla.Structures.Drawing.StringList,Tekla.Structures.Drawing.PointList@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests N picks of points from the user.
            </summary>
            <param name="numberOfPicks">The number of requested picks.</param>
            <param name="prompts">The prompts shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <param name="pickedPoints">The picked points in the view coordinates.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoints(System.Int32,Tekla.Structures.Drawing.StringList)">
            <summary>
            Requests N picks of points from the user.
            Returns the picked points in the view coordinates and the view in which the pick occurred.
            </summary>
            <param name="numberOfPicks">The number of requested picks.</param>
            <param name="prompts">The prompts shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoints(Tekla.Structures.Drawing.StringList,Tekla.Structures.Drawing.PointList@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests picks of points from the user. The sequence is terminated by the middle button pick.
            </summary>
            <param name="prompts">The prompts shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <param name="pickedPoints">The picked points in the view coordinates.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoints(Tekla.Structures.Drawing.StringList)">
            <summary>
            Requests picks of points from the user. The sequence is terminated by the middle button pick.
            Returns the picked points in the view coordinates and the view in which the pick occurred.
            </summary>
            <param name="prompts">The prompts shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObject(System.String,Tekla.Structures.Drawing.DrawingObject@,Tekla.Structures.Drawing.ViewBase@)">
            <summary>
            Requests the user to pick one object.
            </summary>
            <param name="prompt">The prompt shown in the status bar before the pick.
            See the class remarks for more information about prompts.</param>
            <param name="pickedObject">The picked drawing object.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObject(System.String)">
            <summary>
            Requests the user to pick one object.
            Returns the picked drawing object and the view in which the pick occurred.
            </summary>
            <param name="prompt">The prompt shown in the status bar before the pick.
            See the class remarks for more information about prompts.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObject(System.String,Tekla.Structures.Drawing.DrawingObject@,Tekla.Structures.Drawing.ViewBase@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Requests the user to pick one object. Returns the picked point in addition to the picked object.
            </summary>
            <param name="prompt">The prompt shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <param name="pickedObject">The picked drawing object.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="pickedPoint">The picked point in the view coordinates.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObjectAndPoint(System.String)">
            <summary>
            Requests the user to pick one object.
            Returns the picked drawing object, the view in which the pick occurred and picked point in the view coordinates.
            </summary>
            <param name="prompt">The prompt shown in the status bar before the pick.
            See the class remarks for more information about prompts.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObject(System.String,System.Type[],Tekla.Structures.Drawing.DrawingObject@,Tekla.Structures.Drawing.ViewBase@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Requests the user to pick one object of the given types. Returns the picked point in addition to the picked object.
            </summary>
            <param name="prompt">The prompt shown in the status bar before the picks.
            See the class remarks for more information about prompts.</param>
            <param name="typeFilter">The types to pick. If null, any type is allowed.</param>
            <param name="pickedObject">The picked drawing object.</param>
            <param name="pickedView">The view in which the pick occurred.</param>
            <param name="pickedPoint">The picked point in the view coordinates.</param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            Thrown when the picker is being used through a plug-in which has invalid PluginPickerInputs defined.
            </exception>
            <exception cref="T:Tekla.Structures.Drawing.PickerInterruptedException">
            Thrown when the user interrupts the picker before anything has been picked.
            </exception>
            <remarks>
            The list of types to pick may contain any object derived from DrawingObject or
            DrawingObject itself. For example, <c>typeof(ModelObject)</c> will allow picking of
            part, bolts, reinforcements, etc.
            <code>
            using Tekla.Structures.Drawing;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       // Allow picking of model objects and rectangles.
                       Type [] TypeFilter = new Type[] { typeof(ModelObject), typeof(Rectangle) };
                   }
            }
            </code>
            <code>
            using Tekla.Structures.Drawing;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       // Allow picking of all kinds of dimensions.
                       Type [] TypeFilter = new Type[] { typeof(DimensionBase) };
                   }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickPoints(Tekla.Structures.Drawing.StringList,System.Int32,Tekla.Structures.Drawing.UI.Picker.PickerTypes)">
            <summary>
            The function the performs all the point picking
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.UI.Picker.PickObjects(System.String,Tekla.Structures.Drawing.UI.Picker.PickerTypes,System.Type[])">
            <summary>
            The function that performs the actual object picking, used by the other PickObject(s) - functions
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.EdgeChamfer">
            <summary>
            The EdgeChamfer class contains methods related to edge chamfers.
            An edge chamfer is a drawing object derived from a model object.
            It represents a drawing chamfer that has a reference to the
            actual chamfer in the model database.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EdgeChamfer.Attributes">
            <summary>
            The attributes of the edge chamfer.
            For more information see <see cref="T:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes">
            <summary>
            The EdgeChamferAttributes class is the attributes class for the edge chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes.VisibleLines">
            <summary>
            The line type of the chamfer.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes.#ctor">
            <summary>
            Creates a new default edge chamfer attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes.#ctor(System.String)">
            <summary>
            Creates a new edge chamfer attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.EdgeChamferAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.#ctor">
            <summary>
            Create instance of Bolt
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.Delete">
            <summary>
            Deletes the drawing chamfer from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.Modify">
            <summary>
            Modifies the drawing chamfer.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.EdgeChamfer.Select">
            <summary>
            Selects the drawing chamfer from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Grid">
            <summary>
            The Grid class contains methods related to grids.
            A drawing grid is inserted/removed using the view.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Drawing MyDrawing = new GADrawing();
                       View curview = new View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(),
                           new AABB(new Point(), new Point(30000, 30000, 10000)));
                       Grid curGrid;
            
                       DrawingObjectEnumerator allObjects = curview.GetAllObjects();
                       while(allObjects.MoveNext())
                       {
                           if(allObjects.Current is Grid)
                           {
                               curGrid = allObjects.Current as Grid;
                               curGrid.Attributes.DrawTextAtTopOfGrid = true;
                               curGrid.Attributes.Font.Color = DrawingColors.Red;
                               curGrid.Modify(); /* Apply changes */
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.Grid.GridTextPlacement">
            <summary>
            The different placing options for the Text labels on a Grid.
            Use OR operator (|) to combine more than one option.
            Ex. GridBottom | GridLeft, to show Text labels on both left and bottom of grid.
            TextPosition =      (GridLine.GridLineTextPlacement.OnlyText | 
                                 GridLine.GridLineTextPlacement.GridBottom | 
                                 GridLine.GridLineTextPlacement.GridRight | 
                                 GridLine.GridLineTextPlacement.GridTop | 
                                 GridLine.GridLineTextPlacement.GridLeft);
            The above code makes the gridlines invisible but shows all the text labels of the grid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Grid.GridTextPlacement.GridBottom">
            <summary>
            Text label shown on bottom of Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Grid.GridTextPlacement.GridLeft">
            <summary>
            Text label shown on left of Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Grid.GridTextPlacement.GridTop">
            <summary>
            Text label shown on top of Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Grid.GridTextPlacement.GridRight">
            <summary>
            Text label shown on right of Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Grid.GridTextPlacement.OnlyText">
            <summary>
            Only Text shown on Grid, no lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.Attributes">
            <summary>
            The attributes of the grid.
            For more information see <see cref="T:Tekla.Structures.Drawing.Grid.GridAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Grid.GridAttributes">
            <summary>
            The GridAttributes class is the attributes class for the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.Font">
            <summary>
            The grid's font attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.Line">
            <summary>
            The grid's line attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.Frame">
            <summary>
            The frame attributes of the grid's labels.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.DrawTextAtBottomOfGrid">
            <summary>
            Set as true if you want to show the grid's text labels at the bottom of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.DrawTextAtTopOfGrid">
            <summary>
            Set as true if you want to show the grid's text labels at the top of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.DrawTextAtLeftOfGrid">
            <summary>
            Set as true if you want to show the grid's text labels at the left of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.DrawTextAtRightOfGrid">
            <summary>
            Set as true if you want to show the grid's text labels at the right of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.DrawOnlyTextLabelsNotGrids">
            <summary>
            Set as true if you don't want to draw the grids, only show the grids' text labels.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.OffsetAtStartOfLine">
            <summary>
            The offset for the beginning of the grid lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Grid.GridAttributes.OffsetAtEndOfLine">
            <summary>
            The offset for the end of the grid lines.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GridAttributes.#ctor">
            <summary>
            Creates a new default grid attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GridAttributes.#ctor(System.String)">
            <summary>
            Creates a new grid attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GridAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GridAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GetObjects">
            <summary>
            Retrieves a DrawingObjectEnumerator for all the grid lines of the grid.
            </summary>
            <returns>A DrawingObjectEnumerator for all the grid lines of the grid.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.GetObjects(System.Type[])">
            <summary>
            Retrieves a DrawingObjectEnumerator for all the grid lines of the grid that are of certain TypeFilter.
            </summary>
            <param name="TypeFilter">The types of the grid lines to get.</param>
            <returns>A DrawingObjectEnumerator for all the grid lines of the grid that are of certain TypeFilter.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.Insert">
            <summary>
            Calls the system to insert the new object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Grid.Delete">
            <summary>
            Grids cannot be deleted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GridLine">
             <summary>
             The GridLine class contains methods related to grid lines.
             A drawing grid line is always a child of a grid object.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public void Example1()
                    {
                        Drawing MyDrawing = new GADrawing();
                        View curview = new View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(),
                            new AABB(new Point(), new Point(30000, 30000, 10000)));
                        DrawingObjectEnumerator allObjects = curview.GetAllObjects();
                        Grid curGrid = allObjects.Current as Grid;
                        GridLine curGridLine;
            
                        DrawingObjectEnumerator allGridLines = curGrid.GetObjects();
                        while(allGridLines.MoveNext()) /* Iterate through all the grid lines of the grid */
                        {
                            if(allGridLines.Current is GridLine)
                            {
                                curGridLine = allGridLines.Current as GridLine;
                                curGridLine.Attributes.DrawTextAtStartOfGridLine = true;
                                curGridLine.Attributes.DrawTextAtEndOfGridLine = true;
                                curGridLine.Attributes.Font.Color = DrawingColors.Red;
            
                                // The following code moves the grid labels off the grid lines by 200.
                                curGridLine.StartLabel.GridLabelPoint.Y = curGridLine.StartLabel.GridPoint.Y + 200;
                                curGridLine.EndLabel.GridLabelPoint.Y = curGridLine.EndLabel.GridPoint.Y + 200;
            
                                curGridLine.Modify(); /* Apply changes */
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.GridLine.GridLineTextPlacement">
            <summary>
            The different placing options for the Text on a Grid Line.
            Use OR operator (|) to combine more than one option.
            Ex. LineStart | LineEnd, to show Text on both start and end.
            TextPosition = (GridLine.GridLineTextPlacement.OnlyText | GridLine.GridLineTextPlacement.LineStart | GridLine.GridLineTextPlacement.LineEnd);
            The above code makes the gridlines invisible but shows all the text labels of the lines.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.GridLine.GridLineTextPlacement.LineStart">
            <summary>
            Text shown on start of Grid Line
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.GridLine.GridLineTextPlacement.LineEnd">
            <summary>
            Text shown on end of Grid Line
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.GridLine.GridLineTextPlacement.OnlyText">
            <summary>
            Only Text shown on Grid Line, no line is drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.Attributes">
            <summary>
            The attributes of the grid line.
            For more information see <see cref="T:Tekla.Structures.Drawing.GridLine.GridLineAttributes"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.StartLabel">
            <summary>
            The beginning of the grid line, contains the grid label and position information.
            For more information see <see cref="T:Tekla.Structures.Drawing.GridLine.GridLabel"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.EndLabel">
            <summary>
            The end of the grid line, contains the grid label and position information.
            For more information see <see cref="T:Tekla.Structures.Drawing.GridLine.GridLabel"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.GridLine.GridLabel">
            <summary>
            The GridLabel class contains the grid labels of the grid lines, the text label and the insertion points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.CenterPoint">
            <summary>
            The center point of the grid label.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.FrameWidth">
            <summary>
            The width of the grid label frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.FrameHeight">
            <summary>
            The height of the grid label frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.TextWidth">
            <summary>
            The width of the grid label's text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.TextHeight">
            <summary>
            The height of the grid label's text frame.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.GridPoint">
            <summary>
            The grid line point, without offsets taken into consideration (model grid line coordinates).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.OffsetGridPoint">
            <summary>
            The grid line point where the grid line actually ends, with offsets applied.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.GridLabelPoint">
            <summary>
            The grid line's label point.
            If the value of GridLabelPoint differs from the OffsetGridPoint value,
            a leader line will be created to the GridLabelPoint position.
            You can remove the leader line by setting GridLabelPoint to the GridPoint value
            (or by setting the GridLabelPoint anywhere on the grid line, but then the offset will change).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLabel.GridLabelText">
            <summary>
            The grid line's label text.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLabel.GetAxisAlignedBoundingBox">
            <summary>
            The bounding box of the grid line label (rectangle format, axis aligned).
            </summary>
            <returns>The bounding box of the grid line label.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLabel.GetAxisAlignedBoundingBoxOfTextLabel">
            <summary>
            The bounding box of the grid line label's text (rectangle format, axis aligned).
            </summary>
            <returns>The bounding box of the grid line label's text.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLabel.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the object using the move vector.
            </summary>
            <param name="MoveVector">The move vector to be used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLabel.#ctor">
            <summary>
            Creates a new default grid label instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.GridLine.GridLineAttributes">
            <summary>
            The GridLineAttributes class is the attributes class for the grid line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.Font">
            <summary>
            The grid line's font attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.Line">
            <summary>
            The grid line's line attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.Frame">
            <summary>
            The frame attributes of the grid line's label.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.OffsetAtStartOfLine">
            <summary>
            The offset for the beginning of the grid line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.OffsetAtEndOfLine">
            <summary>
            The offset for the end of the grid line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.DrawTextAtStartOfGridLine">
            <summary>
            Set as true if you want to show the grid line's text label at the start of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.DrawTextAtEndOfGridLine">
            <summary>
            Set as true if you want to show the grid line's text label at the end of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.DrawOnlyTextLabelsNotGridLines">
            <summary>
            Set as true if you don't want to draw the grid lines, only show the grid lines' text labels.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.GridLine.GridLineAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLineAttributes.#ctor">
            <summary>
            Creates a new default grid line attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLineAttributes.#ctor(System.String)">
            <summary>
            Creates a new grid line attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLineAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.GridLineAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.Insert">
            <summary>
            GridLines cannot be inserted.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.GridLine.Delete">
            <summary>
            GridLines cannot be deleted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IHasChildren">
            <summary>
            The IHasChildren interface is implemented by objects that have child objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IHasChildren.GetObjects">
            <summary>
            Gets the children of the current object.
            </summary>
            <returns>The children of the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IHasChildren.GetObjects(System.Type[])">
            <summary>
            Gets the children of the current object that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The children of the current object that are of certain types.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IAxisAlignedBoundingBox">
            <summary>
            The IAxisAlignedBoundingBox interface is implemented by objects that have an axis aligned bounding box.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IAxisAlignedBoundingBox.GetAxisAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in the global axis coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IMovableRelative">
            <summary>
            The IMovableRelative interface is implemented by objects that can be moved.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IMovableRelative.MoveObjectRelative(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the current object using the move vector.
            The move vector can be calculated as in the following example.
            </summary>
            <param name="MoveVector">The move vector to be used for moving the object.</param>
            <returns>True on success.</returns>
            <example>
            The example calculates a move vector from two points.
            The move vector in the example will move an object 1000 points in the +X direction.
            <code>
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Tekla.Structures.Geometry3d.Vector MoveVec =
                           new Tekla.Structures.Geometry3d.Vector(new Point(1000, 0) - new Point(0, 0));
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.IObjectAlignedBoundingBox">
            <summary>
            The IObjectAlignedBoundingBox interface is implemented by objects that have an object aligned bounding box.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.IObjectAlignedBoundingBox.GetObjectAlignedBoundingBox">
            <summary>
            Gets the bounding box for the current object in its local coordinate system.
            </summary>
            <returns>A rectangle bounding box for the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Bolt">
            <summary>
            The Bolt class contains methods related to bolts.
            A bolt is a drawing object derived from a model object.
            It represents a drawing bolt that has a reference to the
            actual bolt in the model database.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Bolt.Representation">
            <summary>
            The bolt representations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.Solid">
            <summary>
            The solid representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.ExactSolid">
            <summary>
            The exact solid representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.Symbol">
            <summary>
            The symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.Symbol2">
            <summary>
            The second symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.Symbol3">
            <summary>
            The third symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.DINSymbol">
            <summary>
            The DIN symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.Representation.UserDefined">
            <summary>
            The user defined representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.SymbolContents.Hole">
            <summary>
            Hole
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Bolt.SymbolContents.Axis">
            <summary>
            Axis
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.Attributes">
            <summary>
            The attributes of the bolt.
            For more information see <see cref="T:Tekla.Structures.Drawing.Bolt.BoltAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Bolt.BoltAttributes">
            <summary>
            The BoltAttributes class is the attributes class for the bolt.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.BoltAttributes.Color">
            <summary>
            The color of the bolt.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.BoltAttributes.Representation">
            <summary>
            The representation type of the bolt.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.BoltAttributes.SymbolContainsHole">
            <summary>
            True if the bolt symbol contains a hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.BoltAttributes.SymbolContainsAxis">
            <summary>
            True if the bolt symbol contains an axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Bolt.BoltAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the bolt
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.BoltAttributes.#ctor">
             <summary>
             Creates a new default bolt attributes instance that loads standard attributes.
             </summary>
            
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.BoltAttributes.#ctor(System.Boolean)">
             <summary>
             Creates a new default bolt attributes instance that loads standard attributes.
             <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
             </summary>
            
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.BoltAttributes.#ctor(System.String)">
            <summary>
            Creates a new bolt attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.BoltAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.BoltAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.#ctor">
            <summary>
            Create instance of Bolt
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.#ctor(System.Boolean)">
            <summary>
            Create instance of Bolt
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.Insert">
            <summary>
            NOT IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Bolt.CheckVisibility(System.Int32)">
            <summary>
            Gets info about lines visibility
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Connection">
            <summary>
            The Connection class contains methods related to connections.
            A connection is a drawing object derived from a model object.
            It represents a drawing connection that has a reference to the
            actual connection in the model database.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.#ctor">
            <summary>
            Create instance of Connection
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.Delete">
            <summary>
            Deletes the drawing connection from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.Modify">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Connection.Select">
            <summary>
            Selects the drawing connection from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase">
            <summary>
            The ReinforcementBase class contains methods related to reinforcements.
            A reinforcement is a drawing object derived from a model object.
            It represents a drawing reinforcement that has a reference to the
            actual reinforcement in the model database.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes">
            <summary>
            The available reinforcement representation types.
            See Tekla Structures help, "Reinforcement appearance", for more information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.SingleLine">
            <summary>A single line with radiused bends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.DoubleLine">
            <summary>The outline of a bar with radiused bends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.Filled">
            <summary>A solid bar with radiused bends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.Stick">
            <summary>A single line without radiused bends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.OutLine">
            <summary>Shows the shape of the mesh using an outline rectangle or polygon, and a diagonal line.
            Only applies to reinforcement meshes.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.DoubleLineFilledEnds">
            <summary>The outline of a bar with radiused bends and filled bar ends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.SingleLineFilledEnds">
            <summary>A single line with radiused bends and filled bar ends.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementRepresentationTypes.OutlineIgnoreHoles">
            <summary>Shows the shape of the mesh using an outline rectangle or polygon, and a diagonal line. It ignores the holes in the meshes.
            Only applies to reinforcement meshes.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes">
            <summary>
            The available reinforcement visibility types.
            Only applies to bar groups and meshes.
            See Tekla Structures help, "Setting the visibility of reinforcement in drawings", for more information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.All">
            <summary>Shows all bars in a group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.First">
            <summary>Only shows the first bar in the group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.Last">
            <summary>Only shows the last bar in the group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.FirstAndLast">
            <summary>Shows the first and last bar in the group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.OneInTheMiddle">
            <summary>Shows one bar in the middle of the group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.TwoInTheMiddle">
            <summary>Shows two bars in the middle of the group or mesh.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementVisibilityTypes.Customized">
            <summary>Indicates that you have specified the location of the only visible reinforcing bar.
            See "Adjusting reinforcing bars" in the Tekla Structures help for more information.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes">
            <summary>
            The available straight end symbol types.
            See Tekla Structures help, "Reinforcement appearance", for more information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.NoSymbol">
            <summary>No straight end symbol.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.HooksOnInnerSide">
            <summary>Draws half hooks on the reinforcement's inner side.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.HooksOnOuterSide">
            <summary>Draws half hooks on the reinforcement's outer side.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.HookOnReinforcementStartOuterSide">
            <summary>
            Draws a half hook on the reinforcement's outer side in the reinforcement's start point,
            and another half hook on the inner side in the end point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.HookOnReinforcementStartInnerSide">
            <summary>
            Draws a half hook on the reinforcement's inner side in the reinforcement's start point,
            and another half hook on the outer side in the end point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.StraightEndSymbolTypes.FullHooks">
            <summary>Draws full hooks in the reinforcement's end points.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.HookedEndSymbolTypes">
            <summary>
            The available hooked end symbol types.
            See Tekla Structures help, "Reinforcement appearance", for more information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.HookedEndSymbolTypes.NoHook">
            <summary>No hook symbol.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.HookedEndSymbolTypes.HalfHook">
            <summary>The half hook symbol.</summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.ReinforcementBase.HookedEndSymbolTypes.FullHook">
            <summary>The full hook symbol.</summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.Attributes">
            <summary>
            The common attributes of all reinforcements.
            For more information see <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes"/>.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes">
            <summary>
            The ReinforcementSingleAttributes class is the base attributes class for
            ReinforcementSingle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.ReinforcementVisibility">
            <summary>
            Defines which bars in the group appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.StraightEndSymbolType">
            <summary>
            Defines how the straight ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.HookedEndSymbolType">
            <summary>
            Defines how the hooked ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.#ctor">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default reinforcement attributes instance without loading attributes.
            <param name="SkipAttributeLoading">Can be set to any value.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.#ctor(System.String)">
            <summary>
            Creates a new reinforcement attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSingleAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes">
            <summary>
            The ReinforcementGroupAttributes class is the base attributes class for
            ReinforcementGroup.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.ReinforcementVisibility">
            <summary>
            Defines which bars in the group appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.StraightEndSymbolType">
            <summary>
            Defines how the straight ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.HookedEndSymbolType">
            <summary>
            Defines how the hooked ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.#ctor">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be loaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.#ctor(System.String)">
            <summary>
            Creates a new reinforcement attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementGroupAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes">
            <summary>
            The ReinforcementSetGroupAttributes class is the base attributes class for
            ReinforcementSetGroup.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes"/> class that loads the specified attributes.
            </summary>
            <param name="AttributeFile">
            The AttributeFile string.
            </param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes"/> class, with SkipLoadingAttributes flag.
            </summary>
            <param name="SkipLoadingAttributes">
            The skip loading attributes.
            </param>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.ReinforcementVisibility">
            <summary>
            Gets or sets which bars in the group appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.StraightEndSymbolType">
            <summary>
            Gets or sets how the straight ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.HookedEndSymbolType">
            <summary>
            Gets or sets how the hooked ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementSetGroupAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes">
            <summary>
            The ReinforcementStrandAttributes class is the base attributes class for
            ReinforcementStrand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.ReinforcementVisibility">
            <summary>
            Defines which bars in the group appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.StraightEndSymbolType">
            <summary>
            Defines how the straight ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.HookedEndSymbolType">
            <summary>
            Defines how the hooked ends of reinforcing bars should look like.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.#ctor">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.#ctor(System.String)">
            <summary>
            Creates a new reinforcement attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementStrandAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes">
            <summary>
            The ReinforcementMeshAttributes class is the base attributes class for ReinforcementMesh.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.MeshReinforcementVisibilityLongitudinal">
            <summary>
            Defines which longitudinal wires in the mesh appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.MeshReinforcementVisibilityCrossing">
            <summary>
            Defines which crossing bars in the mesh appear in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.MeshReinforcementSymbolIndex">
            <summary>
            Defines the index for the mesh symbol to be used.
            The mesh symbol appears in the middle of the mesh line when ReinforcementRepresentation == OutLine.
            The index starts from 0 and corresponds to the symbol in the file mesh.sym.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.MeshReinforcementSymbolSize">
            <summary>
            Defines the size of the reinforcement mesh symbol.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.#ctor">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default reinforcement attributes instance that loads standard attributes.
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.#ctor(System.String)">
            <summary>
            Creates a new reinforcement attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementMeshAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes">
            <summary>
            The ReinforcementBaseAttributes class is the attributes class for the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.ReinforcementRepresentation">
            <summary>
            The representation of reinforcing bars.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.VisibleLines">
            <summary>
            The line type of the visible lines of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.HiddenLines">
            <summary>
            The line type of the hidden lines of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.HideLinesHiddenByPart">
            <summary>
            Defines whether lines hidden by parts should be hidden or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.HideLinesHiddenByReinforcement">
            <summary>
            Defines whether lines hidden by reinforcements should be hidden or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.#ctor">
            <summary>
            Creates a new default Reinforcement attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.#ctor(System.String)">
            <summary>
            Creates a new Reinforcement attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new Reinforcement attributes instance that does not load attributes.
            </summary>
            <param name="SkipLoadingAttributes">If it set to true attributes won't be lodaded.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.ReinforcementBaseAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.Delete">
            <summary>
            Deletes the drawing reinforcement from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.Modify">
            <summary>
            Modifies the drawing reinforcement in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.Insert">
            <summary>
            Inserts the drawing reinforcement into the current drawing database.
            NOT YET IMPLEMENTED.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.NotImplementedException">Reinforcements cannot be inserted yet.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.ReinforcementBase.Select">
            <summary>
            Selects the drawing reinforcement from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Surfacing">
            <summary>
            The Surfacing class contains methods related to surfacings.
            A surfacing is a drawing object derived from a model object.
            It represents a drawing surfacing that has a reference to the
            actual surfacing in the model database.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Surfacing.Representation">
            <summary>
            The surfacing representations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.Outline">
            <summary>
            The outline representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.Symbol">
            <summary>
            The symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.WorkshopForm">
            <summary>
            The workshop form representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.Exact">
            <summary>
            The exact representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.BoundingBox">
            <summary>
            The bounding box representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Representation.BaseBox">
            <summary>
            The base box representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Flags.ShowPattern">
            <summary>
            Show pattern
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Flags.HiddenLines">
            <summary>
            Hidden lines
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Surfacing.Flags.OwnHiddenLines">
            <summary>
            Own hidden lines
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.Attributes">
            <summary>
            The attributes of the surfacing.
            For more information see <see cref="T:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes">
            <summary>
            The SurfacingAttributes class is the attributes class for the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.Representation">
            <summary>
            The representation type of the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.ShowPattern">
            <summary>
            True if the pattern is shown.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.DrawHiddenLines">
            <summary>
            True if hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.DrawOwnHiddenLines">
            <summary>
            True if own hidden lines are enabled.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.VisibleLines">
            <summary>
            The line type of visible lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.HiddenLines">
            <summary>
            The line type of hidden lines.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.#ctor">
            <summary>
            Creates a new default surfacing attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.#ctor(System.String)">
            <summary>
            Creates a new surfacing attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The name of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.SurfacingAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.#ctor">
            <summary>
            Create instance of Surfacing
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Surfacing.Select">
            <summary>
            Selects the drawing surfacing from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Weld">
            <summary>
            The Weld class contains methods related to welds.
            A weld is a drawing object derived from a model object.
            It represents a drawing weld that has a reference to the
            actual weld in the model database.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Weld.Representation">
            <summary>
            The weld representations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Weld.Representation.Outline">
            <summary>
            The outline solid representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Weld.Representation.Path">
            <summary>
            The path representation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Weld.Flags">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.Weld.Flags.HiddenLines">
            <summary>
            Hidden lines
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Weld.Flags.OwnHiddenLines">
            <summary>
            Own hidden lines
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.Attributes">
            <summary>
            The attributes of the weld.
            For more information see <see cref="T:Tekla.Structures.Drawing.Weld.WeldAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Weld.WeldAttributes">
            <summary>
            The WeldAttributes class is the attributes class for the weld.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.Representation">
            <summary>
            The representation of the weld.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.VisibleLines">
            <summary>
            The line type of visible lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.HiddenLines">
            <summary>
            The line type of hidden lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.DrawHiddenLines">
            <summary>
            True if hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.DrawOwnHiddenLines">
            <summary>
            True if own hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Weld.WeldAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the weld
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.WeldAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default weld attributes instance that might load attributes.
            SkipLoading value does make any difference.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.WeldAttributes.#ctor">
            <summary>
            Creates a new default weld attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.WeldAttributes.#ctor(System.String)">
            <summary>
            Creates a new weld attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.WeldAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.WeldAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.#ctor">
            <summary>
            Create instance of Weld
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.#ctor(System.Boolean)">
            <summary>
            Create instance of Weld
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.Delete">
            <summary>
            Deletes the drawing weld from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.Modify">
            <summary>
            Calls the system to update/modify the weld.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Weld.Select">
            <summary>
            Selects the drawing weld from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Tools.DrawingCoordinateConverter">
             <summary>
             The DrawingCoordinateConverter class is used to move coordinates from one view to 
             another. This tool takes into account the empty areas in the views.
             </summary>
             <example>
             In the following example a similar polygon is drawn to a view and to a sheet:
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Drawing.Tools;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                        DrawingHandler DrawingHandler = new DrawingHandler();
            
                        ViewBase sheet = DrawingHandler.GetActiveDrawing().GetSheet();
            
                        DrawingObjectEnumerator Views = sheet.GetAllObjects(typeof(View));
            
                        Views.MoveNext();
                        View myView = Views.Current as View;
            
                        PointList PointsInView = new PointList();
                        PointsInView.Add(new Point(0, 0));
                        PointsInView.Add(new Point(100, 0));
                        PointsInView.Add(new Point(100, 100));
                        Polygon polygonInView = new Polygon(myView, PointsInView);
                        polygonInView.Insert();
                        PointList PointsInSheet = DrawingCoordinateConverter.Convert(myView, sheet, PointsInView);
                        Polygon polygon = new Polygon(sheet, PointsInSheet);
                        polygon.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.DrawingCoordinateConverter.Convert(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Converts one coordinate point from one view's coordinate system to another view's coordinate system.
            </summary>
            <param name="fromView">The source view.</param>
            <param name="toView">The target view.</param>
            <param name="point">The point to be converted.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.DrawingCoordinateConverter.Convert(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Converts a list of coordinate points from one view's coordinate system to another view's coordinate system.
            </summary>
            <param name="fromView">The source view.</param>
            <param name="toView">The target view.</param>
            <param name="pointList">The list of points to be converted.</param>
            <returns>The converted list of points.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Tools.InputDefinitionFactory">
            <summary>
            The InputDefinitionFactory class contains helper functions for input definition handling.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Drawing.UI;
            using Tekla.Structures.Drawing.Tools;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures.Plugins;
            
            public class Example
            {
                   public void Example1()
                   {
                       var drawingHandler = new DrawingHandler();
                       Picker picker = drawingHandler.GetPicker();
            
                       var pick = picker.PickPoint("Pick a point");
                       var inputDefinition = InputDefinitionFactory.CreateInputDefinition(pick);
            
                       ViewBase myView = InputDefinitionFactory.GetView(inputDefinition);
                       Point myPoint = InputDefinitionFactory.GetPoint(inputDefinition);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a single-point input definition.
            </summary>
            <param name="view">The view to be used in the input.</param>
            <param name="point">The point to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a two-point input definition.
            </summary>
            <param name="view">The view to be used in the input.</param>
            <param name="point1">The first point to be used in the input.</param>
            <param name="point2">The second point to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a three-point input definition.
            </summary>
            <param name="view">The view to be used in the input.</param>
            <param name="point1">The first point to be used in the input.</param>
            <param name="point2">The second point to be used in the input.</param>
            <param name="point3">The third point to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.PointList)">
            <summary>
            Creates a multi-point input definition.
            </summary>
            <param name="view">The view to be used in the input.</param>
            <param name="points">The points to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(System.Tuple{Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.ViewBase})">
            <summary>
            Creates a single-point input definition.
            </summary>
            <param name="input">The point and the view to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(System.Tuple{Tekla.Structures.Drawing.PointList,Tekla.Structures.Drawing.ViewBase})">
            <summary>
            Creates a multi-point input definition.
            </summary>
            <param name="input">The points and the view to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(System.Tuple{Tekla.Structures.Drawing.DrawingObject,Tekla.Structures.Drawing.ViewBase})">
            <summary>
            Creates a single-object input definition.
            </summary>
            <param name="input">The drawing object and the view to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.CreateInputDefinition(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Drawing.DrawingObject)">
            <summary>
            Creates a single-object input definition.
            </summary>
            <param name="view">The view to be used in the input.</param>
            <param name="drawingObject">The object to be used in the input.</param>
            <returns>The input definition.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.GetView(Tekla.Structures.Plugins.DrawingPluginBase.InputDefinition)">
            <summary>
            Gets the view that the given input belongs to.
            </summary>
            <param name="input">The input.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.GetDrawingObject(Tekla.Structures.Plugins.DrawingPluginBase.InputDefinition)">
            <summary>
            Gets the object from the given single-object input.
            </summary>
            <param name="input">The input.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.GetPoint(Tekla.Structures.Plugins.DrawingPluginBase.InputDefinition)">
            <summary>
            Gets the point from the given single-point input.
            </summary>
            <param name="input">The input.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tools.InputDefinitionFactory.GetPoints(Tekla.Structures.Plugins.DrawingPluginBase.InputDefinition)">
            <summary>
            Gets the points from the given n-point input.
            </summary>
            <param name="input">The input.</param>
            <returns>The points.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">
            <summary>
            The TeklaStructuresDrawingsApplicationException class defines the base class for all exceptions
            that can be thrown while using Tekla.Structures.Drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException.#ctor">
            <summary>
            Creates a new exception instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException.#ctor(System.String)">
            <summary>
            Creates a new exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotLoadAttributesException">
            <summary>
            The CannotLoadAttributesException class defines the exception
            that is thrown when the loading of attributes failed.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotLoadAttributesException.#ctor(System.String)">
            <summary>
            Creates a new cannot load attributes exception instance.
            </summary>
            <param name="AttributeFile">The name of the attribute file that was being loaded.</param>
        </member>
        <member name="F:Tekla.Structures.Drawing.CannotLoadAttributesException.AttributeFile">
            <summary>The name of the attribute file that was being loaded.</summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InvalidAttributesForOperationException">
            <summary>
            The InvalidAttributesForOperationException class defines the exception
            that is thrown when an object's attributes are set to something that is
            not valid for the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InvalidAttributesForOperationException.#ctor(System.String)">
            <summary>
            Creates a new exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotModifyNonActiveDrawingException">
            <summary>
            The CannotModifyNonActiveDrawingException class defines the exception
            that is thrown when a user tries to modify a drawing
            that is not set as active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotModifyNonActiveDrawingException.#ctor(System.String)">
            <summary>
            Creates a new cannot modify non-active drawing exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotInsertDrawingException">
            <summary>
            The CannotInsertDrawingException class defines the exception
            that is thrown when a user tries to insert a drawing
            when another drawing is active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotInsertDrawingException.#ctor(System.String)">
            <summary>
            Creates a new cannot insert drawing exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotDeleteActiveDrawingException">
            <summary>
            The CannotDeleteActiveDrawingException class defines the exception
            that is thrown when a user tries to delete a drawing
            that is active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotDeleteActiveDrawingException.#ctor(System.String)">
            <summary>
            Creates a new cannot delete active drawing exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.PickerInterruptedException">
            <summary>
            The PickerInterruptedException class defines the exception
            that is thrown when a user interrupts the picker.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.PickerInterruptedException.#ctor">
            <summary>
            Creates a new picker interrupted exception instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotPerformOperationDrawingEditorMustBeClosedException">
            <summary>
            The CannotPerformOperationDrawingEditorMustBeClosedException class
            defines the exception that is thrown when a user tries to do an
            operation which requires the drawing editor to be closed.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotPerformOperationDrawingEditorMustBeClosedException.#ctor(System.String)">
            <summary>
            Creates a new cannot perform operation drawing editor must be closed exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotPerformOperationNumberingNotUpToDate">
            <summary>
            The CannotPerformOperationNumberingNotUpToDate class
            defines the exception that is thrown when a user tries to do an
            operation which requires that numbering is up to date.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotPerformOperationNumberingNotUpToDate.#ctor(System.String)">
            <summary>
            Creates a new cannot perform operation numbering not up to date exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotPerformOperationDrawingIsActiveException">
            <summary>
            The CannotPerformOperationDrawingIsActiveException class defines the
            exception that is thrown when a user tries to do an operation which
            requires that the drawing is not active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotPerformOperationDrawingIsActiveException.#ctor(System.String)">
            <summary>
            Creates a new cannot perform operation drawing is active exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotPerformOperationDrawingMustBeActiveException">
            <summary>
            The CannotPerformOperationDrawingMustBeActiveException class defines the
            exception that is thrown when a user tries to do an operation which
            requires that the drawing is active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotPerformOperationDrawingMustBeActiveException.#ctor(System.String)">
            <summary>
            Creates a new cannot perform operation drawing must be active exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotPerformOperationDrawingNotUpToDateException">
            <summary>
            The CannotPerformOperationDrawingNotUpToDateException class defines the
            exception that is thrown when a user tries to do an operation which
            requires that the drawing is active.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotPerformOperationDrawingNotUpToDateException.#ctor(System.String)">
            <summary>
            Creates a new cannot perform operation drawing not up to date exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotCreateSectionViewFrom3dView">
            <summary>
            The CannotCreateSectionViewFrom3dView class defines the exception that is 
            thrown when a user tries to create a section view from a 3d view.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotCreateSectionViewFrom3dView.#ctor(System.String)">
            <summary>
            Creates a new cannot create section view from 3d view exception instance.
            </summary>
            <param name="Message">The exception message.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.InvalidPluginPickerInputException">
            <summary>
            The InvalidPluginPickerInputException class defines the exception that is
            thrown when UI.Picker is used during a Plugin.Insert call but the previously 
            assigned PluginPickerInput does not correspond to the next UI.Picker call.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InvalidPluginPickerInputException.#ctor">
            <summary>
            Creates a new InvalidPluginPickerInputException instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginException">
            <summary>
            The CannotSetAttributeForPluginException class defines the exception that is
            thrown when Plugin.SetAttribute is called but the attribute cannot be set.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotSetAttributeForPluginException.#ctor">
            <summary>
            Creates a new CannotSetAttributeForPluginException instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotSetAttributeForPluginException.#ctor(System.String)">
            <summary>
            Creates a new CannotSetAttributeForPluginException instance.
            </summary>
            <param name="Description">The additional description.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException">
            <summary>
            The CannotSetAttributeForPluginDueToIncorrectTypeException class defines the exception that is
            thrown when Plugin.SetAttribute is called but the type is incorrect.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException.#ctor">
            <summary>
            Creates a new CannotSetAttributeForPluginDueToIncorrectTypeException instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToIncorrectTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new CannotSetAttributeForPluginDueToIncorrectTypeException instance.
            </summary>
            <param name="ExpectedType">The expected type.</param>
            <param name="GivenType">The given type.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToInexistantFieldException">
            <summary>
            The CannotSetAttributeForPluginDueToInexistantFieldException class defines the exception that is
            thrown when Plugin.SetAttribute is called but the field does not exist.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotSetAttributeForPluginDueToInexistantFieldException.#ctor">
            <summary>
            Creates a new CannotSetAttributeForPluginDueToInexistantFieldException instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginException">
            <summary>
            The CannotGetAttributeForPluginException class defines the exception that is
            thrown when Plugin.GetAttribute is called but the attribute cannot be fetched.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotGetAttributeForPluginException.#ctor">
            <summary>
            Creates a new CannotGetAttributeForPluginException instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotGetAttributeForPluginException.#ctor(System.String)">
            <summary>
            Creates a new CannotGetAttributeForPluginException instance.
            </summary>
            <param name="Description">The additional description.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException">
            <summary>
            The CannotGetAttributeForPluginDueToIncorrectTypeException class defines the exception that is
            thrown when Plugin.GetAttribute is called but the type is incorrect.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException.#ctor">
            <summary>
            Creates a new CannotGetAttributeForPluginDueToIncorrectTypeException instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToIncorrectTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new CannotGetAttributeForPluginDueToIncorrectTypeException instance.
            </summary>
            <param name="ExpectedType">The expected type.</param>
            <param name="GivenType">The given type.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToInexistantFieldException">
            <summary>
            The CannotGetAttributeForPluginDueToInexistantFieldException class defines the exception that is
            thrown when Plugin.GetAttribute is called but the field does not exist.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.CannotGetAttributeForPluginDueToInexistantFieldException.#ctor">
            <summary>
            Creates a new CannotGetAttributeForPluginDueToInexistantFieldException instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.InvalidTypeException">
            <summary>
            The InvalidTypeException class defines the exception that is
            thrown when a type was not one of the allowed ones.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.InvalidTypeException.#ctor(System.String)">
            <summary>
            Creates a new InvalidTypeException instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Exceptions.ExceptionTypes">
            <summary>
            Add new Exception Types to this list.
            Skip lots of numbers if you are starting a new category 
            (leave room for changes).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Exceptions.ThrowNewException(Tekla.Structures.Drawing.Exceptions.ExceptionTypes)">
            <summary>
            The exception to throw for each ExceptionType
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Exceptions.CheckMinimalExportValues(Tekla.Structures.DrawingInternal.QueryTypeEnum,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Call this function from your Export function.
            It checks the basic information.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.SinglePartDrawing">
            <summary>
            The SinglePartDrawing class is for handling single part drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SinglePartDrawing.PartIdentifier">
            <summary>
            The identifier of the model object part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.SinglePartDrawing.SheetNumber">
            <summary>
            The sheet number of the drawing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a new single part drawing with standard attributes.
            </summary>
            <param name="partIdentifier">The identifier of the model object part</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.#ctor(Tekla.Structures.Identifier,System.String)">
            <summary>
            Instantiates a new single part drawing with given attributes.
            </summary>
            <param name="partIdentifier">The identifier of the model object part</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.#ctor(Tekla.Structures.Identifier,System.Int32)">
            <summary>
            Instantiates a new single part drawing with standard attributes and with a specified sheet number.
            </summary>
            <param name="partIdentifier">The identifier of the model object part</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.#ctor(Tekla.Structures.Identifier,System.Int32,System.String)">
            <summary>
            Instantiates a new single part drawing with standard attributes and with a specified sheet number.
            </summary>
            <param name="partIdentifier">The identifier of the model object part</param>
            <param name="sheetNumber">The sheet number of the drawing.</param>
            <param name="AttributeFile">The filename of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.Modify">
            <summary>
            Updates the drawing object in the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.Insert">
            <summary>
            Inserts a new single part drawing. Views are added according to the View Creation rules of the standard file.
            A drawing can be inserted only when there is no active drawing.
            </summary>
            <returns>True on success.</returns>
            <exception cref="T:Tekla.Structures.Drawing.CannotInsertDrawingException">Thrown if inserting a drawing when another drawing is active.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.SinglePartDrawing.Select">
            <summary>
            Selects the drawing.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.IntList">
            <summary>
            The IntList class defines a type safe list of integers.
            </summary>
            <example>
            The following example adds some integers to the list and calculates the sum of them:
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       int Sum = 0;
                       IntList MyIntList = new IntList();
            
                       MyIntList.Add(1);
                       MyIntList.Add(2);
                       MyIntList.Add(5);
            
                       foreach(int MyInt in MyIntList)
                       {
                           Sum += MyInt;
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.IntList.Item(System.Int32)">
            <summary>
            Gets or sets the integer at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.Add(System.Int32)">
            <summary>
            Adds a new integer to the end of the string list.
            </summary>
            <param name="value">The integer to be added to the list.</param>
            <returns>The index where the integer was added.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.Contains(System.Int32)">
            <summary>
            Checks if the given integer is in the list.
            </summary>
            <param name="value">The integer to be checked.</param>
            <returns>True if the integer is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.IndexOf(System.Int32)">
            <summary>
            Gets the index of the specified integer.
            </summary>
            <param name="value">The integer to locate in the list.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start
            the search from and the end of the list.
            </summary>
            <param name="value">The integer to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.IndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start the search from and startIndex + count.
            </summary>
            <param name="value">The integer to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts the integer to the specified index.
            </summary>
            <param name="index">The index where the integer is inserted.</param>
            <param name="value">The integer to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a sub-list of the integer list.
            </summary>
            <param name="index">The start index of the new list.</param>
            <param name="count">The number of items in the new list.</param>
            <returns>The new integer list.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.LastIndexOf(System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="value">The integer to locate.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.LastIndexOf(System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="value">The integer to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.LastIndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="value">The integer to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.Remove(System.Int32)">
            <summary>
            Removes the first occurence of the integer from the list.
            </summary>
            <param name="value">The integer to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.ToArray">
            <summary>
            Copies the integers to an integer array.
            </summary>
            <returns>The array of integers.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.IntList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.LeaderLine">
            <summary>
            The LeaderLine class defines a leader line attached to a parent object, for example a Text or a Mark.
            The LeaderLine can be modified to add/remove elbow points or to change where it is pointing.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Point = Tekla.Structures.Geometry3d.Point;
            
            public class Example
            {
                public void Example1()
                {
                    DrawingHandler DrawHandler = new DrawingHandler();
                    Drawing CurrentDrawing = DrawHandler.GetActiveDrawing();
                    ContainerView Sheet = CurrentDrawing.GetSheet();
                    DrawingObjectEnumerator AllViews = Sheet.GetViews();
                    while(AllViews.MoveNext())
                    {
                        if(AllViews.Current is View)
                        {
                            View CurrentView = (View)AllViews.Current;
            
                            Point MyInsertionPoint = new Point(200, 600);
                            Text.TextAttributes MyTextAttributes = new Text.TextAttributes();
            
                            // Here we create one Text with a LeaderLine attached to it.
                            MyTextAttributes.PreferredPlacing = PreferredTextPlacingTypes.LeaderLinePlacingType();
                            Text MyText = new Text(CurrentView, MyInsertionPoint, "Text with a LeaderLine.",
                                                   new LeaderLinePlacing(new Point(10, 10)), MyTextAttributes);
                            MyText.Insert();
            
                            // Next we enumerate through all its children, which in this case is the LeaderLine.
                            DrawingObjectEnumerator TextChildren = MyText.GetObjects();
                            while(TextChildren.MoveNext())
                            {
                                if(TextChildren.Current is LeaderLine)
                                {
                                    // We then modify the LeaderLine to contain some elbow points of our choosing.
                                    LeaderLine CurrentLeaderLine = (LeaderLine)TextChildren.Current;
                                    CurrentLeaderLine.ElbowPoints.Add(new Point(50, 250));
                                    CurrentLeaderLine.ElbowPoints.Add(new Point(150, 250));
                                    CurrentLeaderLine.Modify();
                                    CurrentLeaderLine.Delete();
                                }
                            }
                        }
                        else
                        {
                            AllViews = ((ContainerView)AllViews.Current).GetViews();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes">
            <summary>
            The different types of leader lines available.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes.Undefined">
            <summary>
            No type defined yet (this means that the leader line isn't selected yet).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes.NormalLeaderLine">
            <summary>
            The standard leader line type. Its start point and elbow points can be freely modified.
            The end point is read-only information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes.SupportLeaderLine">
            <summary>
            The support leader line type, used in reinforcement marks with parallel leader lines.
            All leader line information is read-only.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes.ExtensionLeaderLine">
            <summary>
            The type for the extension leader lines (enabled by the usage of an advanced option).
            All leader line information is read-only.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LeaderLine.StartPoint">
            <summary>
            The starting point of the leader line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LeaderLine.EndPoint">
            <summary>
            The end point of the leader line (set by the parent object).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LeaderLine.ElbowPoints">
            <summary>
            The leader line's elbow points (middle points).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.LeaderLine.LeaderLineType">
            <summary>
            Gets the type of the leader line.
            For a list of the available leader line types see <see cref="T:Tekla.Structures.Drawing.LeaderLine.LeaderLineTypes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.Initialize">
            <summary>
            Initializes the standard values for LeaderLine
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.Insert">
            <summary>
            A leader line cannot be inserted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.Select">
            <summary>
            Selects the leader line from the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.Modify">
            <summary>
            Modifies the leader line in the current drawing database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.LeaderLine.Delete">
            <summary>
            A leader line cannot be deleted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ModelObject">
            <summary>
            The ModelObject class is an abstract class for all model objects in the drawing side.
            The model objects of the drawing side contain identifiers of the actual model objects in the model database.
            The model objects appear and disappear based on current view properties (view size, settings).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ModelObject.ModelIdentifier">
            <summary>
            The database identifier of the model object in the model database.
            By using this identifier, it is possible to select the actual object
            in the Tekla Structures model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ModelObject.Hideable">
            <summary>
            Accesses the information if this object is hidden or not or if it should be.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Part">
            <summary>
            The Part class contains methods related to parts.
            A part is a drawing object derived from a model object.
            It represents a drawing part that has a reference to the
            actual part in the model database.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.Part.Representation">
            <summary>
            The part representations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.Outline">
            <summary>
            The outline representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.Symbol">
            <summary>
            The symbol representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.WorkshopForm">
            <summary>
            The workshop form representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.Exact">
            <summary>
            The exact representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.BoundingBox">
            <summary>
            The bounding box representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.BaseBox">
            <summary>
            The base box representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Representation.SolidWithPartialProfile">
            <summary>
            The solid with partial profile representation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.InnerContours">
            <summary>
            Inner contours
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.HiddenLines">
            <summary>
            Hidden lines
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.OwnHiddenLines">
            <summary>
            Own hidden lines
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.CenterLine">
            <summary>
            Center line
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.ReferenceLine">
            <summary>
            Reference line
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.OrientationMark">
            <summary>
            Orientation mark
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.ConnectingSideMark">
            <summary>
            Connecting side mark
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.PopMarks">
            <summary>
            Pop-marks
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.Part.Flags.Chamfers">
            <summary>
            Chamfers
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.Attributes">
            <summary>
            The attributes of the part.
            For more information see <see cref="T:Tekla.Structures.Drawing.Part.PartAttributes"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Part.PartAttributes">
            <summary>
            The PartAttributes class is the attributes class for the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.Representation">
            <summary>
            The representation of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.PartialProfileLength">
            <summary>
            Gets or sets the partial profile length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.PartialProfileOffset">
            <summary>
            Gets or sets the partial profile offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.SymbolOffset">
            <summary>
            The symbol offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawHiddenLines">
            <summary>
            True if hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawOwnHiddenLines">
            <summary>
            True if own hidden lines are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawCenterLine">
            <summary>
            True if the center line is drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawReferenceLine">
            <summary>
            True if the reference line is drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawOrientationMark">
            <summary>
            True if the orientation mark is drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawConnectingSideMarks">
            <summary>
            True if connecting side marks are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawPopMarks">
            <summary>
            True if pop marks are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.DrawChamfers">
            <summary>
            True if chamfers are drawn.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.VisibleLines">
            <summary>
            The line type of visible lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.HiddenLines">
            <summary>
            The line type of hidden lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.ReferenceLine">
            <summary>
            The line type of the reference line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.FaceHatch">
            <summary>
            The hatch type of the face hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.SectionFaceHatch">
            <summary>
            The hatch type of the section face hatch.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.Part.PartAttributes.CustomPresentation">
            <summary>
            Custom presentation GUID to be applied to the object type
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.PartAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default part attributes instance that doesn't load attributes.
            SkipLoading value does make any difference.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.PartAttributes.#ctor">
            <summary>
            Creates a new default part attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.PartAttributes.#ctor(System.String)">
            <summary>
            Creates a new part attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.PartAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="AttributeFile">The filename of the attribute file.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.PartAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.#ctor">
            <summary>
            Create instance of Part
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.#ctor(System.Boolean)">
            <summary>
            Create instance of Part
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.Delete">
            <summary>
            Calls the system to delete the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.Modify">
            <summary>
            Calls the system to update/modify the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.Insert">
            <summary>
            NOT YET IMPLEMENTED.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Part.Select">
            <summary>
            Calls the system to select and retrieve the object.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.PointList">
            <summary>
            The PointList class defines a type safe point list.
            </summary>
            <example>
            The following example adds a few points to the point list and inserts a new polygon:
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Drawing MyDrawing = new GADrawing();
                       View MyView = new View(MyDrawing.GetSheet(), new CoordinateSystem(), new CoordinateSystem(),
                           new AABB(new Point(), new Point(30000, 30000, 10000)));
            
                       PointList MyPointList = new PointList();
            
                       MyPointList.Add(new Point(0.0, 0.0, 0.0));
                       MyPointList.Add(new Point(100.0, 0.0, 0.0));
                       MyPointList.Add(new Point(100.0, 500.0, 0.0));
                       MyPointList.Add(new Point(0.0, 500.0, 0.0));
            
                       Polygon MyPolygon = new Polygon(MyView, MyPointList);
                       MyPolygon.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.PointList.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.Add(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds a new point to the end of the point list.
            </summary>
            <param name="value">The point to be added to the list.</param>
            <returns>The index where the point was added.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.AddRange(Tekla.Structures.Drawing.PointList)">
            <summary>
            Appends all points from another point list to the end of this point list.
            </summary>
            <param name="value">The points to be added to the list.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.Contains(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Checks if the given point is in the list.
            </summary>
            <param name="value">The point to be checked.</param>
            <returns>True if the point is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.IndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets the index of the specified point.
            </summary>
            <param name="value">The point to locate in the list.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search
            from and the end of the list.
            </summary>
            <param name="value">The point to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search from and startIndex + count.
            </summary>
            <param name="value">The point to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.Insert(System.Int32,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Inserts the point to the specified index.
            </summary>
            <param name="index">The index where the point is inserted.</param>
            <param name="value">The point to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the point list.
            </summary>
            <param name="index">The start index of the new list.</param>
            <param name="count">The number of items in the new list.</param>
            <returns>The new point list.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="value">The point to locate.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="value">The point to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="value">The point to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.Remove(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Removes the first occurence of the point from the list.
            </summary>
            <param name="value">The point to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.ToArray">
            <summary>
            Copies the points to a point array.
            </summary>
            <returns>The array of points.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PointList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.StringList">
            <summary>
            The StringList class defines a type safe string collection.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            
            public class Example
            {
                   public void Example1()
                   {
                       StringList stringList = new StringList();
            
                       stringList.Add("MyString");
                       stringList.Add("MySecondString");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.StringList.Item(System.Int32)">
            <summary>
            Gets or sets the string at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.#ctor(System.Int32)">
            <summary>
            Creates a new string list instance with the given capacity.
            </summary>
            <param name="Capacity">The capacity of the string list.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.#ctor">
            <summary>
            Creates a new string list instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.Add(System.String)">
            <summary>
            Adds a new string to the end of the string list.
            </summary>
            <param name="value">The string to be added to the list.</param>
            <returns>The index where the string was added.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.Contains(System.String)">
            <summary>
            Checks if the string is in the list.
            </summary>
            <param name="value">The string to be checked.</param>
            <returns>True if the string is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.IndexOf(System.String)">
            <summary>
            Gets the index of the specified string.
            </summary>
            <param name="value">The string to locate in the list.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.IndexOf(System.String,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start
            the search from and the end of the list.
            </summary>
            <param name="value">The string to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start the search from and startIndex + count.
            </summary>
            <param name="value">The string to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts the string to the specified index.
            </summary>
            <param name="index">The index where the string is inserted.</param>
            <param name="value">The string to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the string list.
            </summary>
            <param name="index">The start index of the new list.</param>
            <param name="count">The number of items in the new list.</param>
            <returns>The new string list.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.LastIndexOf(System.String)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="value">The string to locate.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.LastIndexOf(System.String,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="value">The string to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="value">The string to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.Remove(System.String)">
            <summary>
            Removes the first occurence of the string from the list.
            </summary>
            <param name="value">The string to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.ToArray">
            <summary>
            Copies the strings to a string array.
            </summary>
            <returns>The array of strings.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.StringList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Tool_ObjectGeometry">
            <summary>
            This class handles all the calculation of any objects size and shape or visual layout
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetMinPoint(Tekla.Structures.Drawing.RectangleBoundingBox)">
            <summary>
            Gets the smallest point of the box
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetMaxPoint(Tekla.Structures.Drawing.RectangleBoundingBox)">
            <summary>
            Gets the largest point of the box
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.RotatePoint(Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Rotates a point around the center point by the specified angle (in radians).
             Rotation adheres to the following rules for the new coordinates:
             x' = x cos(a) + y sin(a)
             y' = -x sin(a) + y cos(a)
            </summary>
            <param name="point"></param>
            <param name="angle"></param>
            <param name="centerPoint"></param>
            <returns>The rotated point</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.tool_deg_to_rad(System.Double)">
            <summary>
            Converts angle in degrees to radians
            </summary>
            <param name="angleInDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.tool_rad_to_deg(System.Double)">
            <summary>
            Converts angle in radians to degrees
            </summary>
            <param name="angleInRadians"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.EnlargeBoundingBoxIfrequiredToContainThisPoint(Tekla.Structures.Drawing.RectangleBoundingBox,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Enlarges the bounding box if required to contain this point.
            </summary>
            <param name="refBoundingBox">The reference bounding box.</param>
            <param name="P">The point.</param>
            <returns>A Bounding box containing the given point also.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetAxisAlignedBoundingBox(Tekla.Structures.Drawing.GridLine.GridLabel)">
            <summary>
            Retrieves the Axis-Aligned Rectangle_BoundingBox of the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetAxisAlignedBoundingBox(Tekla.Structures.Drawing.ViewBase)">
            <summary>
            Retrieves the Axis-Aligned Rectangle_BoundingBox of the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetObjectBoundingBox(Tekla.Structures.Drawing.GridLine.GridLabel)">
            <summary>
            Retrieves the Rectangle_BoundingBox of the object 
            (these are axis aligned by default, since these objects don't have an angle)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetObjectBoundingBox(Tekla.Structures.Drawing.ViewBase)">
            <summary>
            Retrieves the Rectangle_BoundingBox of the object 
            (these are axis aligned by default, since these objects don't have an angle)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetObjectAlignedBoundingBox(Tekla.Structures.Geometry3d.Point,System.Double,System.Double,System.Double)">
            <summary>
            Construct a RectangleBoundingBox from the BB width, height, angle and center point.
            </summary>
            <param name="InsertionPoint"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="Angle"></param>
            <returns>Returns the created bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetAxisAlignedBoundingBox(Tekla.Structures.Geometry3d.Point,System.Double,System.Double,System.Double)">
            <summary>
            Construct an axis aligned RectangleBoundingBox from the BB width, height, angle and center point.
            </summary>
            <param name="InsertionPoint"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="Angle"></param>
            <returns>Returns the created bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetObjectAlignedBoundingBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double)">
            <summary>
            Construct an object aligned RectangleBoundingBox from the start point, end point, and depths up and down.
            </summary>
            <param name="StartPoint">The starting point of the box.</param>
            <param name="EndPoint">The ending point of the box.</param>
            <param name="DepthUp">The depth up that the rectangular box should cover.</param>
            <param name="DepthDown">The depth down that the rectangular box should cover.</param>
            <returns>Returns the created bounding box if successful, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetCircleCenterByThreePoints(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets center point of the circle by the given three points.
            </summary>
            <param name="StartArcPoint">The start point of the arc.</param>
            <param name="MiddleArcPoint">The middle point of the arc.</param>
            <param name="EndArcPoint">The end point of the arc.</param>
            <returns>Returns the center point, or null if the point does not exist or cannot be found.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Tool_ObjectGeometry.GetExtremaOfCurvedBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Gets the curved box extrema points by three arc points, view depth up and view depth down.
            </summary>
            <param name="ArcPoint1">The start point of the arc.</param>
            <param name="ArcPoint2">The middle point of the arc.</param>
            <param name="ArcPoint3">The end point of the arc.</param>
            <param name="DepthUp">The depth up that the curved box should cover.</param>
            <param name="DepthDown">The depth down that the curved box should cover.</param>
            <param name="ExtremaMin">The minimum point is returned, if the arc points belong to unique circle.</param>
            <param name="ExtremaMax">The maximum point is returned, if the arc points belong to unique circle.</param>
            <returns>Returns true if the curved box extrema points were found, otherwise false.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ContainerView">
            <summary>
            The ContainerView class contains container views that contain other drawing objects, including other views and container views. The drawing sheet is a container view.
            Container views do not contain drawing representations of model objects.
            </summary>
            <example>
            The following example uses a container view to create and insert a new view to the active drawing. A drawing must be open when executing code.
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       if(MyDrawingHandler.GetConnectionStatus())
                       {
                           Drawing Drawing = MyDrawingHandler.GetActiveDrawing();
                           CoordinateSystem CoordinateSystem = new CoordinateSystem(new Point(), new Vector(1, 0, 0), new Vector(0, 1, 0));
            
                           ContainerView ContainerView = Drawing.GetSheet();
            
                           View newView = new View(ContainerView, CoordinateSystem, CoordinateSystem, new AABB(new Point(0, 0), new Point(1000, 1000, 1000)));
                           newView.Insert();
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerView.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerView.GetViews">
            <summary>
            Gets all the views that are placed on the container view.
            </summary>
            <returns>The views that are placed on the container view.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ContainerView.GetAllViews">
            <summary>
            Gets all the views that are placed on the container view and their children views.
            </summary>
            <returns>The views that are placed on the container view and their children views.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.ViewBase">
            <summary>
            The ViewBase class is a base class for both the ContainerView class and the View class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.Width">
            <summary>
            The width of the view frame in paper coordinates.        
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.Height">
            <summary>
            The height of the view frame in paper coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.FrameOrigin">
            <summary>
            The vector from the view origin to the frame origin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.Origin">
            <summary>
            The view origin coordinates in the sheet.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.ExtremaCenter">
            <summary>
            Gets the view extrema center.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.IsSheet">
            <summary>
            Gets a value indicating whether the container view is the drawing's sheet.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetAxisAlignedBoundingBox">
            <summary>
            The view size in paper coordinates.
            </summary>
            <returns>The view size in paper coordinates.</returns>
        </member>
        <member name="P:Tekla.Structures.Drawing.ViewBase.LinkedDrawingId">
            <summary>
            The linked drawing of the containerview (only exists for actual linked drawing containerviews, otherwise 0)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.Delete">
            <summary>
            Deletes the view and its children objects from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.Modify">
            <summary>
            Modifies the view in the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.Insert">
            <summary>
            Inserts the view to the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.Select">
            <summary>
            Selects the view from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetObjects">
            <summary>
            Gets the objects in the view. Does not return child objects (single dimensions, grid lines, views).
            </summary>
            <returns>The objects in the view.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetObjects(System.Type[])">
            <summary>
            Gets the objects in the view that are of certain types. Does not return child objects (single dimensions, grid lines, views).
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>The objects in the view that are of certain types.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetAllObjects">
            <summary>
            Gets all the objects and their children objects in the view.
            </summary>
            <returns>All the objects in the view.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetAllObjects(System.Type[])">
            <summary>
            Gets all the objects and their children objects in the view that are of certain types.
            </summary>
            <param name="TypeFilter">The types of the objects to get.</param>
            <returns>All the objects in the view that are of certain types.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetAllObjects(System.Type)">
            <summary>
            Gets all the objects and their children objects in the view that are of a certain type.
            </summary>
            <param name="Type">The type of the objects to get.</param>
            <returns>All the objects in the view that are of a certain type.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetModelObjects(Tekla.Structures.Identifier)">
            <summary>
            Gets the drawing model objects based on given model object identifier. 
            If used from sheet model objects from all views are returned.
            </summary>
            <param name="ModelIdentifier">The identifier of the object in the model.</param>
            <returns>The model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.ViewBase.GetOriginalDrawing">
            <summary>
            Gets the drawing on which the view was originally created.
            @see DrawingObject.GetDrawing() for retrieving the current drawing the object resides on.
            </summary>
            <returns>The drawing from which the view was made, or NULL if it is not from another drawing.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.Internal.MarkTagsExporter">
            <summary>
            MarkTagsExporter class provides tools to export/import tags for detail, section and view label marks
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ExportDetailMarkTags(Tekla.Structures.Drawing.DetailMarkTagsAttributes)">
            <summary>
            Export detail mark tags to core
            </summary>
            <param name="MarkTagsAttributes">Detail mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ImportDetailMarkTags(Tekla.Structures.Drawing.DetailMarkTagsAttributes)">
            <summary>
            Import detail mark tags from core
            </summary>
            <param name="MarkTagsAttributes">Detail mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ExportSectionMarkTags(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes)">
            <summary>
            Export section mark tags to core
            </summary>
            <param name="MarkTagsAttributes">Section mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ImportSectionMarkTags(Tekla.Structures.Drawing.SectionMarkBase.SectionMarkTagsAttributes)">
            <summary>
            Import section mark tags from core
            </summary>
            <param name="MarkTagsAttributes">Section mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ExportViewTags(Tekla.Structures.Drawing.View.ViewMarkTagsAttributes)">
            <summary>
            Export view mark tags to core
            </summary>
            <param name="ViewTagsAttributes">View mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.Internal.MarkTagsExporter.ImportViewTags(Tekla.Structures.Drawing.View.ViewMarkTagsAttributes)">
            <summary>
            Import view mark tags to core
            </summary>
            <param name="ViewTagsAttributes">View mark tag attributes</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View">
             <summary>
             The View class contains methods related to views.
             Views are views that contain other drawing objects, excluding other views.
             Views also contain drawing representations of model objects.
             </summary>
             <example>
             The following example creates and inserts a new view to the active drawing. A drawing must be open when executing the code.
             <code>
             using Tekla.Structures.Drawing;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public void Example1()
                    {
                        DrawingHandler MyDrawingHandler = new DrawingHandler();
                        if(MyDrawingHandler.GetConnectionStatus())
                        {
                            Drawing Drawing = MyDrawingHandler.GetActiveDrawing();
                            CoordinateSystem CoordinateSystem = new CoordinateSystem(new Point(), new Vector(1, 0, 0), new Vector(0, 1, 0));
            
                            View newView = new View(Drawing.GetSheet(), CoordinateSystem, CoordinateSystem, new AABB(new Point(0, 0), new Point(1000, 1000, 1000)));
                            newView.Insert();
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewTypes">
            <summary>
            The possible types of views.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.UnknownViewType">
            <summary>
            The view type is not known.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.FrontView">
            <summary>
            Front side view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.TopView">
            <summary>
            Top side view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.BackView">
            <summary>
            Back side view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.BottomView">
            <summary>
            Bottom side view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.EndView">
            <summary>
            End side view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.SectionView">
            <summary>
            Section view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.ModelView">
            <summary>
            Model view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes.DetailView">
            <summary>
            Detail view of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewTypes._3DView">
            <summary>
            3d view of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.Attributes">
            <summary>
            The view attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.VisibleAreaRestrictionBoxes">
            <summary>
            Visible area restriction boxes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.Parts">
            <summary>
            Parts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.RestrictionBox">
            <summary>
            The axis aligned bounding box that represents the volume of the view.
            </summary>
            <seealso cref="M:Tekla.Structures.Drawing.View.GetVisibleAreaRestrictionBoxes"/>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.Name">
            <summary>
            The name of the view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewCoordinateSystem">
            <summary>
            The coordinate system of the view plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.DisplayCoordinateSystem">
            <summary>
            The coordinate system of the display plane.
            This can be used to transform global points from the model that is to be inserted in the view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewType">
            <summary>
            The view type information.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor">
            <summary>
            Create instance of View.
            Internal
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(System.Boolean)">
            <summary>
            Create instance of View
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(Tekla.Structures.Drawing.ContainerView,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,System.String)">
            <summary>
            Create instance of View.
            Internal
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(Tekla.Structures.Drawing.ContainerView,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Creates a new view instance with the given coordinate systems and model area.
            </summary>
            <param name="View">The container view where the view is placed.</param>
            <param name="ViewCoordinateSystem">The coordinate system of the view restriction box.</param>
            <param name="DisplayCoordinateSystem">The coordinate system of the display plane.</param>
            <param name="RestrictionBox">The restriction box describing the area of the model (in the view coordinate system).</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(Tekla.Structures.Drawing.ContainerView,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,System.Collections.ArrayList)">
            <summary>
            Creates a new view instance with the given coordinate systems and part list.
            </summary>
            <param name="View">The container view where the view is placed.</param>
            <param name="ViewCoordinateSystem">The coordinate system of the view restriction box.</param>
            <param name="DisplayCoordinateSystem">The coordinate system of the display plane.</param>
            <param name="PartList">An array list of identifiers of model objects to be shown in the view.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(Tekla.Structures.Drawing.ContainerView,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.AABB,System.String)">
            <summary>
            Creates a new view instance with the given coordinate systems, model area and attributes file's filename.
            </summary>
            <param name="View">The container view where the view is placed.</param>
            <param name="ViewCoordinateSystem">The coordinate system of the view restriction box.</param>
            <param name="DisplayCoordinateSystem">The coordinate system of the display plane.</param>
            <param name="RestrictionBox">The restriction box describing the area of the model (in the view coordinate system).</param>
            <param name="Attributes">The name of the attributes file to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.#ctor(Tekla.Structures.Drawing.ContainerView,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,System.Collections.ArrayList,System.String)">
            <summary>
            Creates a new view instance with the given coordinate systems, part list and attributes file's filename.
            </summary>
            <param name="View">The container view where the view is placed.</param>
            <param name="ViewCoordinateSystem">The coordinate system of the view restriction box.</param>
            <param name="DisplayCoordinateSystem">The coordinate system of the display plane.</param>
            <param name="PartList">An array list of identifiers of model objects to be shown in the view. For reference models both reference model and reference model object are required.</param>
            <param name="Attributes">The name of the attributes file to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.GetModelObjects">
            <summary>
            Gets the model objects that are in the view.
            </summary>
            <returns>The model objects that are in the view.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.GetVisibleAreaRestrictionBoxes">
            <summary>
            Gets the restriction boxes that represent the visible areas of the view.
            </summary>
            <returns>The restriction boxes that repserent the visible areas of the view.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewCommands">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_INVALID_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_DETAIL_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_SECTION_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_CURVED_SECTION_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_FRONT_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_TOP_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_BACK_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_BOTTOM_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_3D_VIEW_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_CREATE_3D_VIEW_WITH_PLANES_COMMAND">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_ROTATE_VIEW">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_ADD_VIEW_DIMENSIONING_RULE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewCommands.DOT_GR_ADD_OBJECTS_TO_VIEW">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateSectionView(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes,Tekla.Structures.Drawing.View@,Tekla.Structures.Drawing.SectionMark@)">
            <summary>
            Generates a new section view on the sheet and the associated section mark for the specified view.
            </summary>
            <param name="view">The view in which to place the section mark.</param>
            <param name="startPoint">The starting point of the section mark.</param>
            <param name="endPoint">The ending point of the section mark.</param>
            <param name="viewInsertionPoint">The point where to create the section view.</param>
            <param name="depthUp">The view depth up that the section view should cover.</param>
            <param name="depthDown">The view depth down that the section view should cover.</param>
            <param name="viewAttributes">The attributes for the section view to be created.</param>
            <param name="sectionMarkAttributes">The attributes for the section mark to be created.</param>
            <param name="sectionView">
            The created section view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <param name="sectionMark">
            The created section mark is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <returns>True if the section view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateCurvedSectionView(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.SectionMarkBase.SectionMarkAttributes,Tekla.Structures.Drawing.View@,Tekla.Structures.Drawing.CurvedSectionMark@)">
            <summary>
            Generates a new curved section view on the sheet and the associated section mark for the specified view.
            </summary>
            <param name="view">The view in which to place the section mark.</param>
            <param name="startPoint">The starting point of the section mark.</param>
            <param name="middlePoint">The middle point of the section mark.</param>
            <param name="endPoint">The ending point of the section mark.</param>
            <param name="viewInsertionPoint">The point where to create the section view.</param>
            <param name="depthUp">The view depth up that the section view should cover.</param>
            <param name="depthDown">The view depth down that the section view should cover.</param>
            <param name="viewAttributes">The attributes for the section view to be created.</param>
            <param name="sectionMarkAttributes">The attributes for the section mark to be created.</param>
            <param name="curvedSectionView">
            The created section view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <param name="sectionMark">
            The created section mark is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <returns>True if the section view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateDetailView(Tekla.Structures.Drawing.View,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.DetailMark.DetailMarkAttributes,Tekla.Structures.Drawing.View@,Tekla.Structures.Drawing.DetailMark@)">
            <summary>
            Generates a new detail view on the sheet and the associated detail mark for the specified view.
            </summary>
            <param name="view">The view in which to place the detail mark.</param>
            <param name="centerPoint">The center point of the detail mark.</param>
            <param name="boundaryPoint">The boundary point of the detail mark.</param>
            <param name="labelPoint">The label point of the detail mark label.</param>
            <param name="viewInsertionPoint">The point where to create the detail view.</param>
            <param name="viewAttributes">The attributes for the detail view to be created.</param>
            <param name="detailMarkAttributes">The attributes for the detail mark to be created.</param>
            <param name="detailView">
            The created detail view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <param name="detailMark">
            The created detail mark is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <returns>True if the detail view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateFrontView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new front view on the sheet of the given drawing.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateTopView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new top view on the sheet of the given drawing.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateBackView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new back view on the sheet of the given drawing.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.CreateBottomView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new bottom view on the sheet of the given drawing.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.Create3dView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new 3d view on the sheet of the given drawing.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.Create3dView(Tekla.Structures.Drawing.Drawing,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.AABB,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Drawing.View.ViewAttributes,Tekla.Structures.Drawing.View@)">
            <summary>
            Generates a new 3d view on the sheet of the given drawing using given view plane and display plane.
            </summary>
            <param name="drawing">The drawing in which to create the view.</param>
            <param name="viewPlane">The view plane.</param>
            <param name="displayPlane">The display plane of the view.</param>
            <param name="viewExtrema">The restriction box of the view.</param>
            <param name="viewInsertionPoint">The center point of the view.</param>
            <param name="viewAttributes">The attributes for the view to be created.</param>
            <param name="view">
            The created view is returned if the creation was successful. Otherwise, null is returned.
            </param>
            <exception cref="T:Tekla.Structures.Drawing.InvalidTypeException">Thrown if given drawing is GA drawing.</exception>
            <exception cref="T:Tekla.Structures.Drawing.TeklaStructuresDrawingsApplicationException">Thrown if an unknown error occurrs.</exception>
            <returns>True if the view was created successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.RotateViewOnAxisX(System.Double)">
            <summary>
            Rotate the view on the X axis.
            </summary>
            <param name="rotationAngle">The amount of degrees to rotate the view with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.RotateViewOnAxisY(System.Double)">
            <summary>
            Rotate the view on the Y axis.
            </summary>
            <param name="rotationAngle">The amount of degrees to rotate the view with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.RotateViewOnAxisZ(System.Double)">
            <summary>
            Rotate the view on the Z axis.
            </summary>
            <param name="rotationAngle">The amount of degrees to rotate the view with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.RotateViewOnDrawingPlane(System.Double)">
            <summary>
            Rotate the view on the drawings plane.
            This works just like the user interface command "Rotate view".
            </summary>
            <param name="rotationAngle">The amount of degrees to rotate the view with.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.AddObjectsToViewAndModify(System.Collections.Generic.List{Tekla.Structures.Identifier})">
            <summary>
            Add objects to the view in GA drawing if view is created with object list
            the view is modified by the method
            </summary>
            <param name="objects">Objects to be added to view</param>
            <returns>true is successful, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.VerticalLabelPosition">
            <summary>
            The vertical label position types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.VerticalLabelPosition.Top">
            <summary>
            The label is located on the top of the view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.VerticalLabelPosition.Bottom">
            <summary>
            The label is located on the bottom of the view.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.HorizontalLabelPosition">
            <summary>
            The horizontal label position types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.CenteredByViewFrame">
            <summary>
            The label is centered by the view frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.CenteredByViewRestrictionBox">
            <summary>
            The label is centered by the view restriction box.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.LeftAlignedByViewFrame">
            <summary>
            The label is left aligned by the view frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.RightAlignedByViewFrame">
            <summary>
            The label is right aligned by the view frame.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.LeftAlignByViewRestrictionBox">
            <summary>
            The label is left aligned by the view restriction box.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.HorizontalLabelPosition.RightAlignByViewRestrictionBox">
            <summary>
            The label is right aligned by the view restriction box.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.LabelLineLengthType">
            <summary>
            The label line length types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.LabelLineLengthType.Minimal">
            <summary>
            The label is of minimal possible length according to the label text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.LabelLineLengthType.Custom">
            <summary>
            The label is of custom length.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ShorteningCutPartType">
            <summary>
            The vertical label position types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ShorteningCutPartType.BothDirections">
            <summary>
            The shortening is done to both x and y directions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ShorteningCutPartType.X_Direction">
            <summary>
            The shortening is done only to x direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ShorteningCutPartType.Y_Direction">
            <summary>
            The shortening is done only to y direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewAttributes">
            <summary>
            The ViewAttributes class contains the attributes for the view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.PartialProfileLength">
            <summary>
            Gets or sets the partial profile length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.PartialProfileOffset">
            <summary>
            Gets or sets the partial profile offset
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.ReflectedView">
            <summary>
            Defines whether the view is reflected or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.UnfoldedView">
            <summary>
            Defines whether the view is unfolded or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.UndeformedView">
            <summary>
            Defines whether the view is undeformed or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.ViewExtensionForNeighbourParts">
            <summary>
            The view extension for neighbour parts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.FixedViewPlacing">
            <summary>
            Defines whether the view placing is fixed (true) or free (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.Shortening">
            <summary>
            Gets or sets the shortening attributes for the view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.ShowPartOpeningsOrRecessSymbol">
            <summary>
            Defines whether to show the openings/recess symbol or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.Scale">
            <summary>
            The view scale.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.ViewPlaneDatumPointForElevations">
            <summary>
            Defines whether the datum point for elevations is view plane based (true) or specified (false).
            When set to false, the value of DatumLevel is used.
            When set to true, DatumLevel will be set to 0.0.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewAttributes.LocationByModelOrigin">
            <summary>
            A constant string defining that the view location is calculated by model origin.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Drawing.View.ViewAttributes.LocationByProjectBasePoint">
            <summary>
            A constant string defining that the view location is calculated by project base point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.LocationBy">
            <summary>
            Gets or sets the location by attribute.
            Value is ViewAttributes.LocationByModelOrigin, ViewAttributes.LocationByProjectBasePoint or guid of a Basepoint.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.DatumLevel">
            <summary>
            The specified datum level.
            If ViewPlaneDatumPointForElevations is set to true when DatumLevel is set,
            the value of ViewPlaneDatumPointForElevations will change to false.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.PourView">
            <summary>
            Defines whether the view is pour view or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.MarkSymbolColor">
            <summary>
            The view mark symbol color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.MarkSymbolAttributes">
            <summary>
            The view mark symbol attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.LabelPositionVertical">
            <summary>
            The vertical position of the view label.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.LabelPositionHorizontal">
            <summary>
            The horizontal position of the view label.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewAttributes.TagsAttributes">
            <summary>
            The attributes for view mark tags.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewAttributes.#ctor(System.Boolean)">
            <summary>
            Creates a new default view attributes instance that doesn't load attributes.
            SkipLoading value does make any difference.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewAttributes.#ctor">
            <summary>
            Creates a new view attributes instance that loads standard attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewAttributes.#ctor(System.String)">
            <summary>
            Creates a new view attributes instance that loads the specified attributes.
            </summary>
            <param name="AttributesFile">The name of the attributes file.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewAttributes.LoadAttributes(System.String)">
            <summary>
            Loads the attributes from the attribute file.
            </summary>
            <param name="attributeFile">The attribute file's filename.</param>
            <returns>True if the attributes are loaded correctly. False if the attribute file loading failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewShorteningAttributes">
            <summary>
            The ViewShorteningAttributes class sets the shortening attributes for the view.
            If CutParts is set to true, the other values are applied. If it is false, none of the other values matter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewShorteningAttributes.CutParts">
            <summary>
            Defines whether cut parts are enabled (true) or disabled (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewShorteningAttributes.CutPartType">
            <summary>
            Defines cut part type. Not used if CutParts is false.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewShorteningAttributes.CutSkewParts">
            <summary>
            Defines whether cut skewed parts are enabled (true) or disabled (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewShorteningAttributes.MinimumLength">
            <summary>
            The minimum cut part length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewShorteningAttributes.Offset">
            <summary>
            The space between the cut parts.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewShorteningAttributes.#ctor">
            <summary>
            Creates a new default view shortening attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewShorteningAttributes.#ctor(System.Boolean,System.Boolean,System.Double,System.Double,Tekla.Structures.Drawing.View.ShorteningCutPartType)">
            <summary>
            Creates a new view shortening attributes instance with the given parameters.
            </summary>
            <param name="CutParts">A value indicating whether cut parts are enabled.</param>
            <param name="CutSkewParts">A value indicating whether cut skewed parts are enabled.</param>
            <param name="MinimumLength">The minimum cut part length.</param>
            <param name="Offset">The space between the cut parts.</param>
            <param name="CutPartType">The optional cut part direction type.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewShorteningAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes">
            <summary>
            The ViewMarkSymbolAttributes class contains symbol attributes for view mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes.LineLengthType">
            <summary>
            The label line length type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes.LineLength">
            <summary>
            The label line length in the case of custom length.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes.#ctor">
            <summary>
            Creates a new mark symbol attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes.#ctor(System.Double,Tekla.Structures.Drawing.MarkSymbolShape,Tekla.Structures.Drawing.View.LabelLineLengthType,System.Double)">
            <summary>
            Creates a new mark symbol attributes instance with the given size, shape, line length type and line length.
            </summary>
            <param name="size">The size of the mark symbol to be used.</param>
            <param name="shape">The shape of the mark symbol to be used.</param>
            <param name="lineLengthType">The line length type of the mark symbol to be used.</param>
            <param name="lineLength">The line length of the mark symbol to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkSymbolAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewMarkTagAttributes">
            <summary>
            The ViewMarkTagAttributes class contains attributes for view mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagAttributes.TagAlignment">
            <summary>
            The tag text alignment.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagAttributes.#ctor">
            <summary>
            Creates a new mark tag attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagAttributes.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Drawing.TagLocation,Tekla.Structures.Drawing.TextAlignment,Tekla.Structures.Drawing.ContainerElement)">
            <summary>
            Creates a new mark tag attributes instance with the given offset, location, alignment and content.
            </summary>
            <param name="offset">The offset of the mark tag to be used.</param>
            <param name="location">The location of the mark tag to be used.</param>
            <param name="alignment">The alignment of the mark tag text to be used.</param>
            <param name="tagContent">The content of the mark tag to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes">
            <summary>
            The ViewMarkTagsAttributes class contains attributes for view mark tags.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.TagA1">
            <summary>
            The tag A1 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.TagA2">
            <summary>
            The tag A2 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.TagA3">
            <summary>
            The tag A3 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.TagA4">
            <summary>
            The tag A4 of a mark.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.TagA5">
            <summary>
            The tag A5 of a mark.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.#ctor">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.#ctor(Tekla.Structures.Drawing.View.ViewMarkTagAttributes,Tekla.Structures.Drawing.View.ViewMarkTagAttributes,Tekla.Structures.Drawing.View.ViewMarkTagAttributes,Tekla.Structures.Drawing.View.ViewMarkTagAttributes,Tekla.Structures.Drawing.View.ViewMarkTagAttributes)">
            <summary>
            Creates a new mark tags attributes instance.
            </summary>
            <param name="tagA1">The tag at place A1.</param>
            <param name="tagA2">The tag at place A2.</param>
            <param name="tagA3">The tag at place A3.</param>
            <param name="tagA4">The tag at place A4.</param>
            <param name="tagA5">The tag at place A5.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.View.ViewMarkTagsAttributes.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.Drawing.RadiusDimension">
            <summary>
            The RadiusDimension class defines a radius dimension that displays the radius of the given arc.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingHandler MyDrawingHandler = new DrawingHandler();
                       ViewBase _view = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews().Current as ViewBase;
            
                       RadiusDimension basicDimension = new RadiusDimension(_view,
                           new Point(-1000, 0, 0),
                           new Point(0, 1000, 0),
                           new Point(1000, 0, 0),
                           200);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Drawing.RadiusDimension.Attributes">
            <summary>
            The radius dimension attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RadiusDimension.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RadiusDimension.ArcPoint1">
            <summary>
            Gets the first arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RadiusDimension.ArcPoint2">
            <summary>
            Gets the second arc point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Drawing.RadiusDimension.ArcPoint3">
            <summary>
            Gets the third arc point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new radius dimension instance using three points and the distance.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="Distance">The distance to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.#ctor(Tekla.Structures.Drawing.ViewBase,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Drawing.RadiusDimensionAttributes)">
            <summary>
            Creates a new radius dimension instance with the attributes, three points and the distance.
            </summary>
            <param name="View">The view to be used.</param>
            <param name="ArcPoint1">The first arc point to be used.</param>
            <param name="ArcPoint2">The second arc point to be used.</param>
            <param name="ArcPoint3">The third arc point to be used.</param>
            <param name="Distance">The distance to be used.</param>
            <param name="Attributes">The attributes to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.GetDimensionSet">
            <summary>
            Radius dimensions don't have dimension sets.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.GetDimensionSet(System.Boolean)">
            <summary>
            Radius dimensions don't have dimension sets.
            </summary>
            <param name="Select">Whether to select the object from the database or not.</param>
            <returns>An exception.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown always.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.QueryOperation(Tekla.Structures.DrawingInternal.QueryTypeEnum)">
            <summary>
            Communicates with Tekla Structures core.
            </summary>
            <param name="OperationType">The type of the executed operation.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.Insert">
            <summary>
            Inserts the dimension into the database.
            </summary>
            <returns>True if the insertion succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.Select">
            <summary>
            Selects the radius dimension from the database.
            </summary>
            <returns>True if the selection succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.Modify">
            <summary>
            Modifies the existing dimension in the database.
            </summary>
            <returns>True if the updating succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.RadiusDimension.Delete">
            <summary>
            Deletes the dimension from the database.
            </summary>
            <returns>True if the deletion succeeds.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.PrintDrawingOperation(Tekla.Structures.Drawing.DrawingHandler,System.Collections.Generic.IEnumerable{Tekla.Structures.Drawing.Drawing},System.Collections.Generic.IEnumerable{Tekla.Structures.Drawing.DPMPrinterAttributes},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The print drawing operation using the DPMPrinterAttributes and
            corresponding external printing functionality. If the given drawing
            is not the active drawing, it will set it to be active but hidden,
            and will then close it.
            </summary>
            <param name="drawingHandler">The drawing handler.</param>
            <param name="drawings">The drawings.</param>
            <param name="printerAttributesList">The printer attributes list.</param>
            <param name="fileNames">Optional output file names for PDF printing. Overrides attributes output file name.</param>
            <exception cref="T:System.ArgumentNullException">Throws if any arguments are null.</exception>
            <exception cref="T:System.ArgumentException">Throws if drawings, printerAttributesList and fileNames are not equal length.</exception>
            <exception cref="T:System.ArgumentException">Throws if drawings or printerAttributesList contain null values.</exception>
            <returns>A list of the result of each drawing, true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.PrintActiveDrawingOperation(Tekla.Structures.Drawing.DPMPrinterAttributes,System.String)">
            <summary>
            The print drawing operation using the DPMPrinterAttributes and corresponding external printing
            functionality. Prints the currently active drawing.
            </summary>
            <param name="printerAttributes">The printer attributes.</param>
            <param name="fileName">Optional output file name for PDF printing. Overrides attributes output file name.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.CheckArgumentsAreNotNull(System.Tuple{System.Object,System.String}[])">
            <summary>
            Check if any arguments are null.
            </summary>
            <param name="arguments">The arguments as a tuple of the argument value and the argument name.</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException on the first argument value that is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetCommandlineArguments(Tekla.Structures.Drawing.DPMPrinterAttributes,System.String)">
            <summary>
            Creates the command line arguments from the given printerAttributes.
            </summary>
            <param name="printerAttributes">The printer attributes.</param>
            <param name="fileName">Optional output file name for PDF printing. Overrides attributes output file name.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetPrinter(Tekla.Structures.Drawing.DotPrintOutputType,System.String)">
            <summary>
            Creates a string based on the given input enum.
            </summary>
            <param name="outputType">The outputType enum.</param>
            <param name="printerName">The printer name.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetPaperSize(Tekla.Structures.Drawing.DotPrintPaperSize)">
            <summary>
            Creates a string based on the given input enum.
            </summary>
            <param name="paperSize">The paperSize enum.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetScalingMethod(Tekla.Structures.Drawing.DotPrintScalingType)">
            <summary>
            Creates a string based on the given input enum.
            </summary>
            <param name="scalingMethod">The outputType enum.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetScaleFactor(Tekla.Structures.Drawing.DotPrintScalingType,System.Double)">
            <summary>
            Creates a string based on the given input enum.
            </summary>
            <param name="scalingMethod">The outputType enum.</param>
            <param name="scaleFactor">The scale factor.</param>
        </member>
        <member name="M:Tekla.Structures.Drawing.PrintHandler.GetOrientation(Tekla.Structures.Drawing.DotPrintOrientationType)">
            <summary>
            Creates a string based on the given input enum.
            </summary>
            <param name="orientationType">The outputType enum.</param>
        </member>
        <member name="T:Tekla.Structures.Drawing.SymbolLibrary">
            <summary>
            The SymbolLibrary class is for handling symbol libraries.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolLibrary.GetSymbolLibraries">
            <summary>
            Gets the names of the available symbol files in the current Tekla Structures
            environment, in the "symbols" directory, without the suffix.
            </summary>
            <returns>A list of symbol file names or null if failed.</returns>
        </member>
        <member name="M:Tekla.Structures.Drawing.SymbolLibrary.GetSymbolLibraries(System.Boolean)">
            <summary>
            Gets the names of the available symbol files in the current Tekla Structures
            environment, in the "symbols" directory, without the suffix.
            </summary>
            <param name="forceRefresh">If set to true, always lists the files again (slower).</param>
            <returns>A list of symbol file names or null if failed.</returns>
        </member>
        <member name="T:dotClientData_t">
            <exclude/>
        </member>
        <member name="F:dotClientData_t.MessageExecutionMode">
            <exclude/>
        </member>
    </members>
</doc>
