<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Structures.Catalogs</name>
    </assembly>
    <members>
        <member name="T:Tekla.Structures.Catalogs.BoltItem">
            <summary>
            The BoltItem class contains information about the bolts in the Tekla Structures bolt catalog. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum">
            <summary>
            Defines the different bolt item types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum.BOLT_UNKNOWN">
            <summary>
            The unknown bolt item type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum.BOLT">
            <summary>
            The bolt type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum.STUD">
            <summary>
            The stud type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItem.#ctor">
            <summary>
            Creates a new bolt item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItem.Standard">
            <summary>
            The bolt item's grade.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItem.Type">
            <summary>
            The bolt item's type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItem.Size">
            <summary>
            The bolt item's size.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItem.Lengths">
            <summary>
            The bolt item's length values.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItem.ExportBoltStandard(System.String@)">
            <summary>
            Exports the bolt item standard + needed bolt catalog items in *.bass-format to the to given file name. 
            If path is not given bolt standard + items are exported to model folder. 
            If filename is empty bolt standard name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       CatalogHandler catalogHandler = new CatalogHandler();
            
                       if (catalogHandler.GetConnectionStatus())
                       {
                           BoltItemEnumerator boltItemEnumerator = CatalogHandler.GetBoltItems();
            
                           while (boltItemEnumerator.MoveNext())
                           {
                               BoltItem boltItem = boltItemEnumerator.Current as BoltItem;
            
                               if (boltItem.Standard == "A325N")
                               {
                                   boltItem.ExportBoltStandard(System.IO.Path.GetTempPath() + "\\" + boltItem.Standard);
                                   Result = true;
                                   break;
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the bolt assembly.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.BoltItemEnumerator">
            <summary>
            The BoltItemEnumerator class allows to loop through the bolt catalog items.
            </summary>
            <example>
            The following example returns true if an item with the standard A325N has been found:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public bool Example1()
                   {
                       bool Result = false;
            
                       CatalogHandler CatalogHandler = new CatalogHandler();
            
                       if (CatalogHandler.GetConnectionStatus())
                       {
                           BoltItemEnumerator BoltItemEnumerator = CatalogHandler.GetBoltItems();
            
                           while (BoltItemEnumerator.MoveNext())
                           {
                               BoltItem BoltItem = BoltItemEnumerator.Current as BoltItem;
            
                               if (BoltItem.Standard == "A325N")
                               {
                                   Result = true;
                                   break;
                               }
                           }
                       }
            
                       return Result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItemEnumerator.#ctor">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type BoltItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltItemEnumerator.Current">
            <summary>
            Returns a bolt item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.BoltItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.BoltName">
            <summary>
            The BoltName class contains the name of the bolt item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.BoltName.Name">
            <summary>
            The bolt item name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.CatalogObjectTypeEnum">
            <summary>The catalog object type.</summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.PART">
            <summary>
            The part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_BEAM">
            <summary>
            The steel beam type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_COLUMN">
            <summary>
            The steel column type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_ORTHOGONAL_BEAM">
            <summary>
            The steel orthogonal beam type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_TWIN_PROFILE_BEAM">
            <summary>
            The steel twin profile beam type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_CONTOUR_PLATE">
            <summary>
            The steel contour plate type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_FOLDED_PLATE">
            <summary>
            The steel folded plate type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_BEAM">
            <summary>
            The concrete beam type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_COLUMN">
            <summary>
            The concrete column type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_PAD_FOOTING">
            <summary>
            The concrete pad footing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_STRIP_FOOTING">
            <summary>
            The concrete strip footing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_PANEL">
            <summary>
            The concrete panel type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_SLAB">
            <summary>
            The concrete slab type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.REINFORCING_BAR">
            <summary>
            The reinforcing bar type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.SURFACING">
            <summary>
            The surfacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.WELD">
            <summary>
            The weld type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.BOLT">
            <summary>
            The bolt type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_ASSEMBLY">
            <summary>
            The steel assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.PRECAST_CONCRETE_ASSEMBLY">
            <summary>
            The precast concrete assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.INSITU_CONCRETE_ASSEMBLY">
            <summary>
            The in situ concrete assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.POUR_OBJECT">
            <summary>
            The pour object type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.POUR_BREAK">
            <summary>
            The pour break type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.GRID">
            <summary>
            The grid type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.PROJECT">
            <summary>
            The project type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.PHASE">
            <summary>
            The phase type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.TASK">
            <summary>
            The task type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.REFERENCE_MODEL">
            <summary>
            The reference model type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.REFERENCE_MODEL_OBJECT">
            <summary>
            The reference model object type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.SINGLE_PART_DRAWING">
            <summary>
            The single part drawing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.ASSEMBLY_DRAWING">
            <summary>
            The assembly drawing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.GA_DRAWING">
            <summary>
            The general arrangement drawing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.MULTI_DRAWING">
            <summary>
            The multidrawing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CAST_UNIT_DRAWING">
            <summary>
            The cast unit drawing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.BENT_PLATE">
            <summary>
            The bent plate type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_BREP_PART">
            <summary>
            The steel brep part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_BREP_PART">
            <summary>
            The concrete brep part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CHAMFER_OBJECT">
            <summary>
            The chanfer object type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.SURFACE_OBJECT">
            <summary>
            The surface object type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.GRID_PLANE">
            <summary>
            The grid plane type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_SPIRAL_BEAM">
            <summary>
            The steel helix part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_SPIRAL_BEAM">
            <summary>
            The concrete helix part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.POUR_UNIT">
            <summary>
            The pour unit type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.STEEL_LOFTED_PLATE">
            <summary>
            The steel lofted plate part type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CatalogObjectTypeEnum.CONCRETE_LOFTED_SLAB">
            <summary>
            The concrete lofted slab part type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.CatalogHandler">
            <summary>
            The CatalogHandler class is a class from which the user can query catalog instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.#ctor">
            <summary>
            Creates a new catalog handler instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetConnectionStatus">
            <summary>
            Returns true if a proper connection to the Tekla Structures process has been established.
            Currently, there's no way to re-establish the connection.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetProfileItems">
            <summary>
            Returns an enumerator of all profile items.
            </summary>
            <returns>A ProfileItemEnumerator of all profile items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetLibraryProfileItems">
            <summary>
            Returns an enumerator of library profile items.
            </summary>
            <returns>A ProfileItemEnumerator of library profile items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetParametricProfileItems">
            <summary>
            Returns an enumerator of parametric profile items.
            </summary>
            <returns>A ProfileItemEnumerator of parametric profile items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetRebarItems">
            <summary>
            Returns an enumerator of rebar items.
            </summary>
            <returns>A RebarItemEnumerator of rebar items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetMeshItems">
            <summary>
            Returns an enumerator of mesh items.
            </summary>
            <returns>A MeshItemEnumerator of mesh items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetBoltItems">
            <summary>
            Returns an enumerator of all bolt items.
            </summary>
            <returns>A BoltItemEnumerator of all bolt items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetShapeItems">
            <summary>
            Returns an enumerator of all shape items.
            </summary>
            <returns>A ShapeItemEnumerator of all shape items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetMaterialItems">
            <summary>
            Returns an enumerator of all material items.
            </summary>
            <returns>A MaterialItemEnumerator of all material items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetMaterialMarketSizes">
            <summary>
            Returns an enumerator of all material marketsizes.
            Data is read from XS_PROFDB\marketsizes.dat file.
            </summary>
            <exception cref="T:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException">Thrown when initialization of MaterialMarketSizesItemEnumerator fails.</exception>
            <returns>A MaterialMarketSizesItemEnumerator of all material marketsizes.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetPrinterItems">
            <summary>
            Returns an enumerator of all printer items.
            </summary>
            <returns>A PrinterItemEnumerator of all printer items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetComponentItems">
            <summary>
            Returns an enumerator of all component items.
            </summary>
            <returns>A ComponentItemEnumerator of all component items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetUserPropertyItems">
            <summary>
            Returns an enumerator of all user property items.
            </summary>
            <returns>A UserPropertyItemEnumerator of all user property items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetUserPropertyItems(Tekla.Structures.Catalogs.CatalogObjectTypeEnum)">
            <summary>
            Returns an enumerator of user property items of the given object type.
            </summary>
            <param name="objectType">The object type to be used.</param>
            <returns>A UserPropertyItemEnumerator of user property items of the given object type.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetDrawingItems">
            <summary>
            Returns an enumerator of all drawing items.
            </summary>
            <returns>A DrawingItemEnumerator of all drawing catalog items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.SaveProfileDatabase">
            <summary>
            Saves the profile database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportLibraryProfileItems(System.String)">
             <summary>
             Imports library profile items (*.lis) from folder to profile catalog.
             Import overrides the existing profiles in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportLibraryProfileItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Library profiles imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportParametricProfileItems(System.String)">
             <summary>
             Imports parametric profile items (*.uel) from folder to profile catalog.
             Import overrides the existing profiles in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportParametricProfileItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Parametric profiles imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportMaterialItems(System.String)">
             <summary>
             Imports material items (*.lis) from folder to material catalog.
             Import overrides the existing materials in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportMaterialItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Materials imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportCustomComponentItems(System.String)">
             <summary>
             Imports custom component items (*.uel) from path to component catalog.
             Import overrides the existing custom components in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportCustomComponentItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Custom components imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import. This can be a uel file or a folder containing one or more uel files.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportRebarItems(System.String)">
             <summary>
             Imports rebar items (*.rexp) from folder to reinforcement catalog.
             Import overrides the existing rebar item in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportRebarItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Rebar items imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportMeshItems(System.String)">
             <summary>
             Imports mesh items (*.mexp) from folder to mesh catalog.
             Import overrides the existing mesh item in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportMeshItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Mesh items imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportBoltItems(System.String)">
             <summary>
             Imports bolt items and their assembly information (*.bass) from folder to bolt assembly catalog and bolt catalog.
             Import overrides the existing bolts in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportBoltItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Bolts and bolt assemblies imported successfully to catalog.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportDrawingItems(System.String)">
             <summary>
             Imports drawing setting items (*.tsds) from specified folder to model folder.
             Import throws exception if model is not open.
             Import overrides the existing drawing items in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportDrawingItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Drawing settings imported successfully to model.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.ImportShapeItems(System.String)">
             <summary>
             Imports shape geometry items (*.tsc) from specified folder.
             Import throws exception if model is not open.
             Import overrides the existing shape items in the catalog without any warnings.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (new CatalogHandler().ImportShapeItems(System.IO.Path.GetTempPath()))
                            Console.WriteLine("Shape geometries imported successfully to model.");
                    }
             }
             </code>
             </example>
             <param name="path">The path to be used for import.</param>
             <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogHandler.GetClientId">
            <summary>
            Get unique client id for application.
            Client id must be used with sequential queries, like
            object enumeration.
            </summary>
            <returns>Client id</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException">
            <summary>
            The CatalogItemEnumeratorInitializationException class represents an error that occurred during the catalog item enumerator initialization.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException.#ctor">
            <summary>
            Initializes a default instance of the CatalogItemEnumeratorInitializationException class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException.#ctor(System.String)">
            <summary>
            Initializes an instance of the CatalogItemEnumeratorInitializationException class with the appropriate error message.
            </summary>
            <param name="message">Appropriate error message</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the CatalogItemEnumeratorInitializationException class with the appropriate error message and inner exception.
            </summary>
            <param name="message">Appropriate error message.</param>
            <param name="innerException">Inner exception to indicate more specific reason for the error.</param>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ComponentItem">
            <summary>
            The ComponentItem class contains information about the components in the Tekla Structures catalog.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItem.#ctor">
            <summary>
            Creates a new component item instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum">
            <summary>
            Defines the different component types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.UNKNOWN">
            <summary>
            The unknown component type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.CONNECTION">
            <summary>
            The component type is connection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.COMPONENT">
            <summary>
            The component type is component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.SEAM">
            <summary>
            The component type is seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.DETAIL">
            <summary>
            The component type is detail.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.CUSTOM_PART">
            <summary>
            The component type is custom part object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum.DRAWING_PLUGIN">
            <summary>
            The component type is drawing plugin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItem.UIName">
            <summary>
            The component item's name which is visible in the Tekla Structures user interface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItem.Name">
            <summary>
            The component item's internal name which is used by Tekla Structures in component identification.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItem.Type">
            <summary>
            The component item's type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItem.Number">
            <summary>
            The component item's internal number which is used by Tekla Structures in component identification.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItem.AttributeFileExtension">
            <summary>
            Gets the attribute file extension of item from the component database.
            </summary>
            <returns>File extension on success, empty string if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItem.Select(System.String,System.Int32)">
            <summary>
            Selects the component item from the component database. Uses the type if defined for selection 
            </summary>
            <param name="name">The name of the component item to select.</param>
            <param name="number">The number of the component item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItem.Select(System.String,System.Int32,Tekla.Structures.Catalogs.ComponentItem.ComponentTypeEnum)">
            <summary>
            Selects the component item from the component database.
            </summary>
            <param name="name">The name of the component item to select.</param>
            <param name="number">The number of the component item to select.</param>
            <param name="type">The type of the component item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItem.Export(System.String@)">
            <summary>
            Exports the custom component item in *.uel-format to the to given file name. 
            If path is not given custom component is exported to model folder. 
            If filename is empty custom component name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       ComponentItem item = new ComponentItem();
                       int version = 0;
                       string componentName = "General_Tie";
                       if (item.Select(componentName, -1))
                       {
                           string filename = System.IO.Path.GetTempPath() + "\\" + componentName;
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine("Custom component exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the component item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItem.GetVersion(System.Int32@)">
            <summary>
            Gets the version number of custom component item from the component database.
            </summary>
            <param name="version">The version number of the component item.</param>
            <returns>Version number on success, int.MinValue if not found.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ComponentItemEnumerator">
             <summary>
             The ComponentItemEnumerator class allows to loop through the component catalog items.
             </summary>
             <example>
             The following example returns true if an item with the name EndPlate and with the number 144 has been found:
             <code>
             using Tekla.Structures.Catalogs;
             
             public class Example
             {
                    public bool Example1()
                    {
                        bool Result = false;
             
                        CatalogHandler CatalogHandler = new CatalogHandler();
            
                        if (CatalogHandler.GetConnectionStatus())
                        {
                            ComponentItemEnumerator ComponentItemEnumerator = CatalogHandler.GetComponentItems();
            
                            while (ComponentItemEnumerator.MoveNext())
                            {
                                ComponentItem ComponentItem = ComponentItemEnumerator.Current as ComponentItem;
            
                                if (ComponentItem.Name == "EndPlate" &amp;&amp; ComponentItem.Number == 144)
                                {
                                    Result = true;
                                    break;
                                }
                            }
                        }
             
                        return Result;
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItemEnumerator.#ctor">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type ComponentItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ComponentItemEnumerator.Current">
            <summary>
            Returns a component item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator.
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ComponentItemEnumerator.GetComponentIndex``1(``0,System.Int32,System.Collections.ArrayList,System.Collections.IList)">
            <summary>
            Get component index given key and type.
            </summary>
            <typeparam name="T">The key type.</typeparam>
            <param name="Key">The component key value.</param>
            <param name="Type">The component type.</param>
            <param name="KeyList">An ArrayList of keys to search to determine the index.</param>
            <param name="TypesList">An ArrayList of types associated with the keys.</param>
            <returns>The index of the key in KeyList that matches the associated type in TypesList, or -1 if no match is found.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.DrawingItem">
            <summary>
            The DrawingItem class contains information from the drawings in the master drawing catalog. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItem.#ctor">
            <summary>
            Creates a new drawing item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.DrawingItem.Name">
            <summary>
            The drawing item's name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.DrawingItem.Files">
            <summary>
            The files belonging to drawing item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.DrawingItem.Type">
            <summary>
            The files belonging to drawing item.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItem.Select(System.String)">
            <summary>
            Selects the drawing item in the drawing catalog.
            </summary>
            <param name="Name">The Name of the drawing item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItem.Export(System.String@)">
            <summary>
            Exports the drawing item in the catalog to given file name. 
            If path is not given drawing is exported to model folder. 
            If filename is empty drawing name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       DrawingItem item = new DrawingItem();
                       
                       if (item.Select())
                       {
                           string filename = System.IO.Path.GetTempPath() + item.Name;
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine(item.Name + " exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the drawing item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.DrawingItemEnumerator">
            <summary>
            The DrawingItemEnumerator class allows to loop through the catalog drawing items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItemEnumerator.#ctor">
            <summary>
            Creates a new instance of the DrawingItemEnumerator.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.DrawingItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Current property required by IEnumerator. The returned object
            is always of type DrawingItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.DrawingItemEnumerator.Current">
            <summary>
            Returns a drawing item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.DrawingItemEnumerator.SelectDrawingItem(System.String)">
            <summary>
            Selects a drawing item in the catalog with the given name.
            </summary>
            <param name="Name">The name of the drawing item to select.</param>
            <returns>The first DrawingItem that matches the conditions.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.AttributeConfiguration">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.UNKNOWN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.GA">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.Assembly">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.CastUnit">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.SinglePart">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.Catalogs.AttributeConfiguration.DrawingTypes.Wizard">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialMarketSizesItem">
            <summary>
            The MaterialMarketSizesItem class contains information about the available market sizes for particular material. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialMarketSizesItem.MaterialName">
            <summary>
            Material name
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialMarketSizesItem.MarketSizes">
            <summary>
            Available MarketSizes for the particular material
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItem.#ctor">
            <summary>
            Creates a default MaterialMarketSizesItem instance
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItem.#ctor(System.String,System.Double[])">
            <summary>
            Creates a new MaterialMarketSizesItem instance
            </summary>
            <param name="materialName">Name of the material</param>
            <param name="marketSizes">Available market sizes for the particular material</param>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator">
            <summary>
            The MaterialMarketSizesItemEnumerator class allows to loop through the items defined in XS_PROFDB\marketsizes.dat file.
            </summary>
            <example>
            The following example returns true if an item with the name S235JR has been found and
            there is at least one market size for the item:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public bool Example1()
                   {
                       bool result = false;
            
                       CatalogHandler catalogHandler = new CatalogHandler();
            
                       if (catalogHandler.GetConnectionStatus())
                       {
                           try
                           {
                                MaterialMarketSizesItemEnumerator marketSizesEnumerator = catalogHandler.GetMaterialMarketSizes();
            
                                while (marketSizesEnumerator.MoveNext())
                                {
                                    MaterialMarketSizesItem materialSpecificMarketSizes = marketSizesEnumerator.Current as MaterialMarketSizesItem;
                                        
                                    if (materialSpecificMarketSizes != null)
                                    {
                                       if (materialSpecificMarketSizes.MaterialName == "S235JR")
                                       {
                                           if (materialSpecificMarketSizes.MarketSizes != null)
                                           {
                                               if (materialSpecificMarketSizes.MarketSizes.Length > 0)
                                               {
                                                    result = true;
                                                    break;
                                               }
                                           }
                                       }
                                    }
                                }
                           }
                           catch(CatalogItemEnumeratorInitializationException e)
                           {
                                // Handle the exception here and see the inner exception for more details.     
                           }
                       }
            
                       return result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type MaterialMarketSizesItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.Current">
            <summary>
            Returns a MaterialMarketSizesItem instance with the current index.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when Current item cannot be accessed from the given location.</exception>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.#ctor">
            <summary>
            Creates an instance of MaterialMarketSizesItemEnumerator and initializes it.
            Data is fetched from XS_PROFDB\marketsizes.dat file. 
            </summary>
            <exception cref="T:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException">Thrown when initialization of MaterialMarketSizesItemEnumerator fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.#ctor(System.String)">
            <summary>
            Creates an instance of MaterialMarketSizesItemEnumerator and initializes it.
            Data is fetched from the file located at the given file path (e.g. ...\temp\marketsizes.dat).
            </summary>
            <param name="filePath">File path to marketsizes.dat file. File path should contain the whole path (e.g. ...\temp\marketsizes.dat)</param>
            <exception cref="T:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException">Thrown when initialization of MaterialMarketSizesItemEnumerator fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the MaterialMarketSizesItemEnumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.Reset">
            <summary>
            Resets the MaterialMarketSizesItemEnumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.InitializeMarketSizes(System.String)">
            <summary>
            Method for initializing MaterialMarketSizesItemEnumerator data
            </summary>
            <param name="filePath">File path to marketsizes.dat file. File path should contain the whole path (e.g. ...\temp\marketsizes.dat).
            If the given path is empty, default path (XS_PROFDB\marketsizes.dat) is used.</param>
            <exception cref="T:Tekla.Structures.Catalogs.CatalogItemEnumeratorInitializationException">Thrown when initialization of MaterialMarketSizesItemEnumerator fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialMarketSizesItemEnumerator.FillMarketSizes(System.String[])">
            <summary>
            Method for populating the available MarketSizes according to data content
            </summary>
            <param name="linesFromDataFile">Array of strings representing the lines in marketsizes.dat file</param>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialItem">
            <summary>
            The MaterialItem class contains information about the materials in the Tekla Structures catalog. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum">
            <summary>
            Defines the different material item types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_UNKNOWN">
            <summary>
            The unknown material item type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_STEEL">
            <summary>
            The steel material type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_CONCRETE">
            <summary>
            The concrete material type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_TIMBER">
            <summary>
            The timber material type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_MISC">
            <summary>
            The miscellaneous material type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_REBAR">
            <summary>
            The rebar material type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.MaterialItem.MaterialItemTypeEnum.MATERIAL_REBAR_MESH">
            <summary>
            The rebar mesh material type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.#ctor">
            <summary>
            Creates a new material item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.MaterialName">
            <summary>
            The material item's name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.AliasName1">
            <summary>
            The material item's alias name 1.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.AliasName2">
            <summary>
            The material item's alias name 2.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.AliasName3">
            <summary>
            The material item's alias name 3.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.Type">
            <summary>
            The material item's type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.ProfileDensity">
            <summary>
            The profile density in unit kg/m3.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.PlateDensity">
            <summary>
            The plate density in unit kg/m3.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.ModulusOfElasticity">
            <summary>
            Thte modulus of elasticity in unit N/m2.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.PoissonsRatio">
            <summary>
            The poissons ratio
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.ThermalDilatation">
            <summary>
            The thermal dilatation in unit 1/K.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItem.DesignCode">
            <summary>
            The design code.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.MaterialNameMaxLength">
            <summary>
            Returns the maximum length a material name can be. 
            </summary>
            <returns>The maximum length.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Select(System.String)">
            <summary>
            Selects the material item based on the name from the material database.
            The material name can also be an alias name.
            </summary>
            <param name="materialName">The name or alias name of the material.</param>
            <returns>True on success. False if the material was not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Select">
            <summary>
            Selects the material item from the database based on the material name and alias name
            in this instance.
            </summary>
            <returns>True on success. False if the material was not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Insert">
            <summary>
            Inserts this material item to material database.
            </summary>
            <returns>
            True on success. False if operation failed. Possible reasons: material name is invalid; 
            a material with the same name already exists in database.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Modify">
            <summary>
            Modifies the material in material database that has the same name as this instance.
            </summary>
            <returns>
            True on success. False if operation failed. Possible reasons: 
            a material with the name of this does not exist in database.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Delete">
            <summary>
            Delete this material from material database.
            </summary>
            <returns>
            True on success. False if operation failed. Possible reasons: 
            a material with the name of this does not exist in database.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Export(System.String@)">
            <summary>
            Exports the material item in the material database to given file name. 
            Materials are exported to *.lis format. 
            If path is not given material is exported to model folder. 
            If filename is empty material name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       MaterialItem item = new MaterialItem();
                       
                       if (item.Select("S235JR"))
                       {
                           string filename = System.IO.Path.GetTempPath() + "\\" + "S235JR";
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine("S235JR material exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the material item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItem.Exists">
            <summary>
            Tells whether the database contains a material with the name of this instance. 
            </summary>
            <returns>True if a material with the name exists in database.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialItemEnumerator">
            <summary>
            The MaterialItemEnumerator class allows to loop through the catalog material items.
            </summary>
            <example>
            The following example returns true if an item with the name S235JR has been found:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public bool Example1()
                   {
                       bool Result = false;
            
                       CatalogHandler CatalogHandler = new CatalogHandler();
            
                       if (CatalogHandler.GetConnectionStatus())
                       {
                           MaterialItemEnumerator MaterialItemEnumerator = CatalogHandler.GetMaterialItems();
            
                           while (MaterialItemEnumerator.MoveNext())
                           {
                               MaterialItem MaterialItem = MaterialItemEnumerator.Current as MaterialItem;
            
                               if (MaterialItem.MaterialName == "S235JR")
                               {
                                   Result = true;
                                   break;
                               }
                           }
                       }
            
                       return Result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItemEnumerator.#ctor">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type MaterialItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialItemEnumerator.Current">
            <summary>
            Returns a material item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MaterialItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MaterialName">
            <summary>
            The MaterialName class contains the name of the material item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MaterialName.Name">
            <summary>
            The material item name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.PrinterItem">
            <summary>
            The PrinterItem class contains information about the printers in the Tekla Structures catalog. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.PrinterItem.#ctor">
            <summary>
            Creates a new printer item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItem.Name">
            <summary>
            The printer item's name which Tekla Structures uses 
            to fetch all the item's default properties in the printing process.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItem.Device">
            <summary>
            The actual printer device used in the printing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItem.Extension">
            <summary>
            The printer item's default file extension which is used when printing to a file.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItem.PrintAreaWidth">
            <summary>
            The printer item's print area width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItem.PrintAreaHeigth">
            <summary>
            The printer item's print area height.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.PrinterItemEnumerator">
             <summary>
             The PrinterItemEnumerator class allows to loop through the catalog printer items.
             </summary>
             <example>
             The following example returns true if an item with the name PDFactoryA3 has been found:
             <code>
             using Tekla.Structures.Catalogs;
             
             public class Example
             {
                    public bool Example1()
                    {
                        bool Result = false;
             
                        CatalogHandler CatalogHandler = new CatalogHandler();
            
                        if (CatalogHandler.GetConnectionStatus())
                        {
                            PrinterItemEnumerator PrinterItemEnumerator = CatalogHandler.GetPrinterItems();
            
                            while (PrinterItemEnumerator.MoveNext())
                            {
                                PrinterItem PrinterItem = PrinterItemEnumerator.Current as PrinterItem;
            
                                if (PrinterItem.Name == "PDFactoryA3")
                                {
                                    Result = true;
                                    break;
                                }
                            }
                        }
             
                        return Result;
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.PrinterItemEnumerator.#ctor">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type PrinterItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.PrinterItemEnumerator.Current">
            <summary>
            Returns a printer item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.PrinterItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.PrinterItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.PrinterItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.CrossSection">
            <summary>
            The CrossSection class defines a with cross section points
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                public void Example1()
                {
                    CrossSection section = new CrossSection("HEA100");
                       
                    if (section.Select())
                    {
                        var outerSurface = section.OuterSurface;
                        if(outerSurface != null)
                        {
                            foreach (CrossSectionPoint point in outerSurface)
                            {
                                Console.WriteLine("Point " + string.Format("({0:0.000}, {1:0.000}, {2:0.000})", point.X, point.Y, point.Z));
                                Console.WriteLine("Chamfer type " + point.Chamfer.Type.ToString());
                                Console.WriteLine("Chamfer " + string.Format("({0:0.000}, {1:0.000}, {2:0.000}, {3:0.000})", point.Chamfer.X, point.Chamfer.Y, point.Chamfer.DZ1, point.Chamfer.DZ2));
                            }
                            
                            Console.WriteLine("HEA100 cross section points selected successfully");
                        }
                    }
                }
            }
            </code>
            </example>
            
        </member>
        <member name="F:Tekla.Structures.Catalogs.CrossSection.MAX_CROSS_SECTION_POINTS">
            <summary>
            Max points in outer or inner surface.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.CrossSection.contours">
            <summary>
            The outer and inner contours for the cross section.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.Profile">
            <summary>
            The profile where cross section is asked from
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.Location">
            <summary>
            The location in relation to length, 0.0 referring to start of the profile
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.Length">
            <summary>
            The total length
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.HighAccuracy">
            <summary>
            The contour geometry accuracy.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.OuterSurface">
            <summary>
            Gets the cross section points for outer surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.OuterSurfacePoints">
            <summary>
            Gets the cross section points for outer surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.InnerSurfaces">
            <summary>
            Gets the cross section points for inner surfaces.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSection.InnerSurfacePoints">
            <summary>
            Gets the points for inner surfaces.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.#ctor">
            <summary>
            Creates a new cross section point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.#ctor(Tekla.Structures.Catalogs.ProfileName)">
            <summary>
            Creates a new cross section point instance.
            </summary>
            <param name="Profile">The profile definition.</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.#ctor(System.String)">
            <summary>
            Creates a new cross section point instance.
            </summary>
            <param name="ProfileString">The profile string.</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.#ctor(Tekla.Structures.Catalogs.ProfileItem)">
            <summary>
            Creates a new cross section point instance.
            </summary>
            <param name="Profile">The profile definition.</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.Select(System.Double,System.Double)">
            <summary>
            Selects the cross section from the profile definition.
            </summary>
            <param name="Location">The location from where cross section is fetched.</param>
            <param name="Length">The total length of the profile.</param>
            <returns>True in success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.Select(System.Boolean,System.Double,System.Double)">
            <summary>
            Selects the cross section from the profile definition.
            </summary>
            <param name="HighAccuracy">The geometric accuracy level.</param>
            <param name="Location">The location from where cross section is fetched.</param>
            <param name="Length">The total length of the profile.</param>
            <returns>True in success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.GetOuterContour">
            <summary>
            Gets the outer loop geometry as Polycurve.
            </summary>
            <returns>Polycurve</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.GetInnerContours">
            <summary>
            Gets the inner loop geometries as Polycurve.
            </summary>
            <returns>List<Polycurve></Polycurve></returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.GetPointsFromContour(Tekla.Structures.Model.Contour)">
            <summary>
            Gets the points from contour.
            </summary>
            <param name="c">The c.</param>
            <returns>List&lt;Point&gt;.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.GetCrossSectionPointsFromContour(Tekla.Structures.Model.Contour)">
            <summary>
            Gets the cross section points from contour.
            </summary>
            <param name="c">The c.</param>
            <returns>List&lt;CrossSectionPoint&gt;.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSection.ValidateCrossSection">
            <summary>
            Validates the cross section.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Cross section either not valid or not found. Is selection missing?</exception>
        </member>
        <member name="T:Tekla.Structures.Catalogs.CrossSectionPoint">
            <summary>
            The CrossSectionPoint class defines a point with possible chamfering information
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.CrossSectionPoint.Chamfer">
            <summary>
            The chamfer for the cross section point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSectionPoint.#ctor">
            <summary>
            Creates a new cross section point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.CrossSectionPoint.#ctor(System.Double,System.Double,System.Double,Tekla.Structures.Model.Chamfer)">
            <summary>
            Creates a new cross section point instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.LibraryProfileItem">
            <summary>
            The LibraryProfileItem class contains information from library profiles in
            the catalog. Library profile items can be enumerated using a profile item enumerator.
            </summary>
            <example>
            It is possible to select a library profile item by its name:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       LibraryProfileItem LibraryProfileItem = new LibraryProfileItem();
                       LibraryProfileItem.ProfileName = "HEA300";
                       LibraryProfileItem.Select();
                       //Equivalent code:
                       LibraryProfileItem LibraryProfileItem1 = new LibraryProfileItem();
                       LibraryProfileItem1.Select("HEA300");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Catalogs.LibraryProfileItem.aProfileItemAnalysisParameters">
            <summary>
            An array list with the profile item analysis parameters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.LibraryProfileItem.aProfileItemUserParameters">
            <summary>
            An array list with the profile item user parameters.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.LibraryProfileItem.#ctor">
            <summary>
            Creates a new library profile item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.LibraryProfileItem.ProfileName">
            <summary>
            The profile item name.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.LibraryProfileItem.Select(System.String)">
            <summary>
            Selects the profile item in the profile database using the given name.
            </summary>
            <param name="profileName">The name of the profile to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.LibraryProfileItem.Delete">
            <summary>
            Deletes the profile item in the profile database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.LibraryProfileItem.Modify">
            <summary>
            Modifies the profile item in the profile database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.LibraryProfileItem.Copy(System.String)">
            <summary>
            Copy the library profile item in the profile database to item with new name.
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       LibraryProfileItem item = new LibraryProfileItem();
                       
                       if (item.Select("HEA100"))
                       {
                           string newName = "HEA100C";
                           if (item.Copy(newName))
                           {
                               LibraryProfileItem copy = new LibraryProfileItem();
                               if (copy.Select(newName))
                               {
                                   Console.WriteLine("HEA100 copied successfully to HEA100C");
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="newName">The new name of the copied profile item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ParametricProfileItem">
            <summary>
            The ParametricProfileItem class contains information from parametric profiles in
            the catalog. Parametric profile items can be enumerated using a profile item enumerator.
            </summary>
            <example>
            It is possible to select a parametric profile item by its name:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       ParametricProfileItem ParametricProfileItem = new ParametricProfileItem();
                       ParametricProfileItem.ProfilePrefix = "PHI";
                       ParametricProfileItem.Select();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ParametricProfileItem.#ctor">
            <summary>
            Creates a new parametric profile item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ParametricProfileItem.ProfilePrefix">
            <summary>
            The parametric profile item prefix.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ParametricProfileItem.GetParametricProfilePrefix(System.Int32)">
            <summary>
            Gets the parametric profile item prefix using the given subtype. This can be used
            after retrieving a library profile that has a parametric user-defined type.
            </summary>
            <param name="Subtype">The profile item subtype.</param>
            <returns>The parametric profile item prefix.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ParametricProfileItem.CreateProfileString">
            <summary>
            Gets the parametric profile item prefix and adds parameter values. 
            </summary>
            <returns>The parametric profile string with parameter values in millimeters.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ParametricProfileItem.Select(System.String)">
            <summary>
            Selects the parametric profile item in the profile database using the given name.
            </summary>
            <param name="ProfileName">The name of the profile to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ParametricProfileItem.GetListOfParameters(System.String)">
            <summary>
            Gets the parameters from the ParameterString. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ParametricProfileItem.UseImperialUnits">
            <summary>
            Gets the imperial setting. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItem">
            <summary>
            The ProfileItem abstract class contains the common information of catalog
            profiles (parametric and library).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItem.TypeEnum">
            <summary>
            Whether the profile is parametric profile or library profile.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItem.ParametricProfileDefinitionTypeEnum">
            <summary>
            How parametric profile is defined. Internal value only.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum">
            <summary>
            Defines the different profile item types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.ALL_PROFILES">
            <summary>
            All profiles.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_UNKNOWN">
            <summary>
            The unknown profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_I">
            <summary>
            The I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_L">
            <summary>
            The L profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_Z">
            <summary>
            The Z profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_U">
            <summary>
            The U profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_PL">
            <summary>
            The plate profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_D">
            <summary>
            The circular section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_PD">
            <summary>
            The circular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_P">
            <summary>
            The rectangular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_C">
            <summary>
            The C profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_T">
            <summary>
            The T profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_HK">
            <summary>
            The welded box profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_HQ">
            <summary>
            The HQ profile
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_ZZ">
            <summary>
            The ZZ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_CC">
            <summary>
            The CC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_CW">
            <summary>
            The CW profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_CU">
            <summary>
            The CU profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EB">
            <summary>
            The EB profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_BF">
            <summary>
            The BF profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_SPD">
            <summary>
            The SPD profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EC">
            <summary>
            The EC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_ED">
            <summary>
            The ED profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EE">
            <summary>
            The EE profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EF">
            <summary>
            The EF profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EZ">
            <summary>
            The EZ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_EW">
            <summary>
            The EW profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_POLYGON_PLATE">
            <summary>
            The polygon plate profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_FPL">
            <summary>
            The FPL profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_SP">
            <summary>
            The SP profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_RCDL">
            <summary>
            The RCDL profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_RCXX">
            <summary>
            The RCXX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_RCL">
            <summary>
            The RCL profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_RCDX">
            <summary>
            The RCDX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_RCX">
            <summary>
            The RCX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_USER_DEFINED">
            <summary>
            The user-defined, fixed profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemTypeEnum.PROFILE_USER_PARAMETRIC">
            <summary>
            The user-defined, parametric profile.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum">
            <summary>
            Defines the different profile item subtypes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_UNKNOWN_SUBTYPE">
            <summary>
            The unknown subtype profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_I_HOT_ROLLED">
            <summary>
            The hot rolled I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_I_WELDED_SYMMETRICAL">
            <summary>
            The welded symmetrical I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_I_WELDED_UNSYMMETRICAL">
            <summary>
            The welded unsymmetrical I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_I_WELDED_SYMMETRICAL2">
            <summary>
            The welded symmetrical, altering height, I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_I_WELDED_UNSYMMETRICAL2">
            <summary>
            The welded unsymmetrical, altering height, I profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_L_HOT_ROLLED">
            <summary>
            The hot rolled L profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_L_COLD_ROLLED">
            <summary>
            The cold rolled L profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_Z_COLD_ROLLED">
            <summary>
            The cold rolled Z profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_U_HOT_ROLLED">
            <summary>
            The hot rolled U profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_U_COLD_ROLLED">
            <summary>
            The cold rolled U profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_PL_DEFAULT">
            <summary>
            The default plate profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_D_CIRCULAR">
            <summary>
            The default circular section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_D_ELLIPTICAL">
            <summary>
            The elliptical circular section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_PD_CIRCULAR">
            <summary>
            The default circular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_PD_ELLIPTICAL">
            <summary>
            The elliptical circular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_PD_CIRCULAR_TAPERED">
            <summary>
            The tapered circular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_P_SQUARE">
            <summary>
            The square hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_P_RECTANGULAR">
            <summary>
            The rectangular hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_P_ALTERING_HEIGHT">
            <summary>
            The altering height hollow section profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_C_HOT_ROLLED">
            <summary>
            The hot rolled C profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_C_COLD_ROLLED">
            <summary>
            The cold rolled C profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_T_HOT_ROLLED">
            <summary>
            The hot rolled T profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_T_PARAMETRIC">
            <summary>
            The parametric T profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_HK_SYMMETRICAL">
            <summary>
            The symmetrical welded box profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_HK_UNSYMMETRICAL">
            <summary>
            The unsymmetrical welded box profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_HQ_CENTERED">
            <summary>
            The centered HQ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_HQ_NOT_CENTERED">
            <summary>
            The not centered HQ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_ZZ_SYMMETRICAL">
            <summary>
            The symmetrical ZZ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_ZZ_NOT_SYMMETRICAL">
            <summary>
            The unsymmetrical ZZ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CC_SYMMETRICAL">
            <summary>
            The symmetrical CC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CC_NOT_SYMMETRICAL">
            <summary>
            The unsymmetrical CC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CW_SYMMETRICAL">
            <summary>
            The symmetrical CW profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CW_UNSYMMETRICAL">
            <summary>
            The unsymmetrical CW profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CU_SYMMETRICAL">
            <summary>
            The symmetrical CU profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_CU_NOT_SYMMETRICAL">
            <summary>
            The unsymmetrical CU profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EB_SYMMETRICAL">
            <summary>
            The symmetrical EB profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EB_NOT_SYMMETRICAL">
            <summary>
            The unsymmetrical EB profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_BF_DEFAULT">
            <summary>
            The default BF profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_SPD_CIRCULAR">
            <summary>
            The circular SPD profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_SPD_ELLIPTICAL">
            <summary>
            The elliptical SPD profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_SPD_CIRCULAR_TAPERED">
            <summary>
            The tapered circular SPD profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EC_SYMMETRICAL">
            <summary>
            The symmetrical EC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EC_NOT_SYMMETRICAL">
            <summary>
            The unsymmetrical EC profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_ED_DEFAULT">
            <summary>
            The default ED profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EE_DEFAULT">
            <summary>
            The default EE profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EF_DEFAULT">
            <summary>
            The default EF profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EZ_DEFAULT">
            <summary>
            The default EZ profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_EW_DEFAULT">
            <summary>
            The default EW profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCDL_SYMMETRICAL">
            <summary>
            The symmetrical RCDL profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCDL_UNSYMMETRICAL">
            <summary>
            The unsymmetrical RCDL profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCXX_DEFAULT">
            <summary>
            The RCXX default profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCL_DEFAULT">
            <summary>
            The RCL default profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCDX_SYMMETRICAL">
            <summary>
            The symmetrical RCDX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCDX_UNSYMMETRICAL">
            <summary>
            The unsymmetrical RCDX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCDX_UNSYMMETRICAL2">
            <summary>
            The unsymmetrical altered height RCDX profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubTypeEnum.PROFILE_RCX_DEFAULT">
            <summary>
            The RCX default profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem._ProfileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItem._TreePathString">
            <summary>
            For internal usage only!
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.ProfileItemType">
            <summary>
            The profile item type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.ProfileItemSubType">
            <summary>
            The profile item subtype.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.aProfileItemParameters">
            <summary>
            An array list with the profile item parameters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.Type">
            <summary>
            Whether the profile item is library or parametric.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.ParametricProfileDefinitionType">
            <summary>
            The internal parametric profile item definition type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.ParameterString">
            <summary>
            The profile item parameter string.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.NumberOfCrossSections">
            <summary>
            The number of cross sections in the profile item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.IsSketchedUserParametric">
            <summary>
            Whether the profile is a parametric user-defined sketched profile. 
            </summary>
            <returns> True if the profile is a parametric user-defined sketched profile, false otherwise.</returns>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItem.IsMultiCrossSectionUserParametric">
            <summary>
            Whether the profile is a parametric user-defined multi cross section profile. 
            </summary>
            <returns> True if the profile is a parametric user-defined multi cross section profile, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.IsProfileUserParametric">
            <summary>
            Whether the profile is a parametric user-defined profile. If so,
            the prefix can be asked by type and subtype.
            </summary>
            <returns>Whether the profile is a parametric user-defined profile or not.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.IsProfileUserDefined">
            <summary>
            Whether the profile is a fixed user-defined profile.
            </summary>
            <returns>Whether the profile is a fixed user-defined profile or not.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.Select">
            <summary>
            Selects the profile item in the profile database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.ModifyProfileItemParameter(Tekla.Structures.Catalogs.ProfileItemParameter)">
            <summary>
            Modify parameter of library profile item.
            Modify is needed for profile item for updating changes to profile database
            </summary>
            <param name="value">The modified parameter value for the profile item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.ModifyProfileItemAnalysisParameter(Tekla.Structures.Catalogs.ProfileItemParameter)">
            <summary>
            Modify analysis parameter of library profile item.
            Modify is needed for profile item for updating changes to profile database
            </summary>
            <param name="value">The modified parameter value for the profile item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.ModifyProfileItemUserParameter(Tekla.Structures.Catalogs.ProfileItemParameter)">
            <summary>
            Modify user parameter of library profile item.
            Modify is needed for profile item for updating changes to profile database
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.Export(System.String@)">
            <summary>
            Exports the profile item in the profile database to given file name. 
            Currently library profiles, sketch profiles and clb profiles are supported. 
            Library profiles are exported to *.lis format.
            Sketch profiles are exported to *.uel format. 
            Clb profiles are exported to *.clb format. 
            If path is not given profile is exported to model folder. 
            If filename is empty profile name or prefix is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       LibraryProfileItem item = new LibraryProfileItem();
                       
                       if (item.Select("HEA100"))
                       {
                           string filename = System.IO.Path.GetTempPath() + "\\" + "HEA100";
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine("HEA100 exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the profile item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.ExportSameLevelProfilesWithTree(System.String,System.String)">
            <summary>
            Export profile tree based on tree node name.
            </summary>
            <param name="treePathString">The treePathString to be used in export, level separated with '|'</param>
            <param name="fileName">The filename with optional path to be used for export.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.GetCrossSection(System.Double)">
            <summary>
            Returns list of cross section points of inner surfaces from the profile item. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                public void Example1()
                {
                    LibraryProfileItem item = new LibraryProfileItem();
                       
                    if (item.Select("HEA100"))
                    {
                        var section = item.GetCrossSection();
                        if(section != null)
                        {
                            var outerSurface = section.OuterSurface;
                            if(outerSurface != null)
                            {
                                foreach (CrossSectionPoint point in outerSurface)
                                {
                                    Console.WriteLine("Point " + string.Format("({0:0.000}, {1:0.000}, {2:0.000})", point.X, point.Y, point.Z));
                                    Console.WriteLine("Chamfer type " + point.Chamfer.Type.ToString());
                                    Console.WriteLine("Chamfer " + string.Format("({0:0.000}, {1:0.000}, {2:0.000}, {3:0.000})", point.Chamfer.X, point.Chamfer.Y, point.Chamfer.DZ1, point.Chamfer.DZ2));
                                }
            
                                var  outerSurfacePoints = section.OuterSurfacePoints;
                                if (outerSurfacePoints != null)
                                {
                                    foreach (Point p in outerSurfacePoints)
                                    {
                                        Console.WriteLine("Point " + string.Format("({0:0.000}, {1:0.000}, {2:0.000})", p.X, p.Y, p.Z));
                                    }
                                }
                            }
                            
                            Console.WriteLine("HEA100 cross section points selected successfully");
                        }
                    }
                }
            }
            </code>
            </example>
            <param name="RelativeLocation">The relative location of the cross section, values between 0 (start of profile) and 1 (end of profile).</param>
            <returns>List of inner cross section point lists on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItem.GetHighAccuracyCrossSection(System.Double)">
            <summary>
            Get cross section with high accuracy.
            </summary>
            <param name="RelativeLocation">The relative location of the cross section, values between 0 (start of profile) and 1 (end of profile).</param>
            <returns>CrossSection object or null on failure.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItemEnumerator">
            <summary>
            The ProfileItemEnumerator class allows to loop through the catalog profile items.
            </summary>
            <example>
            The following example returns true if a library profile item with the name HEA300 has been found:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                public bool Example1()
                {
                    bool Result = false;
            
                    CatalogHandler CatalogHandler = new CatalogHandler();
            
                    if (CatalogHandler.GetConnectionStatus())
                    {
                        ProfileItemEnumerator ProfileItemEnumerator = CatalogHandler.GetLibraryProfileItems();
            
                        while (ProfileItemEnumerator.MoveNext())
                        {
                            LibraryProfileItem LibraryProfileItem = ProfileItemEnumerator.Current as LibraryProfileItem;
            
                            if (LibraryProfileItem.ProfileName == "HEA300")
                            {
                                Result = true;
                                break;
                            }
                        }
                    }
            
                    return Result;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemEnumerator.SelectInstances">
            <summary>
            Indicates that the instance Select() is called when the 'Current' item is asked from the enumerator.
            The user can set this to 'false' if no members are ever asked from the instance. This is the case
            when, for example, asking only for the available profile names or when only certain profiles need
            to be selected from the model. Without the selection the 'Current' item contains the profile name
            or the prefix and the profile type. Warning: normally the user should not change this value.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItemEnumerator.#ctor(Tekla.Structures.Catalogs.ProfileItemEnumerator.ProfileItemEnumeratorTypeEnum)">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate without treestructure.
            </summary>
            <param name="Type">Profile item type to enumerate</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItemEnumerator.#ctor">
            <summary>
            The default constructor will enumerate all profiles in catalog and fills treestructure.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type ProfileItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemEnumerator.Current">
            <summary>
            Returns a profile item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ProfileItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItemParameter">
            <summary>
            The ProfileItemParameter class contains the information of one profile parameter
            (property name, symbol, unit and unit type). A profile item can contain a maximum
            of 50 profile parameters.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum">
            <summary>
            Defines the different unit types of the profile item parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_BOOLEAN">
            <summary>
            The input boolean.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_INTEGER">
            <summary>
            The input integer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_STRING">
            <summary>
            The input string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_NONE">
            <summary>
            The input none.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_RATIO_UNIT">
            <summary>
            The input ratio unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_STRAIN_UNIT">
            <summary>
            The input strain unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_ANGLE_UNIT">
            <summary>
            The input angle unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_ANGLE_UNIT">
            <summary>
            The output angle unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_SECTION_ANGLE_UNIT">
            <summary>
            The input section angle unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_LENGTH_UNIT">
            <summary>
            The input length unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_LENGTH_UNIT">
            <summary>
            The output length unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DEFORMATION_UNIT">
            <summary>
            The input deformation unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_DEFORMATION_UNIT">
            <summary>
            The output deformation unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DIMENSION_UNIT">
            <summary>
            The input dimension unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_RADIUSOFINERTIA_UNIT">
            <summary>
            The input radius of inertia unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_AREA_UNIT">
            <summary>
            The input area unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_REINFAREA_UNIT">
            <summary>
            The output reinforced area unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_TRANSVREINF_UNIT">
            <summary>
            The output transverse reinforcement unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_AREAPERLENGTH_UNIT">
            <summary>
            The input area per length unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_VOLUME_UNIT">
            <summary>
            The output volume unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_SECTIONMODULUS_UNIT">
            <summary>
            The input section modulus unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_VOLUME_UNIT">
            <summary>
            The input volume unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_MOMENTOFINERTIA_UNIT">
            <summary>
            The input moment of inertia unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_TORSIONCONSTANT_UNIT">
            <summary>
            The input torsion constant unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_WARPINGCONSTANT_UNIT">
            <summary>
            The input warping constant unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_FORCE_UNIT">
            <summary>
            The input force unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_FORCE_UNIT">
            <summary>
            The output force unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_WEIGHT_UNIT">
            <summary>
            The input weight unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_WEIGHT_UNIT">
            <summary>
            The output weight unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DISTRIBLOAD_UNIT">
            <summary>
            The input distributed load unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_DISTRIBLOAD_UNIT">
            <summary>
            The output distributed load unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_SPRINGCONSTANT_UNIT">
            <summary>
            The input spring constant unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_MASSPERLENGTH_UNIT">
            <summary>
            The output mass per length unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_SURFACELOAD_UNIT">
            <summary>
            The input surface load unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_SURFACELOAD_UNIT">
            <summary>
            The output surface load unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_STRENGTH_UNIT">
            <summary>
            The input strength unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_STRESS_UNIT">
            <summary>
            The output stress unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_MODULUS_UNIT">
            <summary>
            The input modulus unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DENSITY_UNIT">
            <summary>
            The input density unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_MOMENT_UNIT">
            <summary>
            The input moment unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_MOMENT_UNIT">
            <summary>
            The output moment unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DISTRIBMOMENT_UNIT">
            <summary>
            The input distributed moment unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_ROTSPRINGCONST_UNIT">
            <summary>
            The input rotation spring constant unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_TEMPERATURE_UNIT">
            <summary>
            The input temperature unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_TEMPERATURE_UNIT">
            <summary>
            The output temperature unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_THERMDILATCOEFF_UNIT">
            <summary>
            The input thermal dilatation coefficient unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_FACTOR_UNIT">
            <summary>
            The input factor unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DATE_UNIT">
            <summary>
            The input date unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DATE_TIME_MIN_UNIT">
            <summary>
            The input date time minutes unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DATE_TIME_SEC_UNIT">
            <summary>
            The input date time seconds unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_LENGTH_FRACTIONAL_IMPERIAL">
            <summary>
            The input length, fractional imperial.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DEFORMATION_FRACTIONAL_IMPERIAL">
            <summary>
            The input deformation, fractional imperial.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_DIMENSION_FRACTIONAL_IMPERIAL">
            <summary>
            The input dimension, fractional imperial.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.INPUT_RADIUSOFINERTIA_FRACTIONAL_IMPERIAL">
            <summary>
            The radius of inertia, fractional imperial.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_LENGTH_FRACTIONAL_IMPERIAL">
            <summary>
            The output length, fractional imperial.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitTypeEnum.OUTPUT_DEFORMATION_FRACTIONAL_IMPERIAL">
            <summary>
            The output deformation, fractional imperial.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.Property">
            <summary>
            The description of the profile item parameter. Corresponds to the 'Property' in the 
            Tekla Structures profile catalog dialog, and the 'Label in dialog box' in the variable
            dialog in the Sketch Editor.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.Value">
            <summary>
            The value of the profile item parameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.StringValue">
            <summary>
            The string value of the profile item parameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.Symbol">
            <summary>
            The symbol of the profile item parameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.ParameterUnitType">
            <summary>
            Defines the parameter unit type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileItemParameter.CrossSectionNumber">
            <summary>
            The number of the cross section the parameter belongs to.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ProfileName">
            <summary>
            The ProfileName class contains the name of the profile item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ProfileName.Name">
            <summary>
            The profile item name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MeshItem">
            <summary>
            The MeshItem class contains information from the meshes in the catalog 
            (mesh_database.inp). 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItem.#ctor">
            <summary>
            Creates a new mesh item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.Grade">
            <summary>
            The mesh item's grade.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.Name">
            <summary>
            The mesh item's name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.DiameterLongitudinal">
            <summary>
            The mesh item's longitudinal direction bar size.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.DistanceLongitudinal">
            <summary>
            The mesh item's longitudinal direction distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.Length">
            <summary>
            The mesh item's length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.MinimumOverlappingLongitudinal">
            <summary>
            The mesh item's longitudinal direction minimum overlapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.MaximumOverlappingLongitudinal">
            <summary>
            The mesh item's longitudinal direction maximum overlapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.LeftOverhangLongitudinal">
            <summary>
            The mesh item's longitudinal direction left overhang.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.RightOverhangLongitudinal">
            <summary>
            The mesh item's longitudinal direction right overhang.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.DiameterCross">
            <summary>
            The mesh item's cross direction bar size.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.DistanceCross">
            <summary>
            The mesh item's cross direction distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.Width">
            <summary>
            The mesh item's width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.MinimumOverlappingCross">
            <summary>
            The mesh item's cross direction minimum overlapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.MaximumOverlappingCross">
            <summary>
            The mesh item's cross direction maximum overlapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.LeftOverhangCross">
            <summary>
            The mesh item's cross direction left overhang.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItem.RightOverhangCross">
            <summary>
            The mesh item's cross direction right overhang.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItem.Select(System.String,System.String)">
            <summary>
            Selects the mesh item in the mesh database.
            </summary>
            <param name="MeshName">The name of the mesh item to select.</param>
            <param name="MeshGrade">The grade of the mesh item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItem.Export(System.String@)">
            <summary>
            Exports the rebar item in the catlog to given file name. 
            If path is not given rebar is exported to model folder. 
            If filename is empty rebar name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       RebarItem item = new RebarItem();
                       
                       if (item.Select("A500HW", "10", RebarItem.MAIN_USAGE))
                       {
                           string filename = System.IO.Path.GetTempPath() + "\\" + "A500HW_10_MAIN";
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine("A500HW exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.MeshItemEnumerator">
            <summary>
            The MeshItemEnumerator class allows to loop through the catalog mesh items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItemEnumerator.#ctor">
            <summary>
            Creates a new instance of the MeshItemEnumerator.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the CurrenFt property required by IEnumerator. The returned object
            is always of type MeshItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.MeshItemEnumerator.Current">
            <summary>
            Returns a mesh item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.MeshItemEnumerator.SelectMeshItem(System.String,System.String)">
            <summary>
            Selects a mesh item in the mesh database with the given name and grade.
            </summary>
            <param name="Name">The name of the mesh item to select.</param>
            <param name="Grade">The grade of the mesh item to select.</param>
            <returns>The first MeshItem that matches the conditions.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.Parser">
            <summary>
            Class to parse the inp file containing the rebars
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.Parser.RebarItemPropertyNames">
            <summary>
            The rebar item property names.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.Parser.HeaderLineType">
            <summary>
            The header line type enum.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.Parse(System.String,Tekla.Structures.CatalogInternal.RebarItemEnumerator_t@)">
            <summary>
               Parses specified file to get rebars from the catalog file.
            </summary>
            <param name="FilePath"> File to parse. </param>
            <param name="RebarList"> RebarItemEnumerator_t. </param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.Parse(System.String,Tekla.Structures.CatalogInternal.MeshItemEnumerator_t@)">
            <summary>
               Parses specified file to get meshes from the catalog file.
            </summary>
            <param name="FilePath"> File to parse. </param>
            <param name="MeshList"> MeshItemEnumerator_t. </param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.GetCatalogPath(System.String)">
            <summary>
            Gets the path for a certain catalog file.
            </summary>
            <param name="FileName">File name for the catalog to find</param>
            <returns>The paths where the catalog file is located.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.CheckIfHeaderLineAndTrimTags(System.String@)">
            <summary>
            Determines whether the line is a header line.
            </summary>
            <param name="line">The line.</param>
            <returns>The line type if the line is a header line; otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.LineToArrayOfStrings(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Splits a string using space as a separator. Everything between quotes 
            is considered to be a one string.
            </summary>
            <param name="Line">The line to split.</param>
            <param name="Parameters">The list of obtained substrings.</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.Parser.GetRebarItemFromLine(System.String)">
            <summary>
            Returns the Rebar item from the given line.
            </summary>
            <param name="Line">Line from rebar db file</param>
            <returns>RebarItem.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.RebarHeaderItem">
            <summary>
            The RebarHeaderItem class represents an item in the header of the rebar catalog
            (rebar_database.inp).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarHeaderItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Catalogs.RebarHeaderItem"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarHeaderItem.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarHeaderItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarHeaderItem.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarHeaderItem.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.RebarItem">
            <summary>
            The RebarItem class contains information from the rebars in the catalog 
            (rebar_database.inp). 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.#ctor">
            <summary>
            Creates a new rebar item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.Grade">
            <summary>
            The rebar item's grade.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.Size">
            <summary>
            The rebar item's size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.MAIN_USAGE">
            <summary>
            The main usage string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.TIE_STIRRUP_USAGE">
            <summary>
            The tie/stirrup usage string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.DIAGONAL_RATIO_STRING">
            <summary>
            The diagonal ratio string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.DIAGONAL_DISTANCE_STRING">
            <summary>
            The diagonal distance string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.HORIZONTAL_RATIO_STRING">
            <summary>
            The horizontal ratio string.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.RebarItem.HORIZONTAL_DISTANCE_STRING">
            <summary>
            The horizontal distance string.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.Usage">
            <summary>
            The rebar item's usage.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.BendRadius">
            <summary>
            The rebar item's bending radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.Code">
            <summary>
            The rebar item's code.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.NominalDiameter">
            <summary>
            The rebar item's nominal diameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.ActualDiameter">
            <summary>
            The rebar item's actual diameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.WeightPerLenght">
            <summary>
            The rebar item's weight per lenght.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.CrossSectionArea">
            <summary>
            The rebar item's cross section area.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookRadius90Degrees">
            <summary>
            The rebar item's hook radius for 90 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookLength90Degrees">
            <summary>
            The rebar item's hook length for 90 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookRadius135Degrees">
            <summary>
            The rebar item's hook radius for 135 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookLength135Degrees">
            <summary>
            The rebar item's hook length for 135 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookRadius180Degrees">
            <summary>
            The rebar item's hook radius for 180 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.HookLength180Degrees">
            <summary>
            The rebar item's hook length for 180 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.LapLength">
            <summary>
            Gets or sets the lap length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.CrankStraightLength">
            <summary>
            Gets or sets the crank straight length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.CrankedLengthType">
            <summary>
            Gets or sets the cranked length type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.CrankedLength">
            <summary>
            Gets or sets the cranked length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItem.CrankExtraOffset">
            <summary>
            Gets or sets the crank extra offset.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.String,System.Double)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <param name="BendRadius">The bending radius of the rebar item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Diameter">The diameter of the rebar item to select.</param>
            <param name="BendRadius">The bending radius of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.String,System.String)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <param name="Usage">The usage of the rebar item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Diameter">The diameter of the rebar item to select.</param>
            <param name="Usage">The usage of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.String)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Select(System.String,System.Double,System.Boolean)">
            <summary>
            Selects the rebar item in the rebar database.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="NominalDiameter">The diameter of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Delete">
            <summary>
            Deletes the rebar item from the rebar database.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Insert">
            <summary>
            Inserts the rebar item in the rebar database.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Modify(System.String,System.String,System.String)">
            <summary>
            Modifies the rebar item in the rebar database based on the given parameters.
            </summary>
            <param name="OriginalGrade">Original Grade</param>
            <param name="OriginalSize">Original Size</param>
            <param name="OriginalUsage">Original Usage</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItem.Export(System.String@)">
            <summary>
            Exports the rebar item in the catlog to given file name. 
            If path is not given rebar is exported to model folder. 
            If filename is empty rebar name is used as filename. 
            </summary>
            <example>
            <code>
            using System;
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public void Example1()
                   {
                       RebarItem item = new RebarItem();
                       
                       if (item.Select("A500HW", "10", RebarItem.MAIN_USAGE))
                       {
                           string filename = System.IO.Path.GetTempPath() + "\\" + "A500HW_10_MAIN";
                           if (item.Export(ref filename))
                           {
                               Console.WriteLine("A500HW exported successfully");
                           }
                       }
                   }
            }
            </code>
            </example>
            <param name="filename">The export file name of the item.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.RebarItemEnumerator">
            <summary>
            The RebarItemEnumerator class allows to loop through the catalog rebar items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.#ctor">
            <summary>
            Creates a new instance of the RebarItemEnumerator.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Current property required by IEnumerator. The returned object
            is always of type RebarItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItemEnumerator.Current">
            <summary>
            Returns a rebar item instance of the current element.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.RebarItemEnumerator.HeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.String,System.Double)">
            <summary>
            Selects a rebar item in the rebar database with the given grade, size and bending radius.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <param name="BendRadius">The bending radius of the rebar item to select.</param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.String,System.String,System.String)">
            <summary>
            Selects a rebar item in the rebar database with the given grade, size, usage and code.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <param name="Usage">The usage of the rebar item to select.</param>
            <param name="Code">The code of the rebar item to select.</param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.String,System.String)">
            <summary>
            Selects a rebar item in the rebar database with the given grade, size and usage.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <param name="Usage">The usage of the rebar item to select.</param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.String)">
            <summary>
            Selects a rebar item in the rebar database with the given grade and size.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Size">The size of the rebar item to select.</param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Selects a rebar item in the rebar database with the given grade, nominal diameter and bending radius.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Diameter">The diameter of the rebar item to select.</param>
            <param name="BendRadius">The bending radius of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Selects a rebar item in the rebar database with the given grade, nominal diameter and bending radius.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Diameter">The diameter of the rebar item to select.</param>
            <param name="Usage">The usage of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.SelectRebarItem(System.String,System.Double,System.Boolean)">
            <summary>
            Selects a rebar item in the rebar database with the given grade and nominal diameter.
            </summary>
            <param name="Grade">The grade of the rebar item to select.</param>
            <param name="Diameter">The diameter of the rebar item to select.</param>
            <param name="UseNominalDiameter">
            If set to false, the item is selected based on the actual diameter.
            If true, the item is selected based on the nominal diameter.
            </param>
            <returns>The first RebarItem that matches the conditions.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.DeleteRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Delete the RebarItem from the list
            </summary>
            <param name="rebarItem">item to delete</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.ModifyRebarItem(Tekla.Structures.Catalogs.RebarItem,Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Modify the RebarItem in the list
            </summary>
            <param name="rebarItem">item to modify</param>
            <param name="originalRebarItem">original Rebar Item to match</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.InsertRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Insert the RebarItem in to the list
            </summary>
            <param name="rebarItem">Item to insert</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.RebarItemExists(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Check RebarItem is available in database file
            </summary>
            <param name="rebarItem">rebarItem to check with rebar db</param>
            <returns>True on rebar item exist in data base</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.RebarItemEnumerator.GetRebarHeaderItems">
            <summary>
            Gets the header items from the rebar catalog header.
            </summary>
            <returns>The rebar header items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ShapeUpAxis">
            <summary>
            Up axis direction
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ShapeUpAxis.Undefined">
            <summary>
            Undefined direction for axis. Should not be used in input.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ShapeUpAxis.X_Axis">
            <summary>
            X points up.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ShapeUpAxis.Y_Axis">
            <summary>
            Y points up.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ShapeUpAxis.Z_Axis">
            <summary>
            Z points up.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.BrepType">
            <summary>
            Shape catalog renewal makes it possible to organize shapes in the shape catalog compared to a plain list before.
            Thus, it is now possible and required to distinguish shapes in such a manner that:
            BuildingProduct represent shapes that users can import from, for example, Tekla Warehouse and insert them into a model. 
            These are usually provided by the manufacturer and not detailed by users themselves.
            StructuralShape represent shapes that get created by "Convert part to item" or from geometry editing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.BrepType.BuildingProduct">
            <summary>
            Default value if the flag doesn't exist for the shape. It is also assigned in case of shape import.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.BrepType.StructuralShape">
            <summary>
            StructuralShape is assigned in case a shape is created by "Convert part to item", or on shape edit and save.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ShapeItem">
             <summary>
             The Shape class contains information about the shapes in the Tekla Structures shape catalog.
             </summary>
             <example>
             <code>
             public class Example
             {
                 using System;
                 using Tekla.Structures.Catalogs;
                 using Tekla.Structures.Geometry3d;
                 using Tekla.Structures.Model;
            
                 public void CheckAllShapes()
                 {
                     ModelObjectEnumerator moe = new Model().GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BREP);
            
                     while (moe.MoveNext())
                     {
                         Brep myBrep = moe.Current as Brep;
                         if (myBrep == null) continue;
                         ShapeItem myShape = new ShapeItem();
                         myShape.Name = myBrep.Profile.ProfileString;
                         bool result = myShape.Select();
            
                         if (!result)
                         {
                             myShape.ShapeFacetedBrep = CreateBrepCube(1000);
                             myShape.Insert();
                         }
                     }
                 }
            
                 public FacetedBrep CreateBrepCube(double length)
                 {
                     var vertices = new[]
                     {
                             new Vector(0.0,     0.0,    0.0), // 0
                             new Vector(length,  0.0,    0.0), // 1
                             new Vector(length,  length, 0.0), // 2
                             new Vector(0.0,     length, 0.0), // 3
                             new Vector(0.0,     0.0,    length), // 4
                             new Vector(length,  0.0,    length), // 5
                             new Vector(length,  length, length), // 6
                             new Vector(0.0,     length, length), // 7
                         };
                     var outloop = new[] { new[] { 0, 3, 2, 1 },
                                               new[] { 0, 1, 5, 4 },
                                               new[] { 1, 2, 6, 5 },
                                               new[] { 2, 3, 7, 6 },
                                               new[] { 3, 0, 4, 7 },
                                               new[] { 4, 5, 6, 7 }};
            
                     var innerLoop = new Dictionary{int, int[][]}
                     {
                     };
            
                     return new FacetedBrep(vertices, outloop, innerLoop);
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Catalogs.ShapeItem.MaxShapeNameLength">
            <summary>
            Maximum supported length of shape name (must match DOTCAT_SHAPE_NAME_SIZE - 1)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.#ctor">
            <summary>
            Creates a new shape instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.Name">
            <summary>
            The shape Name
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.Guid">
            <summary>
            A unique identifier of the actual shape, given initially by the ShapeCatalog. This GUID is used as the body of
            the filename for the shape information found in the Shape directory
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.GeometryGuid">
            <summary>
            A unique identifier of the shape geometry, given initially by BrepStorage. This GUID is used as the body of
            the filename for the shape geometry information found in the ShapeGeometries directory
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.GeometryHash">
            <summary>
            This obsolete property can still be used to store and externally provided unique hash value identifying
            the shape. However, Tekla Structures does not use this value internally for anything. It is strongly
            recommended to use the newer Fingerprint property for future implementations. That value is automatically
            calculated by Tekla Structures for all inserted shapes and is used internally for shape identification.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.Extrema">
            <summary>
            The extrema of the shape as an axis-aligned bounding box, as opposed to object-aligned
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.IsSolid">
            <summary>
            Set to true if the shape is detected by TS Core to be a valid solid
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.ShapeFacetedBrep">
            <summary>
            The data structure containing the geometric information of the shape as a FacetedBRep
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.UpAxis">
            <summary>
            The direction defining what is understood as "up" in the shape that the API user is providing.
            Typically this is the z-axis, if the data is in global coordinates, coming from a system where Z-axis
            points to global up direction.
            Possible values are: Undefined = 0, X_Axis = 1, Y_Axis = 2, Z_Axis = 3.
            It is highly recommendable to orient shapes in the Tekla Structures native way, that is x-axis on the extrusion line
            and Y-axis pointing up.
            NOTE: Specifying UpAxis to be ShapeUpAxis.Undefined may throw a ‘System.ArgumentOutOfRangeException’ exception
            in certain operations, because the system can not proceed without that information.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.Fingerprint">
            <summary>
            A fingerprint value calculated by Tekla Structures to provide quick comparison of geometries to avoid inserting
            same shape multiple times to the catalog. More rigorous comparison is done only for geometries that result in
            identical fingerprints.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.BrepType">
            <summary>
            Defines BrepType of shapes.
            @see enum BrepType
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItem.HandlePoints">
            <summary>
             Defines handle points of the shape.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Select(System.String)">
            <summary>
            Selects the shape based on the given name from the database.
            </summary>
            <param name="name">The name of the shape.</param>
            <returns>True on success. False if the shape was not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Select">
            <summary>
            Selects the shape from the database based on the name given in this instance.
            </summary>
            <returns>True on success. False if the shape was not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Delete">
            <summary>
            Deletes a shape from shape catalog based on the shape name.
            </summary>
            <returns>
            true on success.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Insert">
             <summary>
             Inserts a shape to the shape catalog based on the shape geometry.
             </summary>
             <returns>
             Return true on success.
             </returns>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void InsertSimpleCube()
                    {
                      var vertices = new[]
                      {
                         new Vector(  0.0,   0.0,   0.0), // 0
                         new Vector(300.0,   0.0,   0.0), // 1
                         new Vector(300.0, 300.0,   0.0), // 2
                         new Vector(  0.0, 300.0,   0.0), // 3
                         new Vector(  0.0,   0.0, 300.0), // 4
                         new Vector(300.0,   0.0, 300.0), // 5
                         new Vector(300.0, 300.0, 300.0), // 6
                         new Vector(  0.0, 300.0, 300.0), // 7
                     };
                     var outloop = new[] { new[] { 0, 3, 2, 1 },
                                   new[] { 0, 1, 5, 4 },
                                   new[] { 1, 2, 6, 5 },
                                   new[] { 2, 3, 7, 6 },
                                   new[] { 3, 0, 4, 7 },
                                   new[] { 4, 5, 6, 7 }};
            
                     var innerLoop = new Dictionary{int, int[][]}
                     {
                     };
            
                     var brep = new FacetedBrep(vertices, outloop, innerLoop);
                     var shapeItem = new ShapeItem
                     {
                         Name = "MyNiceCubeBrep",
                         ShapeFacetedBrep = brep,
                         UpAxis = ShapeUpAxis.Z_Axis
                     };
                     var result = shapeItem.Insert();
                  }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.InsertUsingNormals">
             <summary>
             Inserts a shape to the shape catalog using the shape geometry. Uses vertex normals
             to determine edge visibility. If the normal vectors of the vertices belonging to one
             geometrical location are close enough, the edge will be considered smooth and will be
             marked as hidden.
             </summary>
             <returns>
             Returns true on success.
             </returns>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example()
             {
               /* One edge inside the hole and one on the outer surface of the box will be hidden. */
            
                  var vertices = new[]
                  {
                      /* The main cube vertices. Notice that all vertices are triplicated, because each is
                         present on three different faces. Thus we get three different vertex normals for each physical
                         corner too. */
            
                      new Vector(   0.0,    0.0,    0.0 ), // 0
                      new Vector( 500.0,    0.0,    0.0 ), // 1
                      new Vector( 500.0,  500.0,    0.0 ), // 2
                      new Vector(   0.0,  500.0,    0.0 ), // 3
                      new Vector(   0.0,    0.0,  500.0 ), // 4
                      new Vector( 500.0,    0.0,  500.0 ), // 5
                      new Vector( 500.0,  500.0,  500.0 ), // 6
                      new Vector(   0.0,  500.0,  500.0 ), // 7
            
                      new Vector(   0.0,    0.0,    0.0 ), // 8
                      new Vector( 500.0,    0.0,    0.0 ), // 9
                      new Vector( 500.0,  500.0,    0.0 ), // 10
                      new Vector(   0.0,  500.0,    0.0 ), // 11
                      new Vector(   0.0,    0.0,  500.0 ), // 12
                      new Vector( 500.0,    0.0,  500.0 ), // 13
                      new Vector( 500.0,  500.0,  500.0 ), // 14
                      new Vector(   0.0,  500.0,  500.0 ), // 15
            
                      new Vector(   0.0,    0.0,    0.0 ), // 16
                      new Vector( 500.0,    0.0,    0.0 ), // 17
                      new Vector( 500.0,  500.0,    0.0 ), // 18
                      new Vector(   0.0,  500.0,    0.0 ), // 19
                      new Vector(   0.0,    0.0,  500.0 ), // 20
                      new Vector( 500.0,    0.0,  500.0 ), // 21
                      new Vector( 500.0,  500.0,  500.0 ), // 22
                      new Vector(   0.0,  500.0,  500.0 ), // 23
            
                      /* The hole corner vertices */
            
                      new Vector( 100.0,  100.0,  0.0 ), // 24
                      new Vector( 300.0,  100.0,  0.0 ), // 25
                      new Vector( 300.0,  300.0,  0.0 ), // 26
                      new Vector( 100.0,  300.0,  0.0 ), // 27
            
                      new Vector( 100.0,  100.0, 500.0 ), // 28
                      new Vector( 300.0,  100.0, 500.0 ), // 29
                      new Vector( 300.0,  300.0, 500.0 ), // 30
                      new Vector( 100.0,  300.0, 500.0 ), // 31
            
                      new Vector( 100.0,  100.0,  0.0 ), // 32
                      new Vector( 300.0,  100.0,  0.0 ), // 33
                      new Vector( 300.0,  300.0,  0.0 ), // 34
                      new Vector( 100.0,  300.0,  0.0 ), // 35
            
                      new Vector( 100.0,  100.0, 500.0 ), // 36
                      new Vector( 300.0,  100.0, 500.0 ), // 37
                      new Vector( 300.0,  300.0, 500.0 ), // 38
                      new Vector( 100.0,  300.0, 500.0 ), // 39
                  };
            
                  var outloop = new[]
                  {
                      new[] {  0,   3,   2,   1 },
                      new[] {  8,   9,  13,  12 },
                      new[] { 17,  18,  22,  21 },
                      new[] { 10,  11,  15,  14 },
                      new[] { 19,  16,  20,  23 },
                      new[] {  4,   5,   6,   7 },
            
                      new[] { 31, 28, 24, 27 },
                      new[] { 30, 39, 35, 26 },
                      new[] { 29, 38, 34, 25 },
                      new[] { 36, 37, 33, 32 }
                  };
            
                  var innerLoop = new Dictionary{int, int[][]}
                  {
                      { 0, new[] { new[] {  24, 25, 26, 27 } } },
                      { 5, new[] { new[] {  28, 31, 30, 29 } } },
                  };
            
                  var normals = new Vector[]
                  {
                      // Basic cube vertex normals
            
                      new Vector( 0,  0, -1 ),
                      new Vector( 0,  0, -1 ),
                      new Vector( 0,  0, -1 ),
                      new Vector( 0,  0, -1 ),
            
                      new Vector( 0,  0,  1 ),
                      new Vector( 0,  0,  1 ),
                      new Vector( 0,  0,  1 ),
                      new Vector( 0,  0,  1 ),
            
                      new Vector( 0,  0, -1 ), // CHANGE THIS TO (0, -1, 0) FOR A VISIBLE EDGE
                      new Vector( 0,  0, -1 ), // CHANGE THIS TO (0, -1, 0) FOR A VISIBLE EDGE
                      new Vector( 0,  1,  0 ),
                      new Vector( 0,  1,  0 ),
            
                      new Vector( 0, -1,  0 ),
                      new Vector( 0, -1,  0 ),
                      new Vector( 0,  1,  0 ),
                      new Vector( 0,  1,  0 ),
            
                      new Vector(-1,  0,  0 ),
                      new Vector( 1,  0,  0 ),
                      new Vector( 1,  0,  0 ),
                      new Vector(-1,  0,  0 ),
            
                      new Vector(-1,  0,  0 ),
                      new Vector( 1,  0,  0 ),
                      new Vector( 1,  0,  0 ),
                      new Vector(-1,  0,  0 ),
            
                      // Hole vertex normals
            
                      new Vector(-1,  0,  0 ), // 24
                      new Vector( 1,  0,  0 ), // 25
                      new Vector( 0,  1,  0 ), // 26
                      new Vector(-1,  0,  0 ), // 27
            
                      new Vector(-1,  0,  0 ), // 28
                      new Vector( 1,  0,  0 ), // 29
                      new Vector( 0,  1,  0 ), // 30
                      new Vector(-1,  0,  0 ), // 31
            
                      new Vector( 0, -1,  0 ), // 32
                      new Vector( 0, -1,  0 ), // 33
                      new Vector( 1,  0,  0 ), // 34
                      new Vector(-1,  0,  0 ), // 35 CHANGE THIS TO (0, 1, 0) FOR A VISIBLE EDGE
            
                      new Vector( 0, -1,  0 ), // 36
                      new Vector( 0, -1,  0 ), // 37
                      new Vector( 1,  0,  0 ), // 38
                      new Vector(-1,  0,  0 ), // 39 CHANGE THIS TO (0, 1, 0) FOR A VISIBLE EDGE
                  };
            
                  var brep = new FacetedBrepWithNormals(vertices, outloop, innerLoop, normals);
            
                  var shapeItem = new ShapeItem
                  {
                      Name = "CubeWithHoleTwoEdgesHidden",
                      ShapeFacetedBrep = brep,
                      UpAxis = ShapeUpAxis.Z_Axis
                  };
            
                  var retVal = shapeItem.InsertUsingNormals();
            
                  var brep = new Brep()
                  {
                      StartPoint = new Point(0, 8000, 0),
                      EndPoint = new Point(1000, 8000, 0),
                      Profile = { ProfileString = "CubeWithHoleTwoEdgesHidden" },
                  };
            
                  brep.Insert();
            
                  new Model().CommitChanges();
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.CreateFinalBrepFromBrepWithNormals(Tekla.Structures.Geometry3d.FacetedBrepWithNormals,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Vector},System.Collections.Generic.List{System.Int32})">
            <summary>
            Add edges with visibility information to outputBrep by using vertex normal vectors provided by an input faceted B-rep.
            The algorithm is explained in more detail in Confluence:
            https://confluence:8443/display/TechnicalDocumentation/Using+TrimBim+for+Item+Import
            or search for "Using TrimBim for Item Import"
            </summary>
            <param name="brepIn">
            The input B-rep information containing geometry of vertices, outer and inner wires and vertex normals.
            </param>
            <param name="comprVertices">
            A list of vectors that contains the "compressed" vertex geometries. Compressed here means that geometrically same points
            have been combined so that there is only one instance in the list for each unique geometry. This works in combination with
            the parameter indexVertexList
            </param>///
            <param name="indexVertexList">
            A list that acts as a map between the original and new "compressed" index values for the vertices
            </param>
            <returns>
            Returns a FacetedBrep that contains the edges with visibility type set by the normal vector information.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Export(System.String@)">
             <summary>
             Exports the shape item in *.tsc-format to the to given file name.
             If path is not given shape is exported to model folder.
             If filename is empty shape name is used as filename.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void Example1()
                    {
                        ShapeItem item = new ShapeItem();
                        string shapeName = "myShape";
                        if (item.Select(shapeName))
                        {
                            string filename = System.IO.Path.GetTempPath() + "\\" + shapeName;
                            if (item.Export(ref filename))
                            {
                                Console.WriteLine("Shape item exported successfully");
                            }
                        }
                    }
             }
             </code>
             </example>
             <param name="filename">The export file name of the shape item.</param>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Modify">
             <summary>
             Modifies a shape in the shape catalog based on the shape name or if not found, based on shape guid.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void ModifyCube()
                    {
                         var insertVertices = new[]
                         {
                             new Vector(  0.0,   0.0,   0.0), // 0
                             new Vector(200.5,   0.0,   0.0), // 1
                             new Vector(200.5, 200.5,   0.0), // 2
                             new Vector(  0.0, 200.5,   0.0), // 3
                             new Vector(  0.0,   0.0, 200.5), // 4
                             new Vector(200.5,   0.0, 200.5), // 5
                             new Vector(200.5, 200.5, 200.5), // 6
                             new Vector(  0.0, 200.5, 200.5), // 7
                         };
                         var outloop = new[] {
                                   new[] { 0, 3, 2, 1 },
                                   new[] { 0, 1, 5, 4 },
                                   new[] { 1, 2, 6, 5 },
                                   new[] { 2, 3, 7, 6 },
                                   new[] { 3, 0, 4, 7 },
                                   new[] { 4, 5, 6, 7 }};
            
                         var innerLoop = new Dictionary{int, int[][]}
                         {
                         };
                         var insertFBrep = new FacetedBrep(insertVertices, outloop, innerLoop);
            
                         var insertShapeItem = new ShapeItem
                         {
                             Name = "MyOtherNiceCube",
                             ShapeFacetedBrep = insertFBrep,
                             UpAxis = ShapeUpAxis.Z_Axis
                         };
            
                         var resultOfInsert = insertShapeItem.Insert();
                         insertShapeItem.Select();
            
                         var modifyVertices = new[]
                         {
                             new Vector(  0.0,   0.0,   0.0), // 0
                             new Vector(400.0,   0.0,   0.0), // 1
                             new Vector(400.0, 400.0,   0.0), // 2
                             new Vector(  0.0, 400.0,   0.0), // 3
                             new Vector(  0.0,   0.0, 400.0), // 4
                             new Vector(400.0,   0.0, 400.0), // 5
                             new Vector(400.0, 400.0, 400.0), // 6
                             new Vector(  0.0, 400.0, 400.0), // 7
                         };
                         var modifyFBrep = new FacetedBrep(modifyVertices, outloop, innerLoop);
            
                         var modifyShapeItem = new ShapeItem
                         {
                             Name = "MyOtherNiceCube",
                             ShapeFacetedBrep = modifyFBrep,
                             UpAxis = ShapeUpAxis.Z_Axis
                         };
            
                         var resultOfModify = modifyShapeItem.Modify();
                         modifyShapeItem.Select();
                  }
             }
             </code>
             </example>
             <returns>
             Return true on success.
             </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.CleanAndModify(System.Boolean@)">
            <summary>
            Cleans and stores the brep into the shape catalog
            </summary>
            <returns>True if cleaning and storing to catalog was successful</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.Rename(System.String)">
             <summary>
             Renames a shape in the shape catalog with the given shape name.
             </summary>
             <returns>True on success. False if the new name is empty or 
             duplicated as the current name, or other exceptions. </returns>
             <example>
             <code>
             using System;
             using Tekla.Structures.Catalogs;
            
             public class Example
             {
                    public void InsertSimpleCube()
                    {
                      var vertices = new[]
                      {
                         new Vector(  0.0,   0.0,   0.0), // 0
                         new Vector(300.0,   0.0,   0.0), // 1
                         new Vector(300.0, 300.0,   0.0), // 2
                         new Vector(  0.0, 300.0,   0.0), // 3
                         new Vector(  0.0,   0.0, 300.0), // 4
                         new Vector(300.0,   0.0, 300.0), // 5
                         new Vector(300.0, 300.0, 300.0), // 6
                         new Vector(  0.0, 300.0, 300.0), // 7
                     };
                     var outloop = new[] { new[] { 0, 3, 2, 1 },
                                   new[] { 0, 1, 5, 4 },
                                   new[] { 1, 2, 6, 5 },
                                   new[] { 2, 3, 7, 6 },
                                   new[] { 3, 0, 4, 7 },
                                   new[] { 4, 5, 6, 7 }};
            
                     var innerLoop = new Dictionary{int, int[][]}
                     {
                     };
            
                     var brep = new FacetedBrep(vertices, outloop, innerLoop);
                     var shapeItem = new ShapeItem
                     {
                         Name = "MyNiceCubeBrep",
                         ShapeFacetedBrep = brep,
                         UpAxis = ShapeUpAxis.Z_Axis
                     };
                     var result = shapeItem.Insert
                     result = shapeItem.Rename("RenamedCubeBrep");
                     if (result)
                     {
                         result = shapeItem.Name.Equals("RenamedCubeBrep");
                     }
                  }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.GetInstanceCount">
             <summary>
             Get the number of instances used in the model of a shape
             </summary>
             <example>
             This sample shows how to call the <see cref="M:Tekla.Structures.Catalogs.ShapeItem.GetInstanceCount"/> method to detect shapes without instances thus can be removed.
             <code>
             public List&lt;string&gt; CheckShapeInstancesTest()
             {
                 var shapeEnumerator = CatalogHandler.GetShapeItems();
                 var removedShapes = new List&lt;String&gt;();
            
                 shapeEnumerator.Reset();
                 while (shapeEnumerator.MoveNext())
                 {
                     var shape = shapeEnumerator.Current;
            
                     if (shape.GetInstanceCount() == 0)
                     {
                         removedShapes.Add(shape.Name);
                     }
                 }
            
                 return removedShapes;
             }
             </code>
             </example>
             <returns>
             The number of shape instances
             </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.SetHandlePoints(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
             <summary>
             Set the Shape item's Handle Points
             </summary>
             <param name="HandlePoints"></param>
             <example>
             <code>
             public void SetHandlePointsTest()
             {
            
                 var polymesh = CreateSomeValidBrep();
                 var shapeItem = new ShapeItem
                 {
                     Name = "TestFileName",
                     ShapeFacetedBrep = polymesh,
                     UpAxis = ShapeUpAxis.Z_Axis
                 };
            
                 shapeItem.Insert();
            
                 var handlePoints = new List&lt;Point&gt;;
                     {
                       new Point(100.0, 100.0, 100.0),
                       new Point(-100.0, -100.0, -100.0),
                     };
            
                shapeItem.SetHandlePoints(handlePoints);
             }
             </code>
             </example>
             <returns>True if success or False</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.FromStruct(Tekla.Structures.CatalogInternal.dotcatShape_t)">
            <summary>
            Copies from a struct.
            </summary>
            <param name="shapeStruct"> </param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItem.ToStruct">
            <summary>
            Copies this instance to a struct.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.ShapeItemEnumerator">
            <summary>
            The ShapeItemEnumerator class allows to loop through the shape catalog items.
            </summary>
            <example>
            The following example returns true if an item with the name Connection has been found:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public bool Example1()
                   {
                       bool Result = false;
            
                       CatalogHandler CatalogHandler = new CatalogHandler();
            
                       if (CatalogHandler.GetConnectionStatus())
                       {
                           ShapeItemEnumerator ShapeItemEnumerator = CatalogHandler.GetShapes();
            
                           while (ShapeItemEnumerator.MoveNext())
                           {
                               ShapeItem ShapeItem = ShapeItemEnumerator.Current as ShapeItem;
            
                               if (ShapeItem.Name == "Connection")
                               {
                                   Result = true;
                                   break;
                               }
                           }
                       }
            
                       return Result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItemEnumerator.#ctor">
            <summary>
            The constructor takes as parameter the filter for which items from the catalog
            will enumerate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Current property required by IEnumerator. The returned object
            is always of type ShapeItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.ShapeItemEnumerator.Current">
            <summary>
            Returns a shape item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.ShapeItemEnumerator.GetSize">
            <summary>
            Returns the total amount of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum">
            <summary>The user property field type.</summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_UNDEFINED">
            <summary>
            The user property field type is undefined.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_NUMBER">
            <summary>
            The user property field type is number.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_TEXT">
            <summary>
            The user property field type is text.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DISTANCE">
            <summary>
            The user property field type is distance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_PROFILE">
            <summary>
            The user property field type is profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_MATERIAL">
            <summary>
            The user property field type is material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_TEXT_LIST_DISTANCE">
            <summary>
            The user property field type is distance list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_FILE_IN">
            <summary>
            The user property field type is file in.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_FILE_OUT">
            <summary>
            The user property field type is file out.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_BOLT_STANDARD">
            <summary>
            The user property field type is bolt standard.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_BOLT_SIZE">
            <summary>
            The user property field type is bolt size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_RATIO">
            <summary>
            The user property field type is ratio.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_STRAIN">
            <summary>
            The user property field type is strain.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_ANGLE">
            <summary>
            The user property field type is angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DEFORMATION">
            <summary>
            The user property field type is deformation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DIMENSION">
            <summary>
            The user property field type is dimension.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_RADIUSOFINERTIA">
            <summary>
            The user property field type is radius of inertia.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_AREA">
            <summary>
            The user property field type is area.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_AREAPERLENGTH">
            <summary>
            The user property field type is area/length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_SECTIONMODULUS">
            <summary>
            The user property field type is section modulus.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_MOMENTOFINERTIA">
            <summary>
            The user property field type is moment of inertia.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_TORSIONCONSTANT">
            <summary>
            The user property field type is torsion constant.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_WARPINGCONSTANT">
            <summary>
            The user property field type is warping constant.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_FORCE">
            <summary>
            The user property field type is force.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_WEIGHT">
            <summary>
            The user property field type is weight.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DISTRIBLOAD">
            <summary>
            The user property field type is distributed load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_SPRINGCONSTANT">
            <summary>
            The user property field type is spring constant.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_SURFACELOAD">
            <summary>
            The user property field type is surface load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_STRENGTH">
            <summary>
            The user property field type is strength.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_MODULUS">
            <summary>
            The user property field type is modulus.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DENSITY">
            <summary>
            The user property field type is density.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_MOMENT">
            <summary>
            The user property field type is moment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DISTRIBMOMENT">
            <summary>
            The user property field type is distributed moment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_ROTSPRINGCONST">
            <summary>
            The user property field type is rotational spring constant.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_TEMPERATURE">
            <summary>
            The user property field type is temperature.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_THERMDILATCOEFF">
            <summary>
            The user property field type is thermal coefficient.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_ANALYSIS_RESTRAINT">
            <summary>
            The user property field type is analysis restraint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_VOLUME">
            <summary>
            The user property field type is volume.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_MAIN">
            <summary>
            The user property field type is main reinforcement bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_STIRRUP">
            <summary>
            The user property field type is stirrup reinforcement bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DATE">
            <summary>
            The user property field type is date.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DATE_TIME_SEC">
            <summary>
            The user property field type is date and time with seconds.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_DATE_TIME_MIN">
            <summary>
            The user property field type is date and time with minutes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_STUD_STANDARD">
            <summary>
            The user property field type is stud standard.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_STUD_SIZE">
            <summary>
            The user property field type is stud size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_STUD_LENGTH">
            <summary>
            The user property field type is stud length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_HOLE_TYPE">
            <summary>
            The user property field type is hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_HOLE_DIRECTION">
            <summary>
            The user property field type is hole direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_WELD_TYPE">
            <summary>
            The user property field type is weld type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_CHAMFER_TYPE">
            <summary>
            The user property field type is chamfer type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_WELDING_SITE">
            <summary>
            The user property field type is welding site.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_FACTOR">
            <summary>
            The user property field type is factor.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_PART_NAME">
            <summary>
            The user property field type is part name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_BOLT_TYPE">
            <summary>
            The user property field type is bolt type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_COMPONENT_NAME">
            <summary>
            The user property field type is component name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_MESH">
            <summary>
            The user property field type is rebar mesh.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_USERDEFINED">
            <summary>
            The user property field type is user defined.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_YES_NO">
            <summary>
            The user property field type is yes/no.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_COMPONENT_STANDARD_FILE">
            <summary>
            The user property field type is component standard file.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_GRADE">
            <summary>
            The user property field type is reinforcement bar grade.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_RADIUS">
            <summary>
            The user property field type is reinforcement bar radius.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_REBAR_SIZE">
            <summary>
            The user property field type is reinforcement bar size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_HOOK_SHAPE">
            <summary>
            The user property field type is reinforcement bar hook shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyFieldTypeEnum.FIELDTYPE_CROSSBAR_POSITION">
            <summary>
            The user property field type is reinforcement cross bar position.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyLevelEnum">
            <summary>The user property level.</summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyLevelEnum.LEVEL_MODEL">
            <summary>
            The user property has been defined as a model user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyLevelEnum.LEVEL_PROJECT">
            <summary>
            The user property has been defined as a project user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyLevelEnum.LEVEL_FIRM">
            <summary>
            The user property has been defined as a firm user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyLevelEnum.LEVEL_ENVIRONMENT">
            <summary>
            The user property has been defined as an environment user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyLevelEnum.LEVEL_COMMONDEFAULT">
            <summary>
            The user property has been defined as a common default user property.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyVisibilityEnum">
            <summary>The visibility of the user property.</summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyVisibilityEnum.VISIBILITY_NORMAL">
            <summary>
            The user property is visible and the user can modify it.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyVisibilityEnum.VISIBILITY_READONLY">
            <summary>
            The user property is visible but the user cannot modify it.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Catalogs.UserPropertyVisibilityEnum.VISIBILITY_HIDDEN">
            <summary>
            The user property is hidden.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyItem">
            <summary>
            The UserPropertyItem class contains information about the user properties in the Tekla Structures catalog.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.#ctor">
            <summary>
            Creates a new user property item instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.Name">
            <summary>
            The name of the user property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.Type">
            <summary>
            The type of the user property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.FieldType">
            <summary>
            The field type of the user property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.Level">
            <summary>
            The level at which the user property has been defined.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.AffectsNumbering">
            <summary>
            Indicates whether the property value affects the numbering of objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.Unique">
            <summary>
            Indicates whether the property value is copied when the object is copied.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItem.Visibility">
            <summary>
            Indicates whether the property value is visible/editable.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetDefaultValue(System.Int32@)">
            <summary>
            Gets the default value of an integer property.
            </summary>
            <param name="DefaultValue">The value that was gotten.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetDefaultValue(System.Int32)">
            <summary>
            Sets the default value of an integer property.
            </summary>
            <param name="DefaultValue">The new value.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetDefaultValue(System.Double@)">
            <summary>
            Gets the default value of a double property.
            </summary>
            <param name="DefaultValue">The value that was gotten.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetDefaultValue(System.Double)">
            <summary>
            Sets the default value of a double property.
            </summary>
            <param name="DefaultValue">The new value.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetDefaultValue(System.String@)">
            <summary>
            Gets the default value of a string property.
            </summary>
            <param name="DefaultValue">The value that was gotten.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetDefaultValue(System.String)">
            <summary>
            Sets the default value of a string property.
            </summary>
            <param name="DefaultValue">The new value.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}@)">
            <summary>
            Gets the value options of an integer property. Option strings are translated when translation is available.
            </summary>
            <param name="IntOptions">The value options.</param>
            <returns>
            True on success.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}@,System.Boolean)">
            <summary>
            Gets the value options of an integer property.
            </summary>
            <param name="IntOptions">The value options.</param>
            <param name="translatedLabels">if set to <c>true</c> labels translated to current language are returned, otherwise the resource key of label is returned.</param>
            <returns>
            True on success.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Sets the value options of an integer property.
            The maximum count of options is 400.
            </summary>
            <param name="IntOptions">The value options.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Double,System.String}}@)">
            <summary>
            Gets the value options of a double property. Option strings are translated when translation is available.
            </summary>
            <param name="DoubleOptions">The value options.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Double,System.String}}@,System.Boolean)">
            <summary>
            Gets the value options of a double property.
            </summary>
            <param name="DoubleOptions">The value options.</param>
            <param name="translatedLabels">if set to <c>true</c> labels translated to current language are returned, otherwise the resource key of label is returned.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Double,System.String}})">
            <summary>
            Sets the value options of a double property.
            The maximum count of options is 400.
            </summary>
            <param name="DoubleOptions">The value options.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Gets the value options of a string property. Option strings are translated when translation is available.
            </summary>
            <param name="StringOptions">The value options.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Boolean)">
            <summary>
            Gets the value options of a string property.
            </summary>
            <param name="StringOptions">The value options.</param>
            <param name="translatedLabels">if set to <c>true</c> labels translated to current language are returned, otherwise the resource key of label is returned.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetOptions(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the value options of a string property.
            The maximum count of options is 400.
            </summary>
            <param name="StringOptions">The new value options.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SetLabel(System.String)">
            <summary>
            Sets the label of the user property.
            </summary>
            <param name="label">The new label.</param>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetLabel">
            <summary>
            Gets the label of the user property. Labels are translated when translation is available.
            </summary>
            <returns>The label of the user property.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetLabel(System.Boolean)">
            <summary>
            Gets the label of the user property.
            </summary>
            <param name="translated">if set to <c>true</c> translated text is returned.</param>
            <returns>
            The label of the user property.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.Insert">
            <summary>
            Inserts the user property item to the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.Modify">
            <summary>
            Modifies the user property item.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.Delete">
            <summary>
            Deletes the user property item from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.Select">
            <summary>
            Selects by name the user property item from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.GetObjectTypes(System.Collections.Generic.List{Tekla.Structures.Catalogs.CatalogObjectTypeEnum}@)">
            <summary>
            Gets the object types which contain this user property item.
            </summary>
            <param name="objectTypes">The object types that were gotten.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.AddToObjectType(Tekla.Structures.Catalogs.CatalogObjectTypeEnum)">
            <summary>
            Adds the user property item to the given object type.
            </summary>
            <param name="objectType">The object type to add the item to.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.RemoveFromObjectType(Tekla.Structures.Catalogs.CatalogObjectTypeEnum)">
            <summary>
            Removes the user property item from the given object type.
            </summary>
            <param name="objectType">The object type to remove the item from.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.InsertProperty">
            <summary>
            Inserts user property item to the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.ModifyProperty">
            <summary>
            Modifies user property item.
            Only model level properties can be modified.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.DeleteProperty">
            <summary>
            Deletes the user property item from the database.
            Only model level properties can be deleted.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItem.SelectProperty">
            <summary>
            Selects the user property item from the database by name.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyItemEnumerator">
            <summary>
            The UserPropertyItemEnumerator class allows to loop through the user property items.
            </summary>
            <example>
            The following example returns true if an item with the name "comment" has been found:
            <code>
            using Tekla.Structures.Catalogs;
            
            public class Example
            {
                   public bool Example1()
                   {
                       bool Result = false;
            
                       CatalogHandler CatalogHandler = new CatalogHandler();
            
                       if (CatalogHandler.GetConnectionStatus())
                       {
                           UserPropertyItemEnumerator UserPropertyItemEnumerator = CatalogHandler.GetUserPropertyItems();
            
                           while (UserPropertyItemEnumerator.MoveNext())
                           {
                               UserPropertyItem UserPropertyItem = UserPropertyItemEnumerator.Current as UserPropertyItem;
            
                               if (UserPropertyItem.Name == "comment")
                               {
                                   Result = true;
                                   break;
                               }
                           }
                       }
            
                       return Result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.#ctor">
            <summary>
            Enumerator for all user property items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.#ctor(Tekla.Structures.Catalogs.CatalogObjectTypeEnum)">
            <summary>
            Enumerator for user property items of object type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implementation for the Curret property required by IEnumerator. The returned object
            is always of type ProfileItem.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.Current">
            <summary>
            Returns a user property item instance of the current element.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator.
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Catalogs.UserPropertyItemEnumerator.GetSize">
            <summary>
            Returns the total amout of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyName">
            <summary>
            The UserPropertyName class contains the name of the user property item.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyName.Name">
            <summary>
            The user property item name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Catalogs.UserPropertyOption">
            <summary>
            The UserPropertyOption class contains the properties of a user property value option.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyOption.IntValue">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyOption.DoubleValue">
            <summary>
            The double value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyOption.StringValue">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyOption.OptionLabel">
            <summary>
            The option name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Catalogs.UserPropertyOption.OptionLabelTranslated">
            <summary>
            The translated option name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t.aStandard">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t.Size">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t.IncludeSingleItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t.aFileName">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t">
            <summary>
            Serialization structure for Bolt Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.MoreBoltItemsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.IndexToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.nBoltItems">
            <summary>
            Number of the profile items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.aBoltItemNames">
            <summary>
            Bolt grades list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.aBoltItemTypes">
            <summary>
            Bolt types list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.aBoltItemSizes">
            <summary>
            Bolt sizes list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t">
            <summary>
            Serialization structure for Bolt Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t.nBoltLengthItems">
            <summary>
            Number of the profile items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t.BoltGrade">
            <summary>
            Grade of the item in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t.BoltSize">
            <summary>
            Size of the item in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t.aBoltItemLengths">
            <summary>
            Bolt lengths list.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatBoltName_t">
            <summary>
            Serialization structure for bolt name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatBoltName_t.aName">
            <summary>
            The name of the bolt.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t">
            <summary>
            Serialization structure for Component Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.MoreComponentItemsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.IndexToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.nComponentItems">
            <summary>
            Number of the component items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemNumbers">
            <summary>
            Component numbers list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemTypes">
            <summary>
            Component types list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemVersionNumbers">
            <summary>
            Component version numbers list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemNames">
            <summary>
            Component names list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemUINames">
            <summary>
            Component UI names list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aComponentItemDescriptions">
            <summary>
            Component descriptions list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.aAttributeFileExtensions">
            <summary>
            Component descriptions list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatComponentName_t">
            <summary>
            Serialization structure for ComponentItems name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentName_t.aName">
            <summary>
            The name of the Component item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatComponentDescription_t">
            <summary>
            Serialization structure for ComponentItems descriptions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatComponentDescription_t.aDescription">
            <summary>
            The name of the Component item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ConflictHandler">
            <summary>
            The ConflictHandler class is a class from which the import of catalog items can be started 
            and finished after conflicts are handled.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ConflictHandler.Conflicts">
            <summary>
            The name of the user property.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ConflictHandler.#ctor">
            <summary>
            Creates a new catalog handler instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ConflictHandler.dotInitializeImportProfilesFromFolder(System.String)">
            <summary>
            Initializes import of profile items from folder to profile catalog.
            </summary>
            <param name="path">The path to be used for import.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ConflictHandler.dotFinalizeImportProfilesFromFolder">
            <summary>
            Finalizes import of profile items from folder to profile catalog.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ConflictItem">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ConflictItem.ActionEnum">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.ActionEnum.ACTION_NOT_DEFINED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.ActionEnum.ACTION_NONE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.ActionEnum.ACTION_MERGE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.ActionEnum.ACTION_REPLACE">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ConflictItem.StateEnum">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.StateEnum.NEW">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ConflictItem.StateEnum.EXISTING">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ConflictItem.Identifier">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ConflictItem.ItemType">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ConflictItem.State">
            <exclude />
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ConflictItem.Action">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatConflictItem_t">
            <summary>
            Serialization structure for ConflictItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatConflictItem_t.aItemType">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatConflictItem_t.aIdentifier">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatConflictItem_t.State">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatConflictItem_t.Action">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatImportItem_t">
            <summary>
            Serialization structure for ImportItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.aPathString">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.UseConflictHandling">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.nConflictItems">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.IndexToStart">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.aConflictItems">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatImportItem_t.ConflictsTransferred">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t">
            <summary>
            Serialization structure for MaterialItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.MaterialName">
            <summary>
            The name of the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.AliasName1">
            <summary>
            The alias name 1 of the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.AliasName2">
            <summary>
            The alias name 2 of the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.AliasName3">
            <summary>
            The alias name 3 of the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.MaterialType">
            <summary>
            The profile item type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.ProfileDensity">
            <summary>
            The profile density in unit kg/m3.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.PlateDensity">
            <summary>
            The plate density in unit kg/m3.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.ModulusOfElasticity">
            <summary>
            Thte modulus of elasticity in unit N/m2.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.PoissonsRatio">
            <summary>
            The poissons ratio
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.ThermalDilatation">
            <summary>
            The thermal dilatation in unit 1/K.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItem_t.DesignCode">
            <summary>
            The design code.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t">
            <summary>
            Serialization structure for Material Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.MoreMaterialItemsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.IndexToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.nMaterialItems">
            <summary>
            Number of the material items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.aMaterialItemNames">
            <summary>
            material names list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.aMaterialItemTypes">
            <summary>
            material types list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatMaterialName_t">
            <summary>
            Serialization structure for material name item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMaterialName_t.aName">
            <summary>
            The name of the material.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t">
            <summary>
            Serialization structure for Printer Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.MorePrinterItemsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.IndexToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.nPrinterItems">
            <summary>
            Number of the printer items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.aPrinterItemNames">
            <summary>
            Printer names list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.aPrinterItemDevices">
            <summary>
            Printer devices list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.aPrinterItemExtensions">
            <summary>
            Printer extensions list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.aPrinterItemWidths">
            <summary>
            Printer paper area width list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.aPrinterItemHeights">
            <summary>
            Printer paper area heigth list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatPrinterName_t">
            <summary>
            Serialization structure for PrinterItems name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterName_t.aName">
            <summary>
            The name of the printer item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatPrinterDevice_t">
            <summary>
            Serialization structure for PrinterItems device.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterDevice_t.aDevice">
            <summary>
            The device.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatPrinterExtension_t">
            <summary>
            Serialization structure for PrinterItems file extension.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatPrinterExtension_t.aExtension">
            <summary>
            The extension.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatCrossSection_t">
            <summary>
            Struct for the cross section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.Profile">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.Index">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.MaxContours">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.Location">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.Length">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.NumberOfPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.aCrossSectionPoints">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatCrossSection_t.HighAccuracy">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotCrossSectionPoint_t">
            <summary>
            Struct for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotCrossSectionPoint_t.Point">
            <summary>
            The point for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotCrossSectionPoint_t.Chamfer">
            <summary>
            The Chamfer for the ContourPoint
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatProfileItem_t">
            <summary>
            Serialization structure for ProfileItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.ProfileName">
            <summary>
            The name of the profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.Type">
            <summary>
            Whether it is a parametric profile or library profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.ProfileItemType">
            <summary>
            The profile item type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.ProfileItemSubType">
            <summary>
            The profile item subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.ParametricProfileDefinitionType">
            <summary>
            The profile item subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.aParameterString">
            <summary>
            The parameter string of the profile.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.nProfileItemParameters">
            <summary>
            Number of profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.aProfileItemParameters">
            <summary>
            Profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.nProfileItemAnalysisParameters">
            <summary>
            Number of profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.aProfileItemAnalysisParameters">
            <summary>
            Profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.nProfileItemUserParameters">
            <summary>
            Number of profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.aProfileItemUserParameters">
            <summary>
            Profile item parameters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.ProfileTreePath">
            <summary>
            Profile item tree path separated with slash'\'.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItem_t.NumberOfCrossSections">
            <summary>
            Number of cross sections in profile item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t">
            <summary>
            Serialization structure for ProfileItem tree path.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t.aTreePath">
            <summary>
            The path of profile tree.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t">
            <summary>
            Serialization structure for Profile Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.MoreProfilesItemsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.IndexToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.nProfileItems">
            <summary>
            Number of the profile items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.ProfileEnumeratorType">
            <summary>
            Tells if it enumerates all the profiles, library or parametric.
            Currently only Library Profiles are supported.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.aProfileItemNames">
            <summary>
            Profile names list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.aProfileItemTypes">
            <summary>
            Profile types list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.aProfileItemProfileTypes">
            <summary>
            Profile types list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.FillTreePaths">
            <summary>
            Tells if Profile tree list is filled in enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.aProfileTreePaths">
            <summary>
            Profile tree list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatClientId_t">
            <summary>
            Serialization structure for dotcatClientId_t
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatClientId_t.ProcessId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatClientId_t.ThreadId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t">
            <summary>
            Serialization structure for Profile Item Parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.aProperty">
            <summary>
            The property/description of the parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.aSymbol">
            <summary>
            The symbol of the parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.aStringValue">
            <summary>
            The string value of the parameter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.ParameterUnitType">
            <summary>
            The parameter unit type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileItemParameter_t.CrossSectionNumber">
            <summary>
            The cross section number.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatProfileName_t">
            <summary>
            Serialization structure for ProfileItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatProfileName_t.aName">
            <summary>
            The name of the profile.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t">
            <summary>
            Serialization structure for MeshItem export.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t.aGrade">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t.aName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t.aFileName">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t">
            <summary>
            The MeshItemEnumerator_t structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.IndexToStart">
            <summary>
            The index to start from.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.MeshItems">
            <summary>
            The number of mesh items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.Grade">
            <summary>
            The mesh grade list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.Name">
            <summary>
            The mesh name list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.DiameterLongitudinal">
            <summary>
            The mesh longitudinal bar size list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.DistanceLongitudinal">
            <summary>
            The mesh longitudinal pitch list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.Length">
            <summary>
            The mesh longitudinal mesh size (Length) list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.MinimumOverlappingLongitudinal">
            <summary>
            The mesh longitudinal minimum overlapping list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.MaximumOverlappingLongitudinal">
            <summary>
            The mesh longitudinal maximum overlapping list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.LeftOverhangLongitudinal">
            <summary>
            The mesh longitudinal left overhang list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.RightOverhangLongitudinal">
            <summary>
            The mesh longitudinal right overhang list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.DiameterCross">
            <summary>
            The mesh cross bar size list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.DistanceCross">
            <summary>
            The mesh cross pitch list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.Width">
            <summary>
            The mesh cross mesh size (Width) list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.MinimumOverlappingCross">
            <summary>
            The mesh cross minimum overlapping list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.MaximumOverlappingCross">
            <summary>
            The mesh cross maximum overlapping list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.LeftOverhangCross">
            <summary>
            The mesh cross left overhang list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.MeshItemEnumerator_t.RightOverhangCross">
            <summary>
            The mesh cross right overhang list.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.RebarHandler">
            <summary>
            The <see cref="T:Tekla.Structures.CatalogInternal.RebarHandler"/> class handles the data operations for rebars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarHandler.Singleton">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarHandler.rebarItems">
            <summary>
            The rebar items.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarHandler.meshItems">
            <summary>
            The mesh items.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Tekla.Structures.CatalogInternal.RebarHandler"/> class from being created.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.RebarHandler.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetCatalogItem(System.String,System.String,System.Double)">
            <summary>
            Gets the rebar catalog item having best match to given bending radius.
            </summary>
            <param name="grade">Rebar grade.</param>
            <param name="size">Rebar size.</param>
            <param name="radius">Bending radius.</param>
            <returns>The rebar catalog item having best match to given bending radius.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetRebarItemsFromFile(System.String)">
            <summary>
            Returns the list of rebar items.
            </summary>
            <param name="FilePath">File path of rebar database.</param>
            <returns>The list of rebar items.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetAvailableDiameters(Tekla.Structures.Model.Reinforcement)">
            <summary>
            Gets available diameters.
            </summary>
            <param name="rebar">The rebar.</param>
            <returns>
            The available diameters.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetAvailableDiameters(System.String)">
            <summary>
            Gets available diameters.
            </summary>
            <param name="grade">The grade.</param>
            <returns>
            The available diameters.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetAvailableRadiuses(Tekla.Structures.Model.Reinforcement)">
            <summary>
            Gets available radiuses.
            </summary>
            <param name="rebar">The rebar.</param>
            <returns>
            The available radiuses.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetMeshItems">
            <summary>
            Gets the mesh items.
            </summary>
            <returns>
            The the mesh items.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.ApplyNewRebarSize(System.String,System.String,System.String,System.Collections.ArrayList,Tekla.Structures.Model.RebarHookData,Tekla.Structures.Model.RebarHookData)">
            <summary>
            Applies the new standard values (if any) to radius values and hooks according to the new size.
            </summary>
            <param name="grade">Grade of material.</param>
            <param name="oldSize">Old size.</param>
            <param name="newSize">New size.</param>
            <param name="radiuses">Bending radius values.</param>
            <param name="startHook">Start hook.</param>
            <param name="endHook">End hook.</param>
            <returns>True when succesfull, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.SetMeshSizeAndOverhangs(Tekla.Structures.Catalogs.MeshItem)">
            <summary>
            Sets mesh size and overhangs.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetOverhangRight(System.Double,System.Double)">
            <summary>
            Gets the right overhang.
            </summary>
            <param name="totalDistance">The total distance.</param>
            <param name="unitDistance">The unit distance.</param>
            <returns>The right overhang.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.GetTotalLength(System.Double,System.Double,System.String)">
            <summary>
            Gets total length.
            </summary>
            <param name="leftOverhang">The left overhang.</param>
            <param name="rightOverhang">The right overhang.</param>
            <param name="distance">The distance.</param>
            <returns>The total length.The double.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.IsVaryingSpacingValueString(Tekla.Structures.Catalogs.MeshItem)">
            <summary>
            Determines whether the <paramref name="item"/> has varying spacing values.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the <paramref name="item"/> has varying spacing values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.RebarHandler.RebarSizeComparer">
            <summary>
            The <see cref="T:Tekla.Structures.CatalogInternal.RebarHandler.RebarSizeComparer"/> class compares the rebar sizes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarHandler.RebarSizeComparer.Compare(System.String,System.String)">
            <summary>
            Compares two sizes
            </summary>
            <param name="x">size x</param>
            <param name="y">size y</param>
            <returns>Compare result</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t">
            <summary>
            Serialization structure for RebarItem export.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t.aGrade">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t.aSize">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t.aUsage">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t.aFileName">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.RebarItemComparer">
            <summary>
            Rebar Item Comparer class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarItemComparer.Equals(Tekla.Structures.Catalogs.RebarItem,Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Return true if both Rebar items are equal.
            </summary>
            <param name="rebarItem1">RebarItem 1.</param>
            <param name="rebarItem2">RebarItem 2.</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarItemComparer.GetHashCode(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Returns the hash code.
            </summary>
            <param name="obj">obj.</param>
            <returns>hash code</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t">
            <summary>
            The RebarItemEnumerator_t structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.IndexToStart">
            <summary>
            The index to start from.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.RebarItems">
            <summary>
            The number of rebar items in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.Size">
            <summary>
            The rebar size list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.Grade">
            <summary>
            The rebar grade list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.Usage">
            <summary>
            The rebar usage list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.BendRadius">
            <summary>
            The rebar bend radius list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.Code">
            <summary>
            The rebar code list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.NominalDiameter">
            <summary>
            The rebar nominal diameter list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.ActualDiameter">
            <summary>
            The rebar actual diameter list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.WeightPerLenght">
            <summary>
            The rebar weight per lenght list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.CrossSectionArea">
            <summary>
            The rebar cross section area list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookRadius90Degrees">
            <summary>
            The rebar hook radius at 90 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookLength90Degrees">
            <summary>
            The rebar hook length at 90 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookRadius135Degrees">
            <summary>
            The rebar hook radius at 135 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookLength135Degrees">
            <summary>
            The rebar hook length at 135 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookRadius180Degrees">
            <summary>
            The rebar hook radius at 180 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HookLength180Degrees">
            <summary>
            The rebar hook length at 180 degrees list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.LapLength">
            <summary>
            The lap length list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.CrankStraightLength">
            <summary>
            The crank straight length list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.CrankedLengthType">
            <summary>
            The cranked length type list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.CrankedLength">
            <summary>
            The cranked length list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.CrankExtraOffset">
            <summary>
            The crank extra offset list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarItemEnumerator_t.HeaderItems">
            <summary>
            The header items.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.RebarOperations">
            <summary>
            Rebar operations
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarOperations.RebarDataBaseFileName">
            <summary>
            Rebar data base file name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarOperations.rebarItemLines">
            <summary>
            RebarItem lines list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.RebarOperations.rebarDbFilePath">
            <summary>
            Rebar database file path
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.CatalogInternal.RebarOperations"/> class
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.DeleteRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Delete the passed rebar item in the database.
            </summary>
            <param name="rebarItem">rebarItem to delete</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.InsertRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Insert the passed rebar item in the database.
            </summary>
            <param name="rebarItem">rebarItem to insert</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.ModifyRebarItem(Tekla.Structures.Catalogs.RebarItem,Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Modifies the rebar item in the rebar database based on the given original rebar item.
            </summary>
            <param name="rebarItem">rebar Item</param>
            <param name="originalRebarItem">original Rebar Item</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.ReadRebarItemsFromFile(System.String)">
            <summary>
            Returns rebar items from the file.
            </summary>
            <param name="filePath">File path of rebar database.</param>
            <returns>The list of rebar items.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.IsValidRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Validate the Rebaritem.
            </summary>
            <param name="rebarItem">rebar item</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetParametersWithActualSpacing(System.String)">
            <summary>
            Process the currentFormat string and returns the parameter list with actual spacings
            </summary>
            <param name="currentFormat">current Format string</param>
            <returns>List of parameters with actual spacings</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetParametersInOrderFromRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Get the list of parameters from the RebarItem object
            </summary>
            <param name="rebarItem">rebar item</param>
            <returns>RebarItem parameters</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetFormattedStringOfRebarItem(Tekla.Structures.Catalogs.RebarItem,System.String)">
            <summary>
            Get the formatted string based on the passed format.
            </summary>
            <param name="rebarItem">rebar item</param>
            <param name="currentFormat">current format</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetFormattedStringOfRebarItem(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Get the formatted string
            </summary>
            <param name="rebarItem">The rebar item.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.CopyRebarDataBaseToModelFolder">
            <summary>
            Copy rebar_database.inp file to Model folder if not exists.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetRebarItemMatchIndex(Tekla.Structures.Catalogs.RebarItem)">
            <summary>
            Return the line index if rebar item match
            </summary>
            <param name="rebarItem">rebarItem from the rebar db file</param>
            <returns>line index from the file</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.RebarOperations.GetIndexOfLastValidRebarItem">
            <summary>
            Get the Index of last valid record
            </summary>
            <returns>index</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.CDelegate">
            <summary>
            Interface from catalog assembly to TS
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.CDelegate.Singletons">
            <summary>
            Storage class for singleton instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegate.Singletons.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit. Do not remove.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegate.#ctor">
            <summary>
            Instantiates a new CDelegate
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.CDelegateSynchronized">
            <summary>
            Provides akit synchronization to CCatalogDelegate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.#ctor">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.CDelegateSynchronized.InvokeRequired">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.Invoke(System.Delegate,System.Object[])">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t@,System.IAsyncResult)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateProfiles(Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportSelectProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportProfileItemToFile(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="ExportFile"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportProfileTreeToFile(Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileTreePath"></param>
            <param name="ExportFile"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportGetParametricProfilePrefixFromSubtype(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportGetProfileCrossSection(Tekla.Structures.CatalogInternal.dotcatCrossSection_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pCrossSection"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportCopyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,Tekla.Structures.CatalogInternal.dotcatProfileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="pNewName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportDeleteProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportModifyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportSaveProfileDatabase">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportLibraryProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportInitializeImportProfilesFromFolder(Tekla.Structures.CatalogInternal.dotcatImportItem_t@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="item"></param>        
            <param name="pConflicts"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportFinalizeImportProfilesFromFolder(System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pConflicts"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportParametricProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportMaterialsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportCustomComponentsFromPath(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportRebarsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportMeshesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportImportBoltAssembliesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateMaterials(Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportSelectMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportMaterialNameMaxLength">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportInsertMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportModifyMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportDeleteMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportMaterialExists(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportMaterialItemToFile(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <param name="ExportFile"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateBolts(Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateBoltLengths(System.String,System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Grade"></param>
            <param name="Size"></param>
            <param name="BoltLengths"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportBoltAssemblyToFile(Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportRebarToFile(Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportMeshToFile(Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.EnumerateShapes(Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumeratePrinters(Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPrinterEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateComponents(Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportCustomComponentItemToFile(Tekla.Structures.CatalogInternal.dotcatComponentName_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentItem"></param>
            <param name="ExportFile"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportShapeItemToFile(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeItem"></param>
            <param name="ExportFile"></param>        
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportEnumerateUserProperties(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportInsertUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportModifyUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportDeleteUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportSelectUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportSelectUserPropertyItemObjectTypes(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportUserPropertyItemObjectTypeOperation(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypeOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ExportGetModelPath(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ShapeExists(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ShapeExistsByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ImportShape(Tekla.Structures.CatalogInternal.dotcatShapeImport_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ShapeLocation(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.SelectShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.DeleteShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.InsertShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.ModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.CleanAndModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.CleanAndModifyShapeByName(System.String,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.RenameShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateProfiles(Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportSelectProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportProfileItemToFile(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportProfileTreeToFile(Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileTreePath"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportGetParametricProfilePrefixFromSubtype(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportGetProfileCrossSection(Tekla.Structures.CatalogInternal.dotcatCrossSection_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pCrossSection"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportCopyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,Tekla.Structures.CatalogInternal.dotcatProfileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="pNewName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportDeleteProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportModifyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportSaveProfileDatabase">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportLibraryProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportInitializeImportProfilesFromFolder(Tekla.Structures.CatalogInternal.dotcatImportItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportFinalizeImportProfilesFromFolder(Tekla.Structures.CatalogInternal.dotcatImportItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportParametricProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportMaterialsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportCustomComponentsFromPath(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportRebarsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportMeshesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportImportBoltAssembliesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateMaterials(Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportSelectMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportMaterialNameMaxLength">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportInsertMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportModifyMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportDeleteMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportMaterialExists(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportMaterialItemToFile(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateBolts(Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateBoltLengths(Tekla.Structures.CatalogInternal.dotcatBoltLengthEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportBoltAssemblyToFile(Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportRebarToFile(Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportMeshToFile(Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatEnumerateShapes(Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumeratePrinters(Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPrinterEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateComponents(Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportCustomComponentItemToFile(Tekla.Structures.CatalogInternal.dotcatComponentName_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportShapeItemToFile(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportEnumerateUserProperties(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportInsertUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportModifyUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportDeleteUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportSelectUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportSelectUserPropertyItemObjectTypes(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatExportUserPropertyItemObjectTypeOperation(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectTypeUserPropertyItemOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotdiaGetModelPath(System.Text.StringBuilder)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatImportShape(Tekla.Structures.CatalogInternal.dotcatShapeImport_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatShapeLocation(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatSelectShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatDeleteShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatInsertShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatShapeExists(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatShapeExistsByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatCleanAndModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatCleanAndModifyShapeByName(System.String,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSynchronized.dotcatRenameShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.CDelegateWrapper">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.CDelegateWrapper._instance">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.CDelegateWrapper._functionality">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.#ctor(Tekla.Structures.CatalogInternal.ICDelegate,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="instance"></param>
            <param name="functionality"></param>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateProfiles(Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportSelectProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportProfileItemToFile(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportProfileTreeToFile(Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileTreePath"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportGetParametricProfilePrefixFromSubtype(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportGetProfileCrossSection(Tekla.Structures.CatalogInternal.dotcatCrossSection_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pCrossSection"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportCopyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,Tekla.Structures.CatalogInternal.dotcatProfileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="pNewName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportModifyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportDeleteProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportSaveProfileDatabase">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportLibraryProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportInitializeImportProfilesFromFolder(Tekla.Structures.CatalogInternal.dotcatImportItem_t@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="item"></param>
            <param name="pConflicts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportFinalizeImportProfilesFromFolder(System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pConflicts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportParametricProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportMaterialsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportCustomComponentsFromPath(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportRebarsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportMeshesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportImportBoltAssembliesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateMaterials(Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportSelectMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportMaterialNameMaxLength">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportInsertMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="materialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportModifyMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="materialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportDeleteMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportMaterialExists(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportMaterialItemToFile(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateBolts(Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateBoltLengths(System.String,System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Grade"></param>
            <param name="Size"></param>
            <param name="BoltLengths"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportBoltAssemblyToFile(Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportRebarToFile(Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportMeshToFile(Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.EnumerateShapes(Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumeratePrinters(Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPrinterEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateComponents(Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportCustomComponentItemToFile(Tekla.Structures.CatalogInternal.dotcatComponentName_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportShapeItemToFile(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportEnumerateUserProperties(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportInsertUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportModifyUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportDeleteUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportSelectUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportSelectUserPropertyItemObjectTypes(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportUserPropertyItemObjectTypeOperation(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypeOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ExportGetModelPath(System.String@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ImportShape(Tekla.Structures.CatalogInternal.dotcatShapeImport_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ShapeExists(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ShapeExistsByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.SelectShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.DeleteShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.InsertShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.CleanAndModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.CleanAndModifyShapeByName(System.String,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.RenameShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateWrapper.ShapeLocation(System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.GenericDelegateFake`1">
            <summary>
            Implements ICDelegate so that every method returns according to <see cref="T:Tekla.Structures.RemotingHelper.IReturnStrategy"/>
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.DelegateFake">
            <summary>
            Implements ICDelegate so that every method throws NotImplementedException.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.DelegateProxy">
            <summary>
            CDelegate remote class proxy.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.DelegateProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.DelegateProxy.Delegate">
            <summary>
            Gets the singleton CDelegate instance that includes model API methods.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.DelegateProxy.DeactivateInterface(System.String)">
            <summary>
            Deactivate Tekla.Structures.Model interface
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.CDelegateSetter">
            <summary>
            This class is purely available for the reason to enable faking of
            ICDelegate interface for the sake of testing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.CDelegateSetter.SetInstanceForUnitTesting(Tekla.Structures.CatalogInternal.ICDelegate)">
            <summary>
            Set the current ICDelegate instance to your fake/mock class.
            The instance must be restored to null when test method ends.
            </summary>
            <param name="cdelegate">The delegate implementation</param>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.Remoter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.Remoter.ChannelName">
            <summary>
            Name of the remoting channel to register.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.Remoter.PublishTypes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.Remoter.InitializeSandBox">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.DotNetProxy">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.DotNetProxy.Run(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="param">Not Used.</param>
            <returns>The return value is not useful because AKIT doesn't send it to Core.</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.EventHandler">
            <summary>
            EventHandler is a class that TS calls when an event is raised.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.EventHandler.OnEvent(System.String)">
            <summary>
            TS calls when event is raised.
            </summary>
            <param name="param">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ICDelegate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateProfiles(Tekla.Structures.CatalogInternal.dotcatProfileItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportSelectProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportProfileItemToFile(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportProfileTreeToFile(Tekla.Structures.CatalogInternal.dotcatProfileTreePath_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileTreePath"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportGetParametricProfilePrefixFromSubtype(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportGetProfileCrossSection(Tekla.Structures.CatalogInternal.dotcatCrossSection_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pCrossSection"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportCopyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@,Tekla.Structures.CatalogInternal.dotcatProfileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <param name="pNewName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportDeleteProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportModifyProfileItem(Tekla.Structures.CatalogInternal.dotcatProfileItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProfileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportSaveProfileDatabase">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportLibraryProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportInitializeImportProfilesFromFolder(Tekla.Structures.CatalogInternal.dotcatImportItem_t@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="item"></param>
            <param name="pConflicts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportFinalizeImportProfilesFromFolder(System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pConflicts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportParametricProfilesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportMaterialsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportCustomComponentsFromPath(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportRebarsFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportMeshesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportImportBoltAssembliesFromFolder(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateMaterials(Tekla.Structures.CatalogInternal.dotcatMaterialItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportSelectMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportMaterialNameMaxLength">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportInsertMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="materialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportModifyMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="materialItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportDeleteMaterialItem(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem">The material item. </param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportMaterialExists(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem">The material item. </param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportMaterialItemToFile(Tekla.Structures.CatalogInternal.dotcatMaterialItem_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pMaterialItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateBolts(Tekla.Structures.CatalogInternal.dotcatBoltItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateBoltLengths(System.String,System.Double,System.Collections.Generic.List{System.Double}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportBoltAssemblyToFile(Tekla.Structures.CatalogInternal.dotcatBoltItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportRebarToFile(Tekla.Structures.CatalogInternal.dotcatRebarItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportMeshToFile(Tekla.Structures.CatalogInternal.dotcatMeshItemExport_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.EnumerateShapes(Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumeratePrinters(Tekla.Structures.CatalogInternal.dotcatPrinterItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPrinterEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateComponents(Tekla.Structures.CatalogInternal.dotcatComponentItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportCustomComponentItemToFile(Tekla.Structures.CatalogInternal.dotcatComponentName_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pComponentItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportShapeItemToFile(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pShapeItem"></param>
            <param name="ExportFile"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportEnumerateUserProperties(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportInsertUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportModifyUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportDeleteUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportSelectUserPropertyItem(Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportSelectUserPropertyItemObjectTypes(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportUserPropertyItemObjectTypeOperation(Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pUserPropertyItemObjectTypeOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ExportGetModelPath(System.String@)">
            <summary>
            Get path to the currently open model's directory
            </summary>
            <param name="Path">The returned path</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ImportShape(Tekla.Structures.CatalogInternal.dotcatShapeImport_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <summary>
            DO NOT USE! For internal usage only! Imports a shape
            </summary>
            <param name="entry">
            The entry containing the input of importing.
            </param>
            <param name="shape">
            The shape output at importing success
            </param>
            <returns>
            An error code.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.SelectShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <summary>
            DO NOT USE! For internal usage only! Select a shape.
            </summary>
            <param name="vo">value object to pass data</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.DeleteShape(Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <summary>
            DO NOT USE! For internal usage only! Delete a shape.
            </summary>
            <param name="vo">value object to pass data</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.InsertShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only! Insert a shape.
            </summary>
            <param name="input">shape data for input</param>
            <param name="pResultShape">the resulting shape data from insert</param>
            <param name="AllowGeoDuplicates">set this to true if you want to allow insertion of shapes that
            have a geometry that is identical to a pre-existing geometry for a shape in the catalog</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ShapeExists(System.String)">
            <summary>
            DO NOT USE! For internal usage only! Checks if a shape exists
            </summary>
            <param name="geohash">
            The hash of the geometry
            </param>
            <returns>
            Returns 1 on success, 0 otherwise
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ShapeExistsByName(System.String)">
            <summary>
            DO NOT USE! For internal usage only! Checks if a shape exists by shape name
            </summary>
            <param name="Name">
            The name of the geometry
            </param>
            <returns>
            Returns 1 on success, 0 otherwise
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,Tekla.Structures.CatalogInternal.dotcatShape_t@)">
            <summary>
            DO NOT USE! For internal usage only! Modify a shape.
            </summary>
            <param name="input">input shape info</param>
            <param name="result">result from modify</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.CleanAndModifyShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only! Clean and modify a shape.
            </summary>
            <param name="pInput">input shape info</param>
            <param name="pIsSolid">output value for solidity of shape, true if it is a solid</param>/// 
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.CleanAndModifyShapeByName(System.String,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only! Clean and modify a shape, do the selection by shape name.
            </summary>
            <param name="name">The name, as in the Shape Catalog, of the shape to be cleaned</param>
            <param name="isSolid">output value for solidity of shape, true if it is a solid</param>/// 
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.RenameShape(Tekla.Structures.CatalogInternal.dotcatShape_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only! Rename a shape.
            </summary>
            <param name="input">input shape info</param>
            <param name="Name">New shape name</param>
            <returns>true (1) on success, false(0) otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ICDelegate.ShapeLocation(System.String)">
            <summary>
            DO NOT USE! For internal usage only! Get location of shape files.
            </summary>
            <param name="Name">Shape name</param>
            <returns>Number indicating location of shape files on the disk.</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportEntry">
            <summary>
            The structure for specifying the source data of the shape to be imported.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.CatalogInternal.ImportEntry"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.FolderPath">
            <summary>
            Gets or sets the path to the folder where the files as the source for importing are stored.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.EntryFileName">
            <summary>
            Gets or sets the name of the entry file from which the source for importing is extracted.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.Overwrite">
            <summary>
            Gets or sets a value indicating whether to override the existing shape in case 
            the given shape name already exists.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.CreateCustomPart">
            <summary>
            Gets or sets a value indicating whether to create a custom part at import success.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportEntry.ScalingFactor">
            <summary>
            Gets or sets the scaling factor
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportEntry.ToStruct">
            <summary>
            Creates an instance in internal struct.
            </summary>
            <returns>
            The <see cref="T:Tekla.Structures.CatalogInternal.dotcatShapeImport_t"/>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportFromArchive">
            <summary>
            The structure for specifying the source of importing a shape from a TS shape archive file.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportFromArchive.ToStruct">
            <summary>
            Creates an instance in internal struct.
            </summary>
            <returns>
            The <see cref="T:Tekla.Structures.CatalogInternal.dotcatShapeImport_t"/>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportFromGeometry">
            <summary>
            The structure specifying the source of importing a shape directly from a geometry file. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportFromGeometry.GeometryIdentifier">
            <summary>
            Gets or sets the identifier which can be used to find the geometry within the file.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportFromGeometry.ShapeName">
            <summary>
            Gets or sets the name of the shape. 
            Shape name can be at most <see cref="F:Tekla.Structures.Catalogs.ShapeItem.MaxShapeNameLength"/> characters long.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ImportFromGeometry.CreateCustomPart">
            <summary>
            Always <code>false</code> as a custom part can not be created without providing a metadata.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportFromGeometry.ToStruct">
            <summary>
            Creates an instance in internal struct.
            </summary>
            <returns>
            The <see cref="T:Tekla.Structures.CatalogInternal.dotcatShapeImport_t"/>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportFromMetadata">
            <summary>
            The structure specifying the source of importing a shape from the metadata  in an XML file. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportFromMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.CatalogInternal.ImportFromMetadata"/> class. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportFromMetadata.GetSchema">
            <summary>
            Gets the metadata schema which can be used to validate the metadata in XML.
            </summary>
            <returns>The schema string.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ImportFromMetadata.ToStruct">
            <summary>
            Creates an instance in internal struct.
            </summary>
            <returns>
            The <see cref="T:Tekla.Structures.CatalogInternal.dotcatShapeImport_t"/>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.MetadataSchema">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.MetadataSchema.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.MetadataSchema.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.MetadataSchema.ShapeImportMetadataSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
                elementFormDefault=&quot;qualified&quot;&gt;
              &lt;xsd:element name=&quot;ImportShape&quot; type=&quot;ImportShapeDataType&quot;/&gt;
              &lt;xsd:complexType name=&quot;ImportShapeDataType&quot;&gt;
                &lt;xsd:sequence&gt;
            	  &lt;xsd:element name=&quot;GeometryFileReference&quot; type=&quot;xsd:string&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;/&gt;
            	  &lt;xsd:element name=&quot;ImageFileReference&quot; type=&quot;xsd:string&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;1&quot;/&gt;
                  &lt;xsd:element name=&quot;ProductName&quot; type=&quot;xsd:string&quot; minO [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t">
            <summary>
            Serialization structure for shape Enumerator data
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.ShapeName">
            <summary>
            Shape names.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.ShapeGuid">
            <summary>
            Shape GUID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.GeometryGuid">
            <summary>
            Shape geometry GUID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.Fingerprint">
            <summary>
            Shape geometry fingerprint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.Extrema">
            <summary>
            Shape extrema.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.Solidity">
            <summary>
            Shape solidity.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t.BrepType">
            <summary>
            Shape brep type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t">
            <summary>
            Serialization structure for shape and shape Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t.MoreShapesLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t.IndexToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t.nShapes">
            <summary>
            Number of the shapes in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t.aData">
            <summary>
            Shape enumerator data
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeEnumerator_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t">
            <summary>
            Serialization structure for shape and shape Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.MoreShapesLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.IndexToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.nShapes">
            <summary>
            Number of the shapes in the enumerator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.aData">
            <summary>
            Shape enumerator data
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.MaxChunkSize">
            <summary>
            Maximum amount of <see cref="T:Tekla.Structures.CatalogInternal.dotcatShapeEnumData_t"/> that fit into <see cref="F:Tekla.Structures.CatalogInternal.dotcatInteropShapeEnumerator_t.aData"/> 
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatGuid_t">
            <summary>
            Serialization structure for a GUID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatGuid_t.aGuid">
            <summary>
            The GUID.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatShapeName_t">
            <summary>    
            Serialization structure for shape name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeName_t.aName">
            <summary>
            The name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatGeometryHash_t">
            <summary>    
            Serialization structure for a geometry hash.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatGeometryHash_t.aHash">
            <summary>
            The geometry hash (deprecated).
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotExtrema_t">
            <summary>
            Serialization structure for shape extrema.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotExtrema_t.aMinPoint">
            <summary>
            The extrema minimum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotExtrema_t.aMaxPoint">
            <summary>
            The extrema maximum.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.dotExtrema_t.ToStruct(Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Converts an open API bounding box to an extrema structure.
            </summary>
            <param name="boundingBox"></param>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.dotExtrema_t.FromStruct(Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Converts an extrema structure to an open API bounding.
            </summary>
            <param name="boundingBox"></param>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatFingerprint_t">
            <summary>    
            Serialization structure for the geometric fingerprint of the shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatFingerprint_t.aFingerprint">
            <summary>
            The value of the geometric fingerprint.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportResult">
            <summary>
            The result of the import function.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.NoResult">
            <summary>
            Import failed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.Ok">
            <summary>
            Import succeeded.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.Fail">
            <summary>
            Import failed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.GeometryError">
            <summary>
            Geometry fatal error causing importing failed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.GeometryFileMissing">
            <summary>
            The geometry file is missing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.NameAlreadyExists">
            <summary>
            The shape name already exists in the model but overwriting not specified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.MetadataError">
            <summary>
            There is error in metadata.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.MetadataFileMissing">
            <summary>
            The metadata file is mandatory but missing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportResult.ShapeAlreadyExists">
            <summary>
            The metadata file is mandatory but missing.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ImportEntryType">
            <summary>
            The import entry type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportEntryType.Metadata">
            <summary>
            The metadata as entry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportEntryType.Geometry">
            <summary>
            The geometry as entry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ImportEntryType.NativeArchive">
            <summary>
            The native archive as entry.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ShapeInsertResult">
            <summary>
            The result of the insert function.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.NoResult">
            <summary>
            Insert failed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.Ok">
            <summary>
            Insert succeeded.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.SystemFail">
            <summary>
            Insert failed due to system problems like insufficient disk or memory
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.GeometryMissing">
            <summary>
            Geometry fatal error, polymesh not set to shape or polymesh empty
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.HashMissing">
            <summary>
            The geometry hash value has not been calculated amd set into the input
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.UpAxisMissing">
            <summary>
            The up axis is missing from the input.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.NameError">
            <summary>
            The shape name already exists in insert or does nto exist in modify.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.BrepExists">
            <summary>
            The geometry exists in shape catalog.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.StoringFailed">
            <summary>
            Adding the shape into the BRep storage failed
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeInsertResult.SolidCleanFailed">
            <summary>
            Cleaning the solid created from polymesh failed, this is different from non-solidity
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ShapeLocation">
            <summary>
            Location of shape data on the disk.
            NOTE: If shape originates from non-Model location, 
            once it used in the user model the shape data will be copied and located also in the Model folder.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.Error">
            <summary>
            Shape location information is not found
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.Model">
            <summary>
            Shape data is located in the model folder
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.System">
            <summary>
            Shape data is located in XS_SYSTEM folders
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.Project">
            <summary>
            Shape data is located in XS_PROJECT folders
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.Firm">
            <summary>
            Shape data is located in XS_FIRM folders
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeLocation.DefaultBrepPath">
            <summary>
            Shape data is located in XS_DEFAULT_BREP_PATH folder
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatShapeImport_t">
            <summary>
            The import shape struct internally used to communicate with TS.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.EntryType">
            <summary>
            Type of entry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.FolderPath">
            <summary>
            The folder path.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.EntryFileName">
            <summary>
            The entry file name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.ShapeName">
            <summary>
            The shape name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.GeometryIdentifier">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.Fingerprint">
            <summary>
            The shape geometric fingerprint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.CreateCustomPart">
            <summary>
            A flag indicating if a custom part is to be created at import
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.Overwrite">
            <summary>
            Existing shape will be overwritten if value is not zero.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShapeImport_t.ScalingFactor">
            <summary>
            The scaling factor
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ShapeHandler">
            <summary>
            The ShapeImport interface.
            </summary>
        </member>
        <member name="E:Tekla.Structures.CatalogInternal.ShapeHandler.CatalogChanged">
            <summary>
            Event that triggers when the shape catalog has changed.
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.Import(Tekla.Structures.CatalogInternal.ImportEntry)">
            <summary>
            Import a shape.
            </summary>
            <param name="entry">Shape details.</param>
            <returns>The imported shape <see cref="T:Tekla.Structures.Catalogs.ShapeItem"/> at success.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when import failed due to internal reason.</exception>
            <exception cref="T:System.ArgumentException">Throws when Fatal geometry error or Shape name already exists or Metadata error occurs.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Throws when Geometry file not found or Metadata file not found.</exception>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.TryImport(Tekla.Structures.CatalogInternal.ImportEntry,Tekla.Structures.Catalogs.ShapeItem@)">
            <summary>
            Import a shape and returns the import result.
            </summary>
            <param name="entry">Shape details.</param>
            <param name="shapeItem">Output shape item.</param>
            <returns>The import result.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.ImportOrGet(Tekla.Structures.CatalogInternal.ImportEntry)">
            <summary>
            Import a shape into the shape catalog. If, based on the geometric fingerprint
            the shape is detected to be already existing in the catalog, the new shape is
            not added and the old existing shape information is returned.
            </summary>
            <returns>
            The imported/recalled shape <see cref="T:Tekla.Structures.Catalogs.ShapeItem"/> at success.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.ExistsByBrep(Tekla.Structures.Geometry3d.FacetedBrep)">
            <summary>
            Determine if a shape exists in the catalog using a geometric fingerprint value calculated from its geometry
            </summary>
            <returns>
            Returns true if at least one shape matching the geometry fingerprint of the brep exists
            in the catalog, false otherwise
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.ExistsByFingerprint(System.String)">
            <summary>
            Use an externally provided geometric fingerprint value to determine if a similar shape exists in the catalog
            </summary>
            <returns>
            Returns true if at least one shape matching the geometry fingerprint exists in the catalog, false otherwise
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.ExistsByName(System.String)">
            <summary>
            Use the shape name to determine if the shape exists in the catalog
            </summary>
            <returns>
            True if at least one shape matching the name exists in the catalog,
            false otherwise
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.CleanAndModifyByName(System.String,System.Boolean@)">
            <summary>
            Selects a shape by its name, then cleans and stores the shape into the shape catalog
            </summary>
            <param name="name">An input parameter that defines the name of the shape to clean</param>
            <param name="isSolid">A reference that will get set to true if the result is a solid</param>
            <returns>True if cleaning and storing to catalog was successful</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.InsertShapeAllowGeometricDuplicates(Tekla.Structures.Catalogs.ShapeItem@)">
             <summary>
             Inserts a shape including its geometry into the shape catalog of the model without checking if a
             shape containing identical geometry already exists in the catalog
             /// </summary>
             <param name="inputShape">
             A reference to the ShapeItem to insert into the shape catalog, it also gets the resulting shape info BUT
             NOTE that the geometry is not retrieved in the ShapeItem and will be NULL after the inserting!!!
             </param>
             <returns>
             Return true on success.
             </returns>
             <example>
             <code>
             using System;
             using Tekla.Structures.CatalogInternal;
            
             public class Example
             {
                    public void InsertSimpleCube()
                    {
                      var vertices = new[]
                      {
                         new Vector(  0.0,   0.0,   0.0), // 0
                         new Vector(300.0,   0.0,   0.0), // 1
                         new Vector(300.0, 300.0,   0.0), // 2
                         new Vector(  0.0, 300.0,   0.0), // 3
                         new Vector(  0.0,   0.0, 300.0), // 4
                         new Vector(300.0,   0.0, 300.0), // 5
                         new Vector(300.0, 300.0, 300.0), // 6
                         new Vector(  0.0, 300.0, 300.0), // 7
                     };
                     var outloop = new[] { new[] { 0, 3, 2, 1 },
                                   new[] { 0, 1, 5, 4 },
                                   new[] { 1, 2, 6, 5 },
                                   new[] { 2, 3, 7, 6 },
                                   new[] { 3, 0, 4, 7 },
                                   new[] { 4, 5, 6, 7 }};
            
                     var innerLoop = new Dictionary{int, int[][]}
                     {
                     };
            
                     var brep = new FacetedBrep(vertices, outloop, innerLoop);
                     var shapeItem = new ShapeItem
                     {
                         Name = "MyNiceCubeBrep",
                         ShapeFacetedBrep = brep,
                         UpAxis = ShapeUpAxis.Z_Axis
                     };
                     var result = ShapeHandler.InsertShapeAllowGeometricDuplicates(shapeItem);
                  }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetAllShapeMetadata(System.String)">
             <summary>
             Gets the metadata of a shape
             </summary>
             <param name="guid">An input parameter that defines the guid of the shape whose metadata we want to get</param>
             <returns>Returns a list of key-value pairs that contain the metadata of the shape specified by guid.</returns>
             <example>
             <code>
             using System;
             using Tekla.Structures.CatalogInternal;
            
             public class Example
             {
                  var polymesh = CreateBrep();
                  var shapeItem = new ShapeItem
                  {
                      Name = "TestShapeName",
                      ShapeFacetedBrep = polymesh,
                      UpAxis = ShapeUpAxis.Z_Axis
                  };
                  var result = shapeItem.Insert();
            
                  var testPairs1 = new List{Tuple{string, string}}
                  {
                      new Tuple{string, string}("TestKey", "TestValue")
                  };
            
                  shapeItem.AppendMetadata(testPairs1));
                  var MetadataFromCatalog = ShapeHandler.GetAllShapeMetadata(shapeItem.Guid);
            
                  Assert.AreEqual(MetadataFromCatalog, testPairs1);
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetHandlePoints(System.String)">
            <summary>
            Get the Shape Handle Points
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.CountShapeInstances">
             <summary>
             Returns the map of shape name and the number of shape instances in the model.
             </summary>
             <example>
             This sample shows how to call the <see cref="M:Tekla.Structures.CatalogInternal.ShapeHandler.CountShapeInstances"/> method to get the instance count for all shapes in the model
             and check for the ones without instances.
             <code>
             public List&lt;string&gt; CountShapeInstancesTest()
             {
                 var shapeSizeMap = ShapeHandler.CountShapeInstances();
                 var removedShapes = new List&lt;String&gt;();
            
                 foreach (var item in shapeSizeMap) {
                 {
                     if (item.Value == 0)
                     {
                         removedShapes.Add(item.Key);
                     }
                 }
            
                 return removedShapes;
             }
             </code>
             </example>
             <returns>
             The Dictionary of the shape name and the number of shape instances in the model
             </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetShapeLocation(System.String)">
             <summary>
             Returns location of shape file.
             </summary>
             <example>
             This sample shows how to call the <see cref="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetShapeLocation(System.String)"/> method to get location of shape files on the disk.
             Shapes added by the user in TS will be located in the Model folder.
             <code>
             using System;
             using Tekla.Structures.CatalogInternal;
            
             public class Example
             {
                  var polymesh = CreateBrep();
                  var shapeItem = new ShapeItem
                  {
                      Name = "TestShapeName",
                      ShapeFacetedBrep = polymesh,
                      UpAxis = ShapeUpAxis.Z_Axis
                  };
                  var result = shapeItem.Insert();
            
                  Assert.IsTrue(ShapeHandler.GetShapeLocation(shapeItem.Name).HasFlag(ShapeLocation.Model));
            
             }
             </code>
             </example>
             <param name="shapeName"></param>
             <returns>Location of shape files</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.DeleteMetadata(System.String,System.String)">
             <summary>
             Delete the shape metadata by key
             </summary>
             <param name="guid">An input parameter that defines the guid of the shape whose metadata we want to delete</param>
             <param name="metadataKey">The metadata key</param>
             <example>
             This sample shows how to call the <see cref="M:Tekla.Structures.CatalogInternal.ShapeHandler.DeleteMetadata(System.String,System.String)"/> method to delete metadata from the shape.
             <code>
             public bool RemoveShapeMetadataTest(string shapeGuid, string metadataKey)
             {
                 var shapeEnumerator = CatalogHandler.GetShapeItems();
            
                 shapeEnumerator.Reset();
                 while (shapeEnumerator.MoveNext())
                 {
                     var shape = shapeEnumerator.Current;
            
                     if (shape.Guid == shapeGuid)
                     {
                         return ShapeHandler.DeleteMetadata(shape.Guid, metadataKey);
                     }
                 }
            
                 return false;
             }
             </code>
             </example>
             <returns>True if success and False if key not found or deletion failed</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.AppendMetadata(System.String,System.Collections.Generic.IList{System.Tuple{System.String,Tekla.Structures.CatalogInternal.ShapeMetadata}})">
             <summary>
             Appends metadata key-value pairs to the shape information. I
             </summary>
             <param name="guid">An input parameter that defines the guid of the shape</param>
             <param name="keyValPairs">A list of the key-value pairs that define the metatadata to be added</param>
             <example>
             <code>
             public void InsertAndAddMetadataTest()
             {
                 // NOTE: replace "[" and "]" with smaller than and larger than characters,
                 // had to be done like this due to doxygen XML clashing with C# syntax
            
                 var polymesh = CreateSomeValidBrep();
                 var shapeItem = new ShapeItem
                 {
                     Name = "TestFileName",
                     ShapeFacetedBrep = polymesh,
                     UpAxis = ShapeUpAxis.Z_Axis
                 };
            
                 shapeItem.Insert();
            
                 var testPairs = new List [Tuple[string, string]]
                     {
                       new Tuple[string, string] ("TestTAG", "testval"),
                       new Tuple[string, string] ("Volume", "1.01")
                     };
            
                ShapeHandler.AppendMetadata(shapeItem.Guid, testPairs);
             }
             </code>
             </example>
             <returns>
             True on success. Will return false and not add any metadata if even one key is empty.
             </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetAllMetadataKeys(System.String)">
            <summary>
            Gets all metadata keys associated with the shape
            </summary>
            <param name="guid">An input parameter that defines the guid of the shape</param>
            <returns>A list of strings containing the keys</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.AddMetadataKeyVal(System.String,System.String,Tekla.Structures.CatalogInternal.ShapeMetadata)">
             <summary>
             Inserts a metadata key-value pair to this shape
             </summary>
             <param name="guid">An input parameter that defines the guid of the shape</param>
             <param name="key">key that defines the metatadata key to be added</param>
             <param name="value">value to set for key. Value maximum length is 1023 characters</param>
             <example>
             <code>
             public void InsertMetadataTest()
             {
                 var polymesh = CreateCubeBrepGeometry();
                 var shapeItem = new ShapeItem
                 {
                     Name = "TestShapeName",
                     ShapeFacetedBrep = polymesh,
                     UpAxis = ShapeUpAxis.Z_Axis
                 };
            
                 shapeItem.Insert();
            
                 var metadata = new ShapeMetadata("5.0", ShapeMetadataTypeEnum.Weight, "albl_Wt", "albl_Wt_desc");
                 ShapeHandler.AddMetadataKeyVal(shapeItem.Guid, "testKey", metadata);
             }
             </code>
             </example>
             <returns>
             True on success. Will return false and not add any metadata if key is missing. Throws exceptions
             according to type of error.
             </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.UpdateMetadataKeyVal(System.String,System.String,Tekla.Structures.CatalogInternal.ShapeMetadata)">
             <summary>
             Updates the value of an existing key in the shape metadata
             </summary>
             <param name="guid">An input parameter that defines the guid of the shape</param>
             <param name="key">Defines the existing metadata key to search for in shape</param>
             <param name="newValue">The new value to set for key</param>/// 
             <example>
             <code>
             public void UpdateMetadataKeyValTest()
             {
            
                 var polymesh = CreateSomeValidBrep();
                 var shapeItem = new ShapeItem
                 {
                     Name = "TestShapeName",
                     ShapeFacetedBrep = polymesh,
                     UpAxis = ShapeUpAxis.Z_Axis
                 };
            
                 shapeItem.Insert();
                 ShapeHandler.AddMetadataKeyVal(shapeItem.Guid, "testKey", new ShapeMetadata("testVal", ShapeMetadataTypeEnum.Text, "", ""));
                 ShapeHandler.UpdateMetadataKeyVal(shapeItem.Guid, "testKey", new ShapeMetadata("NEWtestVal", ShapeMetadataTypeEnum.Text, "", ""));
             }
             </code>
             </example>
             <returns>
             True on success. Will return false and not add any metadata if key is missing. Throws exceptions
             according to type of error.
             </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.GetMetadata(System.String,System.String)">
            <summary>
            Gets metadata value that is associated with the input key
            </summary>
            <param name="guid">An input parameter that defines the guid of the shape</param>
            <param name="key">A non-empty string that defines the key in the Metadata key-value pair</param>
            <returns>
            ShapeMetadata for key in this ShapeItem. 
            If either the key from metadata or the shape cannot be found, returns null.
            </returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeHandler.TriggerShapeCatalogChanged">
            <summary>
            Triggers the shape catalog changed event.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatShape_t">
            <summary>
            The shape data.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.TypeGuid">
            <summary>
             The Guid of the shape
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.GeometryGuid">
            <summary>
            The Guid of the shape geometry
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.FingerPrint">
            <summary>
            The geometric fingerprint of the shape, calculated by Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.Extrema">
            <summary>
            The extrema.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.IsSolid">
            <summary>
            Flag indicating whether the shape geometry is a solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.Polymesh">
            <summary>
            Polymesh defining the geometry to be inserted
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.UpAxis">
            <summary>
            What axis is in the UP direction in the shape
            Can not be of the enum type ShapeUpAxis here because of
            "Inconsistent accessibility". See other enum types in DotNet for same pattern.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatShape_t.BrepType">
            <summary>
            Defines BrepType of shapes.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum">
            <summary>
            Represents data type or measurement unit of the specific metadata
            If this is updated, update ShapeMetadataType_e on the Core side
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Text">
            <summary>
            Default value is text
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Length">
            <summary>
            Unit of length
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Area">
            <summary>
            Unit of area
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Volume">
            <summary>
            Unit of volume
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.Weight">
            <summary>
            Unit of weight
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum.DateTime">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.ShapeMetadata">
            <summary>
            ShapeMetadata represents metadata value that is input by the user. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.#ctor(System.Object,Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.CatalogInternal.ShapeMetadata" /> class.
            </summary>
            <param name="val">Metadata value</param>
            <param name="type">Metadata type<see cref="T:Tekla.Structures.CatalogInternal.ShapeMetadataTypeEnum" /></param>
            <param name="label"> Metadata label</param>
            <param name="description">Metadata description</param>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ShapeMetadata.Value">
            <summary>
            Limited to 128 characters
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ShapeMetadata.Type">
            <summary>
            Data type or unit for this metadata entry
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ShapeMetadata.Label">
            <summary>
            Limited to 128 characters
            </summary>
        </member>
        <member name="P:Tekla.Structures.CatalogInternal.ShapeMetadata.Description">
            <summary>
            Limited to 128 characters
            </summary>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.ConvertStringListToShapeMetadata(System.Collections.Generic.List{System.String})">
            <summary>
            Converts string list of 4 values to shape metadata.
            </summary>
            <param name="metadataAsStringList">String list with one element for each of 4 fields in ShapeMetadata</param>
            <returns>ShapeMetadata formed by using strings from input string list</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.ConvertStringMatadataToShapeMetadata(System.Collections.Generic.List{System.Tuple{System.String,System.Collections.Generic.List{System.String}}})">
            <summary>
            Convert list of metadata values, represented as a list of key-values (string list)
            to list of key-values (metadata list)
            </summary>
            <param name="metadatasStringList">Metadata as list of string</param>
            <returns>List of key-metadata tuples.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj">The object that equality is wished to be checked with.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.GetHashCode">
            <summary>
            Get the hashcode based on the value.
            </summary>
            <returns>The hashed number.</returns>
        </member>
        <member name="M:Tekla.Structures.CatalogInternal.ShapeMetadata.ConvertToStringList">
            <summary>
            Convert ShapeMetadata to string list.
            </summary>
            <returns>Shape metadata field transformed to a list of strings</returns>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t">
            <summary>
            Serialization structure for UserPropertyItem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.USERPROPERTY_VALUEOPTIONS_SIZE">
            <summary>
            Max count of options
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Name">
            <summary>
            The name of the user property
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Label">
            <summary>
            The label of the user property
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.LabelTranslated">
            <summary>
            The translated label of the user property
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Type">
            <summary>
            The type of the user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.FieldType">
            <summary>
            The field type of the user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Level">
            <summary>
            The level of the user property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.AffectsNumbering">
            <summary>
            AffectsNumbering.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Unique">
            <summary>
            Unique.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.Visibility">
            <summary>
            Visibility.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.IntDefaultValue">
            <summary>
            Integer default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.DoubleDefaultValue">
            <summary>
            Double default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.StringDefaultValue">
            <summary>
            String default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.nOptionValues">
            <summary>
            Count of option values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItem_t.aOptions">
            <summary>
            Option values.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t">
            <summary>
            Serialization structure for UserPropertyItemObjectTypes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t.Name">
            <summary>
            The name of the user property
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t.nObjectTypes">
            <summary>
            The count of the object types
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypes_t.aObjectTypes">
            <summary>
            Object types.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t">
            <summary>
            Serialization structure for UserPropertyItemObjectTypeOp.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t.Name">
            <summary>
            The name of the user property
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t.ObjectType">
            <summary>
            The object type
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemObjectTypeOperation_t.Operation">
            <summary>
            The operation
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t">
            <summary>
            Serialization structure for Profile Item Enumerator
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.ObjectType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.MoreUserPropertyItemsLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.IndexToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.nUserPropertyItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.aUserPropertyItemNames">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.aUserPropertyItemTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyItemEnumerator_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyName_t">
            <summary>
            Serialization structure for UserPropertyName.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyName_t.aName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t">
            <summary>
            Serialization structure for UserPropertyOption.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t.IntValue">
            <summary>
            Integer option value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t.DoubleValue">
            <summary>
            Double option value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t.StringValue">
            <summary>
            String option value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t.OptionLabel">
            <summary>
            Option name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.CatalogInternal.dotcatUserPropertyOption_t.OptionLabelTranslated">
            <summary>
            Translated option name.
            </summary>
        </member>
    </members>
</doc>
